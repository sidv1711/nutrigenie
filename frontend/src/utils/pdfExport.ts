import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { MealPlan } from '@/types/mealPlan';
import { GroceryList } from '@/types/grocery';

const DAYS_OF_WEEK = [
  'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
];

export const generateMealPlanPDF = async (mealPlan: MealPlan): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.width;
  const pageHeight = pdf.internal.pageSize.height;
  let yPosition = 20;

  // Title
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Meal Plan', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 10;

  // Date range
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  const startDate = new Date(mealPlan.start_date).toLocaleDateString();
  const endDate = new Date(mealPlan.end_date).toLocaleDateString();
  pdf.text(`${startDate} - ${endDate}`, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 15;

  // Store info
  if (mealPlan.stores && mealPlan.stores.length > 0) {
    pdf.setFontSize(10);
    pdf.text(`Stores: ${mealPlan.stores.map(s => s.name).join(', ')}`, 20, yPosition);
    yPosition += 10;
  }

  // Total cost
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'bold');
  pdf.text(`Total Cost: $${mealPlan.total_cost.toFixed(2)}`, 20, yPosition);
  yPosition += 20;

  // Days
  for (const day of mealPlan.days) {
    // Check if we need a new page
    if (yPosition > pageHeight - 60) {
      pdf.addPage();
      yPosition = 20;
    }

    // Day header
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text(DAYS_OF_WEEK[day.day_of_week], 20, yPosition);
    yPosition += 10;

    // Meals
    for (const meal of day.meals) {
      if (yPosition > pageHeight - 40) {
        pdf.addPage();
        yPosition = 20;
      }

      // Meal type
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`${meal.meal_type.charAt(0).toUpperCase() + meal.meal_type.slice(1)} (${meal.servings} servings)`, 30, yPosition);
      yPosition += 8;

      // Recipe name
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'bold');
      pdf.text(meal.recipe.name, 40, yPosition);
      yPosition += 6;

      // Nutrition info
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'normal');
      const nutrition = `${meal.recipe.calories_per_serving} cal • ${meal.recipe.protein_per_serving}g protein • ${meal.recipe.carbs_per_serving}g carbs • ${meal.recipe.fat_per_serving}g fat`;
      pdf.text(nutrition, 40, yPosition);
      yPosition += 6;

      // Ingredients
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Ingredients:', 40, yPosition);
      yPosition += 5;

      for (const ingredient of meal.recipe.ingredients) {
        if (yPosition > pageHeight - 10) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const cost = typeof ingredient.price_per_unit === 'number' ? 
          ` ($${(ingredient.price_per_unit * ingredient.quantity).toFixed(2)})` : '';
        const ingredientText = `• ${ingredient.quantity} ${ingredient.unit} ${ingredient.name}${cost}`;
        pdf.text(ingredientText, 50, yPosition);
        yPosition += 4;
      }

      // Instructions
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Instructions:', 40, yPosition);
      yPosition += 5;

      for (let i = 0; i < meal.recipe.instructions.length; i++) {
        if (yPosition > pageHeight - 10) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const instruction = `${i + 1}. ${meal.recipe.instructions[i]}`;
        const lines = pdf.splitTextToSize(instruction, pageWidth - 60);
        pdf.text(lines, 50, yPosition);
        yPosition += lines.length * 4;
      }

      // Prep/cook time
      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'italic');
      pdf.text(`Prep: ${meal.recipe.prep_time_minutes}min • Cook: ${meal.recipe.cook_time_minutes}min`, 40, yPosition);
      yPosition += 15;
    }
    
    yPosition += 10; // Space between days
  }

  // Footer
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Generated by NutriGenie', pageWidth / 2, pageHeight - 10, { align: 'center' });

  // Save the PDF
  pdf.save(`meal-plan-${startDate.replace(/\//g, '-')}.pdf`);
};

export const generateGroceryListPDF = async (groceryList: GroceryList): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.width;
  const pageHeight = pdf.internal.pageSize.height;
  let yPosition = 20;

  // Title
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Grocery List', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 20;

  // Total cost
  if (groceryList.total_cost !== null && groceryList.total_cost !== undefined) {
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text(`Total Cost: $${groceryList.total_cost.toFixed(2)}`, 20, yPosition);
    yPosition += 15;
  }

  // Table headers
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Item', 20, yPosition);
  pdf.text('Qty', 100, yPosition);
  pdf.text('Unit', 130, yPosition);
  pdf.text('Price/Unit', 160, yPosition);
  yPosition += 10;

  // Line under headers
  pdf.line(20, yPosition, pageWidth - 20, yPosition);
  yPosition += 5;

  // Group items by category if possible
  const categorizedItems = groceryList.items.reduce((acc, item) => {
    const category = 'General'; // Could be enhanced to use actual categories
    if (!acc[category]) acc[category] = [];
    acc[category].push(item);
    return acc;
  }, {} as Record<string, typeof groceryList.items>);

  // Items
  pdf.setFontSize(9);
  pdf.setFont('helvetica', 'normal');

  for (const [category, items] of Object.entries(categorizedItems)) {
    if (yPosition > pageHeight - 30) {
      pdf.addPage();
      yPosition = 20;
    }

    // Category header (if we had categories)
    if (Object.keys(categorizedItems).length > 1) {
      pdf.setFont('helvetica', 'bold');
      pdf.text(category, 20, yPosition);
      yPosition += 8;
      pdf.setFont('helvetica', 'normal');
    }

    for (const item of items) {
      if (yPosition > pageHeight - 15) {
        pdf.addPage();
        yPosition = 20;
      }

      // Checkbox
      pdf.rect(20, yPosition - 3, 3, 3);
      
      // Item name
      pdf.text(item.name, 30, yPosition);
      
      // Quantity
      pdf.text(item.total_quantity.toFixed(2), 100, yPosition);
      
      // Unit
      pdf.text(item.unit, 130, yPosition);
      
      // Price per unit
      if (item.price_per_unit !== null && item.price_per_unit !== undefined) {
        pdf.text(`$${item.price_per_unit.toFixed(2)}`, 160, yPosition);
      } else {
        pdf.text('—', 160, yPosition);
      }

      yPosition += 6;
    }
    
    yPosition += 5; // Space between categories
  }

  // Footer
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Generated by NutriGenie', pageWidth / 2, pageHeight - 10, { align: 'center' });

  // Save the PDF
  pdf.save(`grocery-list-${new Date().toISOString().split('T')[0]}.pdf`);
};

export const generatePDFFromElement = async (
  element: HTMLElement,
  filename: string,
  options?: {
    quality?: number;
    scale?: number;
    useCORS?: boolean;
  }
): Promise<void> => {
  const canvas = await html2canvas(element, {
    // quality: options?.quality || 1,
    scale: options?.scale || 2,
    useCORS: options?.useCORS || true,
    logging: false,
  });

  const imgData = canvas.toDataURL('image/png');
  const pdf = new jsPDF({
    orientation: canvas.width > canvas.height ? 'landscape' : 'portrait',
    unit: 'px',
    format: [canvas.width, canvas.height],
  });

  pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);
  pdf.save(filename);
};