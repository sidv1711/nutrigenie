

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE SCHEMA IF NOT EXISTS "auth";


ALTER SCHEMA "auth" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "extensions";


ALTER SCHEMA "extensions" OWNER TO "postgres";


CREATE SCHEMA IF NOT EXISTS "graphql";


ALTER SCHEMA "graphql" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "graphql_public";


ALTER SCHEMA "graphql_public" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "information_schema";


ALTER SCHEMA "information_schema" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_catalog";


ALTER SCHEMA "pg_catalog" OWNER TO "supabase_admin";


COMMENT ON SCHEMA "pg_catalog" IS 'system catalog schema';



CREATE SCHEMA IF NOT EXISTS "pg_temp_11";


ALTER SCHEMA "pg_temp_11" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_12";


ALTER SCHEMA "pg_temp_12" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_15";


ALTER SCHEMA "pg_temp_15" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_18";


ALTER SCHEMA "pg_temp_18" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_23";


ALTER SCHEMA "pg_temp_23" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_24";


ALTER SCHEMA "pg_temp_24" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_25";


ALTER SCHEMA "pg_temp_25" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_27";


ALTER SCHEMA "pg_temp_27" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_30";


ALTER SCHEMA "pg_temp_30" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_35";


ALTER SCHEMA "pg_temp_35" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_39";


ALTER SCHEMA "pg_temp_39" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_42";


ALTER SCHEMA "pg_temp_42" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_43";


ALTER SCHEMA "pg_temp_43" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_46";


ALTER SCHEMA "pg_temp_46" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_48";


ALTER SCHEMA "pg_temp_48" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_53";


ALTER SCHEMA "pg_temp_53" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_58";


ALTER SCHEMA "pg_temp_58" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_59";


ALTER SCHEMA "pg_temp_59" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_temp_6";


ALTER SCHEMA "pg_temp_6" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast";


ALTER SCHEMA "pg_toast" OWNER TO "supabase_admin";


COMMENT ON SCHEMA "pg_toast" IS 'reserved schema for TOAST tables';



CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_11";


ALTER SCHEMA "pg_toast_temp_11" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_12";


ALTER SCHEMA "pg_toast_temp_12" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_15";


ALTER SCHEMA "pg_toast_temp_15" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_18";


ALTER SCHEMA "pg_toast_temp_18" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_23";


ALTER SCHEMA "pg_toast_temp_23" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_24";


ALTER SCHEMA "pg_toast_temp_24" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_25";


ALTER SCHEMA "pg_toast_temp_25" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_27";


ALTER SCHEMA "pg_toast_temp_27" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_30";


ALTER SCHEMA "pg_toast_temp_30" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_35";


ALTER SCHEMA "pg_toast_temp_35" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_39";


ALTER SCHEMA "pg_toast_temp_39" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_42";


ALTER SCHEMA "pg_toast_temp_42" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_43";


ALTER SCHEMA "pg_toast_temp_43" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_46";


ALTER SCHEMA "pg_toast_temp_46" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_48";


ALTER SCHEMA "pg_toast_temp_48" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_53";


ALTER SCHEMA "pg_toast_temp_53" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_58";


ALTER SCHEMA "pg_toast_temp_58" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_59";


ALTER SCHEMA "pg_toast_temp_59" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pg_toast_temp_6";


ALTER SCHEMA "pg_toast_temp_6" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "pgbouncer";


ALTER SCHEMA "pgbouncer" OWNER TO "pgbouncer";


CREATE SCHEMA IF NOT EXISTS "public";


ALTER SCHEMA "public" OWNER TO "pg_database_owner";


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE SCHEMA IF NOT EXISTS "realtime";


ALTER SCHEMA "realtime" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "storage";


ALTER SCHEMA "storage" OWNER TO "supabase_admin";


CREATE SCHEMA IF NOT EXISTS "vault";


ALTER SCHEMA "vault" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."C" (provider = libc, locale = 'C');


ALTER COLLATION "pg_catalog"."C" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."C" IS 'standard C collation';



CREATE COLLATION "pg_catalog"."POSIX" (provider = libc, locale = 'POSIX');


ALTER COLLATION "pg_catalog"."POSIX" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."POSIX" IS 'standard POSIX collation';



CREATE COLLATION "pg_catalog"."af-NA-x-icu" (provider = icu, locale = 'af-NA');


ALTER COLLATION "pg_catalog"."af-NA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."af-NA-x-icu" IS 'Afrikaans (Namibia)';



CREATE COLLATION "pg_catalog"."af-ZA-x-icu" (provider = icu, locale = 'af-ZA');


ALTER COLLATION "pg_catalog"."af-ZA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."af-ZA-x-icu" IS 'Afrikaans (South Africa)';



CREATE COLLATION "pg_catalog"."af-x-icu" (provider = icu, locale = 'af');


ALTER COLLATION "pg_catalog"."af-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."af-x-icu" IS 'Afrikaans';



CREATE COLLATION "pg_catalog"."agq-CM-x-icu" (provider = icu, locale = 'agq-CM');


ALTER COLLATION "pg_catalog"."agq-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."agq-CM-x-icu" IS 'Aghem (Cameroon)';



CREATE COLLATION "pg_catalog"."agq-x-icu" (provider = icu, locale = 'agq');


ALTER COLLATION "pg_catalog"."agq-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."agq-x-icu" IS 'Aghem';



CREATE COLLATION "pg_catalog"."ak-GH-x-icu" (provider = icu, locale = 'ak-GH');


ALTER COLLATION "pg_catalog"."ak-GH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ak-GH-x-icu" IS 'Akan (Ghana)';



CREATE COLLATION "pg_catalog"."ak-x-icu" (provider = icu, locale = 'ak');


ALTER COLLATION "pg_catalog"."ak-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ak-x-icu" IS 'Akan';



CREATE COLLATION "pg_catalog"."am-ET-x-icu" (provider = icu, locale = 'am-ET');


ALTER COLLATION "pg_catalog"."am-ET-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."am-ET-x-icu" IS 'Amharic (Ethiopia)';



CREATE COLLATION "pg_catalog"."am-x-icu" (provider = icu, locale = 'am');


ALTER COLLATION "pg_catalog"."am-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."am-x-icu" IS 'Amharic';



CREATE COLLATION "pg_catalog"."ar-001-x-icu" (provider = icu, locale = 'ar-001');


ALTER COLLATION "pg_catalog"."ar-001-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-001-x-icu" IS 'Arabic (world)';



CREATE COLLATION "pg_catalog"."ar-AE-x-icu" (provider = icu, locale = 'ar-AE');


ALTER COLLATION "pg_catalog"."ar-AE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-AE-x-icu" IS 'Arabic (United Arab Emirates)';



CREATE COLLATION "pg_catalog"."ar-BH-x-icu" (provider = icu, locale = 'ar-BH');


ALTER COLLATION "pg_catalog"."ar-BH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-BH-x-icu" IS 'Arabic (Bahrain)';



CREATE COLLATION "pg_catalog"."ar-DJ-x-icu" (provider = icu, locale = 'ar-DJ');


ALTER COLLATION "pg_catalog"."ar-DJ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-DJ-x-icu" IS 'Arabic (Djibouti)';



CREATE COLLATION "pg_catalog"."ar-DZ-x-icu" (provider = icu, locale = 'ar-DZ');


ALTER COLLATION "pg_catalog"."ar-DZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-DZ-x-icu" IS 'Arabic (Algeria)';



CREATE COLLATION "pg_catalog"."ar-EG-x-icu" (provider = icu, locale = 'ar-EG');


ALTER COLLATION "pg_catalog"."ar-EG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-EG-x-icu" IS 'Arabic (Egypt)';



CREATE COLLATION "pg_catalog"."ar-EH-x-icu" (provider = icu, locale = 'ar-EH');


ALTER COLLATION "pg_catalog"."ar-EH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-EH-x-icu" IS 'Arabic (Western Sahara)';



CREATE COLLATION "pg_catalog"."ar-ER-x-icu" (provider = icu, locale = 'ar-ER');


ALTER COLLATION "pg_catalog"."ar-ER-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-ER-x-icu" IS 'Arabic (Eritrea)';



CREATE COLLATION "pg_catalog"."ar-IL-x-icu" (provider = icu, locale = 'ar-IL');


ALTER COLLATION "pg_catalog"."ar-IL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-IL-x-icu" IS 'Arabic (Israel)';



CREATE COLLATION "pg_catalog"."ar-IQ-x-icu" (provider = icu, locale = 'ar-IQ');


ALTER COLLATION "pg_catalog"."ar-IQ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-IQ-x-icu" IS 'Arabic (Iraq)';



CREATE COLLATION "pg_catalog"."ar-JO-x-icu" (provider = icu, locale = 'ar-JO');


ALTER COLLATION "pg_catalog"."ar-JO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-JO-x-icu" IS 'Arabic (Jordan)';



CREATE COLLATION "pg_catalog"."ar-KM-x-icu" (provider = icu, locale = 'ar-KM');


ALTER COLLATION "pg_catalog"."ar-KM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-KM-x-icu" IS 'Arabic (Comoros)';



CREATE COLLATION "pg_catalog"."ar-KW-x-icu" (provider = icu, locale = 'ar-KW');


ALTER COLLATION "pg_catalog"."ar-KW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-KW-x-icu" IS 'Arabic (Kuwait)';



CREATE COLLATION "pg_catalog"."ar-LB-x-icu" (provider = icu, locale = 'ar-LB');


ALTER COLLATION "pg_catalog"."ar-LB-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-LB-x-icu" IS 'Arabic (Lebanon)';



CREATE COLLATION "pg_catalog"."ar-LY-x-icu" (provider = icu, locale = 'ar-LY');


ALTER COLLATION "pg_catalog"."ar-LY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-LY-x-icu" IS 'Arabic (Libya)';



CREATE COLLATION "pg_catalog"."ar-MA-x-icu" (provider = icu, locale = 'ar-MA');


ALTER COLLATION "pg_catalog"."ar-MA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-MA-x-icu" IS 'Arabic (Morocco)';



CREATE COLLATION "pg_catalog"."ar-MR-x-icu" (provider = icu, locale = 'ar-MR');


ALTER COLLATION "pg_catalog"."ar-MR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-MR-x-icu" IS 'Arabic (Mauritania)';



CREATE COLLATION "pg_catalog"."ar-OM-x-icu" (provider = icu, locale = 'ar-OM');


ALTER COLLATION "pg_catalog"."ar-OM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-OM-x-icu" IS 'Arabic (Oman)';



CREATE COLLATION "pg_catalog"."ar-PS-x-icu" (provider = icu, locale = 'ar-PS');


ALTER COLLATION "pg_catalog"."ar-PS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-PS-x-icu" IS 'Arabic (Palestinian Territories)';



CREATE COLLATION "pg_catalog"."ar-QA-x-icu" (provider = icu, locale = 'ar-QA');


ALTER COLLATION "pg_catalog"."ar-QA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-QA-x-icu" IS 'Arabic (Qatar)';



CREATE COLLATION "pg_catalog"."ar-SA-x-icu" (provider = icu, locale = 'ar-SA');


ALTER COLLATION "pg_catalog"."ar-SA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-SA-x-icu" IS 'Arabic (Saudi Arabia)';



CREATE COLLATION "pg_catalog"."ar-SD-x-icu" (provider = icu, locale = 'ar-SD');


ALTER COLLATION "pg_catalog"."ar-SD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-SD-x-icu" IS 'Arabic (Sudan)';



CREATE COLLATION "pg_catalog"."ar-SO-x-icu" (provider = icu, locale = 'ar-SO');


ALTER COLLATION "pg_catalog"."ar-SO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-SO-x-icu" IS 'Arabic (Somalia)';



CREATE COLLATION "pg_catalog"."ar-SS-x-icu" (provider = icu, locale = 'ar-SS');


ALTER COLLATION "pg_catalog"."ar-SS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-SS-x-icu" IS 'Arabic (South Sudan)';



CREATE COLLATION "pg_catalog"."ar-SY-x-icu" (provider = icu, locale = 'ar-SY');


ALTER COLLATION "pg_catalog"."ar-SY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-SY-x-icu" IS 'Arabic (Syria)';



CREATE COLLATION "pg_catalog"."ar-TD-x-icu" (provider = icu, locale = 'ar-TD');


ALTER COLLATION "pg_catalog"."ar-TD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-TD-x-icu" IS 'Arabic (Chad)';



CREATE COLLATION "pg_catalog"."ar-TN-x-icu" (provider = icu, locale = 'ar-TN');


ALTER COLLATION "pg_catalog"."ar-TN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-TN-x-icu" IS 'Arabic (Tunisia)';



CREATE COLLATION "pg_catalog"."ar-YE-x-icu" (provider = icu, locale = 'ar-YE');


ALTER COLLATION "pg_catalog"."ar-YE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-YE-x-icu" IS 'Arabic (Yemen)';



CREATE COLLATION "pg_catalog"."ar-x-icu" (provider = icu, locale = 'ar');


ALTER COLLATION "pg_catalog"."ar-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ar-x-icu" IS 'Arabic';



CREATE COLLATION "pg_catalog"."as-IN-x-icu" (provider = icu, locale = 'as-IN');


ALTER COLLATION "pg_catalog"."as-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."as-IN-x-icu" IS 'Assamese (India)';



CREATE COLLATION "pg_catalog"."as-x-icu" (provider = icu, locale = 'as');


ALTER COLLATION "pg_catalog"."as-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."as-x-icu" IS 'Assamese';



CREATE COLLATION "pg_catalog"."asa-TZ-x-icu" (provider = icu, locale = 'asa-TZ');


ALTER COLLATION "pg_catalog"."asa-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."asa-TZ-x-icu" IS 'Asu (Tanzania)';



CREATE COLLATION "pg_catalog"."asa-x-icu" (provider = icu, locale = 'asa');


ALTER COLLATION "pg_catalog"."asa-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."asa-x-icu" IS 'Asu';



CREATE COLLATION "pg_catalog"."ast-ES-x-icu" (provider = icu, locale = 'ast-ES');


ALTER COLLATION "pg_catalog"."ast-ES-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ast-ES-x-icu" IS 'Asturian (Spain)';



CREATE COLLATION "pg_catalog"."ast-x-icu" (provider = icu, locale = 'ast');


ALTER COLLATION "pg_catalog"."ast-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ast-x-icu" IS 'Asturian';



CREATE COLLATION "pg_catalog"."az-Cyrl-AZ-x-icu" (provider = icu, locale = 'az-Cyrl-AZ');


ALTER COLLATION "pg_catalog"."az-Cyrl-AZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."az-Cyrl-AZ-x-icu" IS 'Azerbaijani (Cyrillic, Azerbaijan)';



CREATE COLLATION "pg_catalog"."az-Cyrl-x-icu" (provider = icu, locale = 'az-Cyrl');


ALTER COLLATION "pg_catalog"."az-Cyrl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."az-Cyrl-x-icu" IS 'Azerbaijani (Cyrillic)';



CREATE COLLATION "pg_catalog"."az-Latn-AZ-x-icu" (provider = icu, locale = 'az-Latn-AZ');


ALTER COLLATION "pg_catalog"."az-Latn-AZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."az-Latn-AZ-x-icu" IS 'Azerbaijani (Latin, Azerbaijan)';



CREATE COLLATION "pg_catalog"."az-Latn-x-icu" (provider = icu, locale = 'az-Latn');


ALTER COLLATION "pg_catalog"."az-Latn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."az-Latn-x-icu" IS 'Azerbaijani (Latin)';



CREATE COLLATION "pg_catalog"."az-x-icu" (provider = icu, locale = 'az');


ALTER COLLATION "pg_catalog"."az-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."az-x-icu" IS 'Azerbaijani';



CREATE COLLATION "pg_catalog"."bas-CM-x-icu" (provider = icu, locale = 'bas-CM');


ALTER COLLATION "pg_catalog"."bas-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bas-CM-x-icu" IS 'Basaa (Cameroon)';



CREATE COLLATION "pg_catalog"."bas-x-icu" (provider = icu, locale = 'bas');


ALTER COLLATION "pg_catalog"."bas-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bas-x-icu" IS 'Basaa';



CREATE COLLATION "pg_catalog"."be-BY-x-icu" (provider = icu, locale = 'be-BY');


ALTER COLLATION "pg_catalog"."be-BY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."be-BY-x-icu" IS 'Belarusian (Belarus)';



CREATE COLLATION "pg_catalog"."be-x-icu" (provider = icu, locale = 'be');


ALTER COLLATION "pg_catalog"."be-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."be-x-icu" IS 'Belarusian';



CREATE COLLATION "pg_catalog"."bem-ZM-x-icu" (provider = icu, locale = 'bem-ZM');


ALTER COLLATION "pg_catalog"."bem-ZM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bem-ZM-x-icu" IS 'Bemba (Zambia)';



CREATE COLLATION "pg_catalog"."bem-x-icu" (provider = icu, locale = 'bem');


ALTER COLLATION "pg_catalog"."bem-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bem-x-icu" IS 'Bemba';



CREATE COLLATION "pg_catalog"."bez-TZ-x-icu" (provider = icu, locale = 'bez-TZ');


ALTER COLLATION "pg_catalog"."bez-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bez-TZ-x-icu" IS 'Bena (Tanzania)';



CREATE COLLATION "pg_catalog"."bez-x-icu" (provider = icu, locale = 'bez');


ALTER COLLATION "pg_catalog"."bez-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bez-x-icu" IS 'Bena';



CREATE COLLATION "pg_catalog"."bg-BG-x-icu" (provider = icu, locale = 'bg-BG');


ALTER COLLATION "pg_catalog"."bg-BG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bg-BG-x-icu" IS 'Bulgarian (Bulgaria)';



CREATE COLLATION "pg_catalog"."bg-x-icu" (provider = icu, locale = 'bg');


ALTER COLLATION "pg_catalog"."bg-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bg-x-icu" IS 'Bulgarian';



CREATE COLLATION "pg_catalog"."bgc-IN-x-icu" (provider = icu, locale = 'bgc-IN');


ALTER COLLATION "pg_catalog"."bgc-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bgc-IN-x-icu" IS 'Haryanvi (India)';



CREATE COLLATION "pg_catalog"."bgc-x-icu" (provider = icu, locale = 'bgc');


ALTER COLLATION "pg_catalog"."bgc-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bgc-x-icu" IS 'Haryanvi';



CREATE COLLATION "pg_catalog"."bho-IN-x-icu" (provider = icu, locale = 'bho-IN');


ALTER COLLATION "pg_catalog"."bho-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bho-IN-x-icu" IS 'Bhojpuri (India)';



CREATE COLLATION "pg_catalog"."bho-x-icu" (provider = icu, locale = 'bho');


ALTER COLLATION "pg_catalog"."bho-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bho-x-icu" IS 'Bhojpuri';



CREATE COLLATION "pg_catalog"."bm-ML-x-icu" (provider = icu, locale = 'bm-ML');


ALTER COLLATION "pg_catalog"."bm-ML-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bm-ML-x-icu" IS 'Bambara (Mali)';



CREATE COLLATION "pg_catalog"."bm-x-icu" (provider = icu, locale = 'bm');


ALTER COLLATION "pg_catalog"."bm-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bm-x-icu" IS 'Bambara';



CREATE COLLATION "pg_catalog"."bn-BD-x-icu" (provider = icu, locale = 'bn-BD');


ALTER COLLATION "pg_catalog"."bn-BD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bn-BD-x-icu" IS 'Bangla (Bangladesh)';



CREATE COLLATION "pg_catalog"."bn-IN-x-icu" (provider = icu, locale = 'bn-IN');


ALTER COLLATION "pg_catalog"."bn-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bn-IN-x-icu" IS 'Bangla (India)';



CREATE COLLATION "pg_catalog"."bn-x-icu" (provider = icu, locale = 'bn');


ALTER COLLATION "pg_catalog"."bn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bn-x-icu" IS 'Bangla';



CREATE COLLATION "pg_catalog"."bo-CN-x-icu" (provider = icu, locale = 'bo-CN');


ALTER COLLATION "pg_catalog"."bo-CN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bo-CN-x-icu" IS 'Tibetan (China)';



CREATE COLLATION "pg_catalog"."bo-IN-x-icu" (provider = icu, locale = 'bo-IN');


ALTER COLLATION "pg_catalog"."bo-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bo-IN-x-icu" IS 'Tibetan (India)';



CREATE COLLATION "pg_catalog"."bo-x-icu" (provider = icu, locale = 'bo');


ALTER COLLATION "pg_catalog"."bo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bo-x-icu" IS 'Tibetan';



CREATE COLLATION "pg_catalog"."br-FR-x-icu" (provider = icu, locale = 'br-FR');


ALTER COLLATION "pg_catalog"."br-FR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."br-FR-x-icu" IS 'Breton (France)';



CREATE COLLATION "pg_catalog"."br-x-icu" (provider = icu, locale = 'br');


ALTER COLLATION "pg_catalog"."br-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."br-x-icu" IS 'Breton';



CREATE COLLATION "pg_catalog"."brx-IN-x-icu" (provider = icu, locale = 'brx-IN');


ALTER COLLATION "pg_catalog"."brx-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."brx-IN-x-icu" IS 'Bodo (India)';



CREATE COLLATION "pg_catalog"."brx-x-icu" (provider = icu, locale = 'brx');


ALTER COLLATION "pg_catalog"."brx-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."brx-x-icu" IS 'Bodo';



CREATE COLLATION "pg_catalog"."bs-Cyrl-BA-x-icu" (provider = icu, locale = 'bs-Cyrl-BA');


ALTER COLLATION "pg_catalog"."bs-Cyrl-BA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bs-Cyrl-BA-x-icu" IS 'Bosnian (Cyrillic, Bosnia & Herzegovina)';



CREATE COLLATION "pg_catalog"."bs-Cyrl-x-icu" (provider = icu, locale = 'bs-Cyrl');


ALTER COLLATION "pg_catalog"."bs-Cyrl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bs-Cyrl-x-icu" IS 'Bosnian (Cyrillic)';



CREATE COLLATION "pg_catalog"."bs-Latn-BA-x-icu" (provider = icu, locale = 'bs-Latn-BA');


ALTER COLLATION "pg_catalog"."bs-Latn-BA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bs-Latn-BA-x-icu" IS 'Bosnian (Latin, Bosnia & Herzegovina)';



CREATE COLLATION "pg_catalog"."bs-Latn-x-icu" (provider = icu, locale = 'bs-Latn');


ALTER COLLATION "pg_catalog"."bs-Latn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bs-Latn-x-icu" IS 'Bosnian (Latin)';



CREATE COLLATION "pg_catalog"."bs-x-icu" (provider = icu, locale = 'bs');


ALTER COLLATION "pg_catalog"."bs-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."bs-x-icu" IS 'Bosnian';



CREATE COLLATION "pg_catalog"."ca-AD-x-icu" (provider = icu, locale = 'ca-AD');


ALTER COLLATION "pg_catalog"."ca-AD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ca-AD-x-icu" IS 'Catalan (Andorra)';



CREATE COLLATION "pg_catalog"."ca-ES-x-icu" (provider = icu, locale = 'ca-ES');


ALTER COLLATION "pg_catalog"."ca-ES-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ca-ES-x-icu" IS 'Catalan (Spain)';



CREATE COLLATION "pg_catalog"."ca-FR-x-icu" (provider = icu, locale = 'ca-FR');


ALTER COLLATION "pg_catalog"."ca-FR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ca-FR-x-icu" IS 'Catalan (France)';



CREATE COLLATION "pg_catalog"."ca-IT-x-icu" (provider = icu, locale = 'ca-IT');


ALTER COLLATION "pg_catalog"."ca-IT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ca-IT-x-icu" IS 'Catalan (Italy)';



CREATE COLLATION "pg_catalog"."ca-x-icu" (provider = icu, locale = 'ca');


ALTER COLLATION "pg_catalog"."ca-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ca-x-icu" IS 'Catalan';



CREATE COLLATION "pg_catalog"."ccp-BD-x-icu" (provider = icu, locale = 'ccp-BD');


ALTER COLLATION "pg_catalog"."ccp-BD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ccp-BD-x-icu" IS 'Chakma (Bangladesh)';



CREATE COLLATION "pg_catalog"."ccp-IN-x-icu" (provider = icu, locale = 'ccp-IN');


ALTER COLLATION "pg_catalog"."ccp-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ccp-IN-x-icu" IS 'Chakma (India)';



CREATE COLLATION "pg_catalog"."ccp-x-icu" (provider = icu, locale = 'ccp');


ALTER COLLATION "pg_catalog"."ccp-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ccp-x-icu" IS 'Chakma';



CREATE COLLATION "pg_catalog"."ce-RU-x-icu" (provider = icu, locale = 'ce-RU');


ALTER COLLATION "pg_catalog"."ce-RU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ce-RU-x-icu" IS 'Chechen (Russia)';



CREATE COLLATION "pg_catalog"."ce-x-icu" (provider = icu, locale = 'ce');


ALTER COLLATION "pg_catalog"."ce-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ce-x-icu" IS 'Chechen';



CREATE COLLATION "pg_catalog"."ceb-PH-x-icu" (provider = icu, locale = 'ceb-PH');


ALTER COLLATION "pg_catalog"."ceb-PH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ceb-PH-x-icu" IS 'Cebuano (Philippines)';



CREATE COLLATION "pg_catalog"."ceb-x-icu" (provider = icu, locale = 'ceb');


ALTER COLLATION "pg_catalog"."ceb-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ceb-x-icu" IS 'Cebuano';



CREATE COLLATION "pg_catalog"."cgg-UG-x-icu" (provider = icu, locale = 'cgg-UG');


ALTER COLLATION "pg_catalog"."cgg-UG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."cgg-UG-x-icu" IS 'Chiga (Uganda)';



CREATE COLLATION "pg_catalog"."cgg-x-icu" (provider = icu, locale = 'cgg');


ALTER COLLATION "pg_catalog"."cgg-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."cgg-x-icu" IS 'Chiga';



CREATE COLLATION "pg_catalog"."chr-US-x-icu" (provider = icu, locale = 'chr-US');


ALTER COLLATION "pg_catalog"."chr-US-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."chr-US-x-icu" IS 'Cherokee (United States)';



CREATE COLLATION "pg_catalog"."chr-x-icu" (provider = icu, locale = 'chr');


ALTER COLLATION "pg_catalog"."chr-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."chr-x-icu" IS 'Cherokee';



CREATE COLLATION "pg_catalog"."ckb-IQ-x-icu" (provider = icu, locale = 'ckb-IQ');


ALTER COLLATION "pg_catalog"."ckb-IQ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ckb-IQ-x-icu" IS 'Central Kurdish (Iraq)';



CREATE COLLATION "pg_catalog"."ckb-IR-x-icu" (provider = icu, locale = 'ckb-IR');


ALTER COLLATION "pg_catalog"."ckb-IR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ckb-IR-x-icu" IS 'Central Kurdish (Iran)';



CREATE COLLATION "pg_catalog"."ckb-x-icu" (provider = icu, locale = 'ckb');


ALTER COLLATION "pg_catalog"."ckb-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ckb-x-icu" IS 'Central Kurdish';



CREATE COLLATION "pg_catalog"."cs-CZ-x-icu" (provider = icu, locale = 'cs-CZ');


ALTER COLLATION "pg_catalog"."cs-CZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."cs-CZ-x-icu" IS 'Czech (Czechia)';



CREATE COLLATION "pg_catalog"."cs-x-icu" (provider = icu, locale = 'cs');


ALTER COLLATION "pg_catalog"."cs-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."cs-x-icu" IS 'Czech';



CREATE COLLATION "pg_catalog"."cv-RU-x-icu" (provider = icu, locale = 'cv-RU');


ALTER COLLATION "pg_catalog"."cv-RU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."cv-RU-x-icu" IS 'Chuvash (Russia)';



CREATE COLLATION "pg_catalog"."cv-x-icu" (provider = icu, locale = 'cv');


ALTER COLLATION "pg_catalog"."cv-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."cv-x-icu" IS 'Chuvash';



CREATE COLLATION "pg_catalog"."cy-GB-x-icu" (provider = icu, locale = 'cy-GB');


ALTER COLLATION "pg_catalog"."cy-GB-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."cy-GB-x-icu" IS 'Welsh (United Kingdom)';



CREATE COLLATION "pg_catalog"."cy-x-icu" (provider = icu, locale = 'cy');


ALTER COLLATION "pg_catalog"."cy-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."cy-x-icu" IS 'Welsh';



CREATE COLLATION "pg_catalog"."da-DK-x-icu" (provider = icu, locale = 'da-DK');


ALTER COLLATION "pg_catalog"."da-DK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."da-DK-x-icu" IS 'Danish (Denmark)';



CREATE COLLATION "pg_catalog"."da-GL-x-icu" (provider = icu, locale = 'da-GL');


ALTER COLLATION "pg_catalog"."da-GL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."da-GL-x-icu" IS 'Danish (Greenland)';



CREATE COLLATION "pg_catalog"."da-x-icu" (provider = icu, locale = 'da');


ALTER COLLATION "pg_catalog"."da-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."da-x-icu" IS 'Danish';



CREATE COLLATION "pg_catalog"."dav-KE-x-icu" (provider = icu, locale = 'dav-KE');


ALTER COLLATION "pg_catalog"."dav-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dav-KE-x-icu" IS 'Taita (Kenya)';



CREATE COLLATION "pg_catalog"."dav-x-icu" (provider = icu, locale = 'dav');


ALTER COLLATION "pg_catalog"."dav-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dav-x-icu" IS 'Taita';



CREATE COLLATION "pg_catalog"."de-AT-x-icu" (provider = icu, locale = 'de-AT');


ALTER COLLATION "pg_catalog"."de-AT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."de-AT-x-icu" IS 'German (Austria)';



CREATE COLLATION "pg_catalog"."de-BE-x-icu" (provider = icu, locale = 'de-BE');


ALTER COLLATION "pg_catalog"."de-BE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."de-BE-x-icu" IS 'German (Belgium)';



CREATE COLLATION "pg_catalog"."de-CH-x-icu" (provider = icu, locale = 'de-CH');


ALTER COLLATION "pg_catalog"."de-CH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."de-CH-x-icu" IS 'German (Switzerland)';



CREATE COLLATION "pg_catalog"."de-DE-x-icu" (provider = icu, locale = 'de-DE');


ALTER COLLATION "pg_catalog"."de-DE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."de-DE-x-icu" IS 'German (Germany)';



CREATE COLLATION "pg_catalog"."de-IT-x-icu" (provider = icu, locale = 'de-IT');


ALTER COLLATION "pg_catalog"."de-IT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."de-IT-x-icu" IS 'German (Italy)';



CREATE COLLATION "pg_catalog"."de-LI-x-icu" (provider = icu, locale = 'de-LI');


ALTER COLLATION "pg_catalog"."de-LI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."de-LI-x-icu" IS 'German (Liechtenstein)';



CREATE COLLATION "pg_catalog"."de-LU-x-icu" (provider = icu, locale = 'de-LU');


ALTER COLLATION "pg_catalog"."de-LU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."de-LU-x-icu" IS 'German (Luxembourg)';



CREATE COLLATION "pg_catalog"."de-x-icu" (provider = icu, locale = 'de');


ALTER COLLATION "pg_catalog"."de-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."de-x-icu" IS 'German';



CREATE COLLATION "pg_catalog"."default" (provider = default);


ALTER COLLATION "pg_catalog"."default" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."default" IS 'database''s default collation';



CREATE COLLATION "pg_catalog"."dje-NE-x-icu" (provider = icu, locale = 'dje-NE');


ALTER COLLATION "pg_catalog"."dje-NE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dje-NE-x-icu" IS 'Zarma (Niger)';



CREATE COLLATION "pg_catalog"."dje-x-icu" (provider = icu, locale = 'dje');


ALTER COLLATION "pg_catalog"."dje-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dje-x-icu" IS 'Zarma';



CREATE COLLATION "pg_catalog"."doi-IN-x-icu" (provider = icu, locale = 'doi-IN');


ALTER COLLATION "pg_catalog"."doi-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."doi-IN-x-icu" IS 'Dogri (India)';



CREATE COLLATION "pg_catalog"."doi-x-icu" (provider = icu, locale = 'doi');


ALTER COLLATION "pg_catalog"."doi-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."doi-x-icu" IS 'Dogri';



CREATE COLLATION "pg_catalog"."dsb-DE-x-icu" (provider = icu, locale = 'dsb-DE');


ALTER COLLATION "pg_catalog"."dsb-DE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dsb-DE-x-icu" IS 'Lower Sorbian (Germany)';



CREATE COLLATION "pg_catalog"."dsb-x-icu" (provider = icu, locale = 'dsb');


ALTER COLLATION "pg_catalog"."dsb-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dsb-x-icu" IS 'Lower Sorbian';



CREATE COLLATION "pg_catalog"."dua-CM-x-icu" (provider = icu, locale = 'dua-CM');


ALTER COLLATION "pg_catalog"."dua-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dua-CM-x-icu" IS 'Duala (Cameroon)';



CREATE COLLATION "pg_catalog"."dua-x-icu" (provider = icu, locale = 'dua');


ALTER COLLATION "pg_catalog"."dua-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dua-x-icu" IS 'Duala';



CREATE COLLATION "pg_catalog"."dyo-SN-x-icu" (provider = icu, locale = 'dyo-SN');


ALTER COLLATION "pg_catalog"."dyo-SN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dyo-SN-x-icu" IS 'Jola-Fonyi (Senegal)';



CREATE COLLATION "pg_catalog"."dyo-x-icu" (provider = icu, locale = 'dyo');


ALTER COLLATION "pg_catalog"."dyo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dyo-x-icu" IS 'Jola-Fonyi';



CREATE COLLATION "pg_catalog"."dz-BT-x-icu" (provider = icu, locale = 'dz-BT');


ALTER COLLATION "pg_catalog"."dz-BT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dz-BT-x-icu" IS 'Dzongkha (Bhutan)';



CREATE COLLATION "pg_catalog"."dz-x-icu" (provider = icu, locale = 'dz');


ALTER COLLATION "pg_catalog"."dz-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."dz-x-icu" IS 'Dzongkha';



CREATE COLLATION "pg_catalog"."ebu-KE-x-icu" (provider = icu, locale = 'ebu-KE');


ALTER COLLATION "pg_catalog"."ebu-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ebu-KE-x-icu" IS 'Embu (Kenya)';



CREATE COLLATION "pg_catalog"."ebu-x-icu" (provider = icu, locale = 'ebu');


ALTER COLLATION "pg_catalog"."ebu-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ebu-x-icu" IS 'Embu';



CREATE COLLATION "pg_catalog"."ee-GH-x-icu" (provider = icu, locale = 'ee-GH');


ALTER COLLATION "pg_catalog"."ee-GH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ee-GH-x-icu" IS 'Ewe (Ghana)';



CREATE COLLATION "pg_catalog"."ee-TG-x-icu" (provider = icu, locale = 'ee-TG');


ALTER COLLATION "pg_catalog"."ee-TG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ee-TG-x-icu" IS 'Ewe (Togo)';



CREATE COLLATION "pg_catalog"."ee-x-icu" (provider = icu, locale = 'ee');


ALTER COLLATION "pg_catalog"."ee-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ee-x-icu" IS 'Ewe';



CREATE COLLATION "pg_catalog"."el-CY-x-icu" (provider = icu, locale = 'el-CY');


ALTER COLLATION "pg_catalog"."el-CY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."el-CY-x-icu" IS 'Greek (Cyprus)';



CREATE COLLATION "pg_catalog"."el-GR-x-icu" (provider = icu, locale = 'el-GR');


ALTER COLLATION "pg_catalog"."el-GR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."el-GR-x-icu" IS 'Greek (Greece)';



CREATE COLLATION "pg_catalog"."el-x-icu" (provider = icu, locale = 'el');


ALTER COLLATION "pg_catalog"."el-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."el-x-icu" IS 'Greek';



CREATE COLLATION "pg_catalog"."en-001-x-icu" (provider = icu, locale = 'en-001');


ALTER COLLATION "pg_catalog"."en-001-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-001-x-icu" IS 'English (world)';



CREATE COLLATION "pg_catalog"."en-150-x-icu" (provider = icu, locale = 'en-150');


ALTER COLLATION "pg_catalog"."en-150-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-150-x-icu" IS 'English (Europe)';



CREATE COLLATION "pg_catalog"."en-AE-x-icu" (provider = icu, locale = 'en-AE');


ALTER COLLATION "pg_catalog"."en-AE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-AE-x-icu" IS 'English (United Arab Emirates)';



CREATE COLLATION "pg_catalog"."en-AG-x-icu" (provider = icu, locale = 'en-AG');


ALTER COLLATION "pg_catalog"."en-AG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-AG-x-icu" IS 'English (Antigua & Barbuda)';



CREATE COLLATION "pg_catalog"."en-AI-x-icu" (provider = icu, locale = 'en-AI');


ALTER COLLATION "pg_catalog"."en-AI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-AI-x-icu" IS 'English (Anguilla)';



CREATE COLLATION "pg_catalog"."en-AS-x-icu" (provider = icu, locale = 'en-AS');


ALTER COLLATION "pg_catalog"."en-AS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-AS-x-icu" IS 'English (American Samoa)';



CREATE COLLATION "pg_catalog"."en-AT-x-icu" (provider = icu, locale = 'en-AT');


ALTER COLLATION "pg_catalog"."en-AT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-AT-x-icu" IS 'English (Austria)';



CREATE COLLATION "pg_catalog"."en-AU-x-icu" (provider = icu, locale = 'en-AU');


ALTER COLLATION "pg_catalog"."en-AU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-AU-x-icu" IS 'English (Australia)';



CREATE COLLATION "pg_catalog"."en-BB-x-icu" (provider = icu, locale = 'en-BB');


ALTER COLLATION "pg_catalog"."en-BB-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-BB-x-icu" IS 'English (Barbados)';



CREATE COLLATION "pg_catalog"."en-BE-x-icu" (provider = icu, locale = 'en-BE');


ALTER COLLATION "pg_catalog"."en-BE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-BE-x-icu" IS 'English (Belgium)';



CREATE COLLATION "pg_catalog"."en-BI-x-icu" (provider = icu, locale = 'en-BI');


ALTER COLLATION "pg_catalog"."en-BI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-BI-x-icu" IS 'English (Burundi)';



CREATE COLLATION "pg_catalog"."en-BM-x-icu" (provider = icu, locale = 'en-BM');


ALTER COLLATION "pg_catalog"."en-BM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-BM-x-icu" IS 'English (Bermuda)';



CREATE COLLATION "pg_catalog"."en-BS-x-icu" (provider = icu, locale = 'en-BS');


ALTER COLLATION "pg_catalog"."en-BS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-BS-x-icu" IS 'English (Bahamas)';



CREATE COLLATION "pg_catalog"."en-BW-x-icu" (provider = icu, locale = 'en-BW');


ALTER COLLATION "pg_catalog"."en-BW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-BW-x-icu" IS 'English (Botswana)';



CREATE COLLATION "pg_catalog"."en-BZ-x-icu" (provider = icu, locale = 'en-BZ');


ALTER COLLATION "pg_catalog"."en-BZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-BZ-x-icu" IS 'English (Belize)';



CREATE COLLATION "pg_catalog"."en-CA-x-icu" (provider = icu, locale = 'en-CA');


ALTER COLLATION "pg_catalog"."en-CA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-CA-x-icu" IS 'English (Canada)';



CREATE COLLATION "pg_catalog"."en-CC-x-icu" (provider = icu, locale = 'en-CC');


ALTER COLLATION "pg_catalog"."en-CC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-CC-x-icu" IS 'English (Cocos [Keeling] Islands)';



CREATE COLLATION "pg_catalog"."en-CH-x-icu" (provider = icu, locale = 'en-CH');


ALTER COLLATION "pg_catalog"."en-CH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-CH-x-icu" IS 'English (Switzerland)';



CREATE COLLATION "pg_catalog"."en-CK-x-icu" (provider = icu, locale = 'en-CK');


ALTER COLLATION "pg_catalog"."en-CK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-CK-x-icu" IS 'English (Cook Islands)';



CREATE COLLATION "pg_catalog"."en-CM-x-icu" (provider = icu, locale = 'en-CM');


ALTER COLLATION "pg_catalog"."en-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-CM-x-icu" IS 'English (Cameroon)';



CREATE COLLATION "pg_catalog"."en-CX-x-icu" (provider = icu, locale = 'en-CX');


ALTER COLLATION "pg_catalog"."en-CX-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-CX-x-icu" IS 'English (Christmas Island)';



CREATE COLLATION "pg_catalog"."en-CY-x-icu" (provider = icu, locale = 'en-CY');


ALTER COLLATION "pg_catalog"."en-CY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-CY-x-icu" IS 'English (Cyprus)';



CREATE COLLATION "pg_catalog"."en-DE-x-icu" (provider = icu, locale = 'en-DE');


ALTER COLLATION "pg_catalog"."en-DE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-DE-x-icu" IS 'English (Germany)';



CREATE COLLATION "pg_catalog"."en-DG-x-icu" (provider = icu, locale = 'en-DG');


ALTER COLLATION "pg_catalog"."en-DG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-DG-x-icu" IS 'English (Diego Garcia)';



CREATE COLLATION "pg_catalog"."en-DK-x-icu" (provider = icu, locale = 'en-DK');


ALTER COLLATION "pg_catalog"."en-DK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-DK-x-icu" IS 'English (Denmark)';



CREATE COLLATION "pg_catalog"."en-DM-x-icu" (provider = icu, locale = 'en-DM');


ALTER COLLATION "pg_catalog"."en-DM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-DM-x-icu" IS 'English (Dominica)';



CREATE COLLATION "pg_catalog"."en-ER-x-icu" (provider = icu, locale = 'en-ER');


ALTER COLLATION "pg_catalog"."en-ER-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-ER-x-icu" IS 'English (Eritrea)';



CREATE COLLATION "pg_catalog"."en-FI-x-icu" (provider = icu, locale = 'en-FI');


ALTER COLLATION "pg_catalog"."en-FI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-FI-x-icu" IS 'English (Finland)';



CREATE COLLATION "pg_catalog"."en-FJ-x-icu" (provider = icu, locale = 'en-FJ');


ALTER COLLATION "pg_catalog"."en-FJ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-FJ-x-icu" IS 'English (Fiji)';



CREATE COLLATION "pg_catalog"."en-FK-x-icu" (provider = icu, locale = 'en-FK');


ALTER COLLATION "pg_catalog"."en-FK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-FK-x-icu" IS 'English (Falkland Islands)';



CREATE COLLATION "pg_catalog"."en-FM-x-icu" (provider = icu, locale = 'en-FM');


ALTER COLLATION "pg_catalog"."en-FM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-FM-x-icu" IS 'English (Micronesia)';



CREATE COLLATION "pg_catalog"."en-GB-x-icu" (provider = icu, locale = 'en-GB');


ALTER COLLATION "pg_catalog"."en-GB-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-GB-x-icu" IS 'English (United Kingdom)';



CREATE COLLATION "pg_catalog"."en-GD-x-icu" (provider = icu, locale = 'en-GD');


ALTER COLLATION "pg_catalog"."en-GD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-GD-x-icu" IS 'English (Grenada)';



CREATE COLLATION "pg_catalog"."en-GG-x-icu" (provider = icu, locale = 'en-GG');


ALTER COLLATION "pg_catalog"."en-GG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-GG-x-icu" IS 'English (Guernsey)';



CREATE COLLATION "pg_catalog"."en-GH-x-icu" (provider = icu, locale = 'en-GH');


ALTER COLLATION "pg_catalog"."en-GH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-GH-x-icu" IS 'English (Ghana)';



CREATE COLLATION "pg_catalog"."en-GI-x-icu" (provider = icu, locale = 'en-GI');


ALTER COLLATION "pg_catalog"."en-GI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-GI-x-icu" IS 'English (Gibraltar)';



CREATE COLLATION "pg_catalog"."en-GM-x-icu" (provider = icu, locale = 'en-GM');


ALTER COLLATION "pg_catalog"."en-GM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-GM-x-icu" IS 'English (Gambia)';



CREATE COLLATION "pg_catalog"."en-GU-x-icu" (provider = icu, locale = 'en-GU');


ALTER COLLATION "pg_catalog"."en-GU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-GU-x-icu" IS 'English (Guam)';



CREATE COLLATION "pg_catalog"."en-GY-x-icu" (provider = icu, locale = 'en-GY');


ALTER COLLATION "pg_catalog"."en-GY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-GY-x-icu" IS 'English (Guyana)';



CREATE COLLATION "pg_catalog"."en-HK-x-icu" (provider = icu, locale = 'en-HK');


ALTER COLLATION "pg_catalog"."en-HK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-HK-x-icu" IS 'English (Hong Kong SAR China)';



CREATE COLLATION "pg_catalog"."en-IE-x-icu" (provider = icu, locale = 'en-IE');


ALTER COLLATION "pg_catalog"."en-IE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-IE-x-icu" IS 'English (Ireland)';



CREATE COLLATION "pg_catalog"."en-IL-x-icu" (provider = icu, locale = 'en-IL');


ALTER COLLATION "pg_catalog"."en-IL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-IL-x-icu" IS 'English (Israel)';



CREATE COLLATION "pg_catalog"."en-IM-x-icu" (provider = icu, locale = 'en-IM');


ALTER COLLATION "pg_catalog"."en-IM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-IM-x-icu" IS 'English (Isle of Man)';



CREATE COLLATION "pg_catalog"."en-IN-x-icu" (provider = icu, locale = 'en-IN');


ALTER COLLATION "pg_catalog"."en-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-IN-x-icu" IS 'English (India)';



CREATE COLLATION "pg_catalog"."en-IO-x-icu" (provider = icu, locale = 'en-IO');


ALTER COLLATION "pg_catalog"."en-IO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-IO-x-icu" IS 'English (British Indian Ocean Territory)';



CREATE COLLATION "pg_catalog"."en-JE-x-icu" (provider = icu, locale = 'en-JE');


ALTER COLLATION "pg_catalog"."en-JE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-JE-x-icu" IS 'English (Jersey)';



CREATE COLLATION "pg_catalog"."en-JM-x-icu" (provider = icu, locale = 'en-JM');


ALTER COLLATION "pg_catalog"."en-JM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-JM-x-icu" IS 'English (Jamaica)';



CREATE COLLATION "pg_catalog"."en-KE-x-icu" (provider = icu, locale = 'en-KE');


ALTER COLLATION "pg_catalog"."en-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-KE-x-icu" IS 'English (Kenya)';



CREATE COLLATION "pg_catalog"."en-KI-x-icu" (provider = icu, locale = 'en-KI');


ALTER COLLATION "pg_catalog"."en-KI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-KI-x-icu" IS 'English (Kiribati)';



CREATE COLLATION "pg_catalog"."en-KN-x-icu" (provider = icu, locale = 'en-KN');


ALTER COLLATION "pg_catalog"."en-KN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-KN-x-icu" IS 'English (St. Kitts & Nevis)';



CREATE COLLATION "pg_catalog"."en-KY-x-icu" (provider = icu, locale = 'en-KY');


ALTER COLLATION "pg_catalog"."en-KY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-KY-x-icu" IS 'English (Cayman Islands)';



CREATE COLLATION "pg_catalog"."en-LC-x-icu" (provider = icu, locale = 'en-LC');


ALTER COLLATION "pg_catalog"."en-LC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-LC-x-icu" IS 'English (St. Lucia)';



CREATE COLLATION "pg_catalog"."en-LR-x-icu" (provider = icu, locale = 'en-LR');


ALTER COLLATION "pg_catalog"."en-LR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-LR-x-icu" IS 'English (Liberia)';



CREATE COLLATION "pg_catalog"."en-LS-x-icu" (provider = icu, locale = 'en-LS');


ALTER COLLATION "pg_catalog"."en-LS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-LS-x-icu" IS 'English (Lesotho)';



CREATE COLLATION "pg_catalog"."en-MG-x-icu" (provider = icu, locale = 'en-MG');


ALTER COLLATION "pg_catalog"."en-MG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MG-x-icu" IS 'English (Madagascar)';



CREATE COLLATION "pg_catalog"."en-MH-x-icu" (provider = icu, locale = 'en-MH');


ALTER COLLATION "pg_catalog"."en-MH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MH-x-icu" IS 'English (Marshall Islands)';



CREATE COLLATION "pg_catalog"."en-MO-x-icu" (provider = icu, locale = 'en-MO');


ALTER COLLATION "pg_catalog"."en-MO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MO-x-icu" IS 'English (Macao SAR China)';



CREATE COLLATION "pg_catalog"."en-MP-x-icu" (provider = icu, locale = 'en-MP');


ALTER COLLATION "pg_catalog"."en-MP-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MP-x-icu" IS 'English (Northern Mariana Islands)';



CREATE COLLATION "pg_catalog"."en-MS-x-icu" (provider = icu, locale = 'en-MS');


ALTER COLLATION "pg_catalog"."en-MS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MS-x-icu" IS 'English (Montserrat)';



CREATE COLLATION "pg_catalog"."en-MT-x-icu" (provider = icu, locale = 'en-MT');


ALTER COLLATION "pg_catalog"."en-MT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MT-x-icu" IS 'English (Malta)';



CREATE COLLATION "pg_catalog"."en-MU-x-icu" (provider = icu, locale = 'en-MU');


ALTER COLLATION "pg_catalog"."en-MU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MU-x-icu" IS 'English (Mauritius)';



CREATE COLLATION "pg_catalog"."en-MV-x-icu" (provider = icu, locale = 'en-MV');


ALTER COLLATION "pg_catalog"."en-MV-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MV-x-icu" IS 'English (Maldives)';



CREATE COLLATION "pg_catalog"."en-MW-x-icu" (provider = icu, locale = 'en-MW');


ALTER COLLATION "pg_catalog"."en-MW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MW-x-icu" IS 'English (Malawi)';



CREATE COLLATION "pg_catalog"."en-MY-x-icu" (provider = icu, locale = 'en-MY');


ALTER COLLATION "pg_catalog"."en-MY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-MY-x-icu" IS 'English (Malaysia)';



CREATE COLLATION "pg_catalog"."en-NA-x-icu" (provider = icu, locale = 'en-NA');


ALTER COLLATION "pg_catalog"."en-NA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-NA-x-icu" IS 'English (Namibia)';



CREATE COLLATION "pg_catalog"."en-NF-x-icu" (provider = icu, locale = 'en-NF');


ALTER COLLATION "pg_catalog"."en-NF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-NF-x-icu" IS 'English (Norfolk Island)';



CREATE COLLATION "pg_catalog"."en-NG-x-icu" (provider = icu, locale = 'en-NG');


ALTER COLLATION "pg_catalog"."en-NG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-NG-x-icu" IS 'English (Nigeria)';



CREATE COLLATION "pg_catalog"."en-NL-x-icu" (provider = icu, locale = 'en-NL');


ALTER COLLATION "pg_catalog"."en-NL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-NL-x-icu" IS 'English (Netherlands)';



CREATE COLLATION "pg_catalog"."en-NR-x-icu" (provider = icu, locale = 'en-NR');


ALTER COLLATION "pg_catalog"."en-NR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-NR-x-icu" IS 'English (Nauru)';



CREATE COLLATION "pg_catalog"."en-NU-x-icu" (provider = icu, locale = 'en-NU');


ALTER COLLATION "pg_catalog"."en-NU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-NU-x-icu" IS 'English (Niue)';



CREATE COLLATION "pg_catalog"."en-NZ-x-icu" (provider = icu, locale = 'en-NZ');


ALTER COLLATION "pg_catalog"."en-NZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-NZ-x-icu" IS 'English (New Zealand)';



CREATE COLLATION "pg_catalog"."en-PG-x-icu" (provider = icu, locale = 'en-PG');


ALTER COLLATION "pg_catalog"."en-PG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-PG-x-icu" IS 'English (Papua New Guinea)';



CREATE COLLATION "pg_catalog"."en-PH-x-icu" (provider = icu, locale = 'en-PH');


ALTER COLLATION "pg_catalog"."en-PH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-PH-x-icu" IS 'English (Philippines)';



CREATE COLLATION "pg_catalog"."en-PK-x-icu" (provider = icu, locale = 'en-PK');


ALTER COLLATION "pg_catalog"."en-PK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-PK-x-icu" IS 'English (Pakistan)';



CREATE COLLATION "pg_catalog"."en-PN-x-icu" (provider = icu, locale = 'en-PN');


ALTER COLLATION "pg_catalog"."en-PN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-PN-x-icu" IS 'English (Pitcairn Islands)';



CREATE COLLATION "pg_catalog"."en-PR-x-icu" (provider = icu, locale = 'en-PR');


ALTER COLLATION "pg_catalog"."en-PR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-PR-x-icu" IS 'English (Puerto Rico)';



CREATE COLLATION "pg_catalog"."en-PW-x-icu" (provider = icu, locale = 'en-PW');


ALTER COLLATION "pg_catalog"."en-PW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-PW-x-icu" IS 'English (Palau)';



CREATE COLLATION "pg_catalog"."en-RW-x-icu" (provider = icu, locale = 'en-RW');


ALTER COLLATION "pg_catalog"."en-RW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-RW-x-icu" IS 'English (Rwanda)';



CREATE COLLATION "pg_catalog"."en-SB-x-icu" (provider = icu, locale = 'en-SB');


ALTER COLLATION "pg_catalog"."en-SB-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SB-x-icu" IS 'English (Solomon Islands)';



CREATE COLLATION "pg_catalog"."en-SC-x-icu" (provider = icu, locale = 'en-SC');


ALTER COLLATION "pg_catalog"."en-SC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SC-x-icu" IS 'English (Seychelles)';



CREATE COLLATION "pg_catalog"."en-SD-x-icu" (provider = icu, locale = 'en-SD');


ALTER COLLATION "pg_catalog"."en-SD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SD-x-icu" IS 'English (Sudan)';



CREATE COLLATION "pg_catalog"."en-SE-x-icu" (provider = icu, locale = 'en-SE');


ALTER COLLATION "pg_catalog"."en-SE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SE-x-icu" IS 'English (Sweden)';



CREATE COLLATION "pg_catalog"."en-SG-x-icu" (provider = icu, locale = 'en-SG');


ALTER COLLATION "pg_catalog"."en-SG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SG-x-icu" IS 'English (Singapore)';



CREATE COLLATION "pg_catalog"."en-SH-x-icu" (provider = icu, locale = 'en-SH');


ALTER COLLATION "pg_catalog"."en-SH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SH-x-icu" IS 'English (St. Helena)';



CREATE COLLATION "pg_catalog"."en-SI-x-icu" (provider = icu, locale = 'en-SI');


ALTER COLLATION "pg_catalog"."en-SI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SI-x-icu" IS 'English (Slovenia)';



CREATE COLLATION "pg_catalog"."en-SL-x-icu" (provider = icu, locale = 'en-SL');


ALTER COLLATION "pg_catalog"."en-SL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SL-x-icu" IS 'English (Sierra Leone)';



CREATE COLLATION "pg_catalog"."en-SS-x-icu" (provider = icu, locale = 'en-SS');


ALTER COLLATION "pg_catalog"."en-SS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SS-x-icu" IS 'English (South Sudan)';



CREATE COLLATION "pg_catalog"."en-SX-x-icu" (provider = icu, locale = 'en-SX');


ALTER COLLATION "pg_catalog"."en-SX-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SX-x-icu" IS 'English (Sint Maarten)';



CREATE COLLATION "pg_catalog"."en-SZ-x-icu" (provider = icu, locale = 'en-SZ');


ALTER COLLATION "pg_catalog"."en-SZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-SZ-x-icu" IS 'English (Eswatini)';



CREATE COLLATION "pg_catalog"."en-TC-x-icu" (provider = icu, locale = 'en-TC');


ALTER COLLATION "pg_catalog"."en-TC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-TC-x-icu" IS 'English (Turks & Caicos Islands)';



CREATE COLLATION "pg_catalog"."en-TK-x-icu" (provider = icu, locale = 'en-TK');


ALTER COLLATION "pg_catalog"."en-TK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-TK-x-icu" IS 'English (Tokelau)';



CREATE COLLATION "pg_catalog"."en-TO-x-icu" (provider = icu, locale = 'en-TO');


ALTER COLLATION "pg_catalog"."en-TO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-TO-x-icu" IS 'English (Tonga)';



CREATE COLLATION "pg_catalog"."en-TT-x-icu" (provider = icu, locale = 'en-TT');


ALTER COLLATION "pg_catalog"."en-TT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-TT-x-icu" IS 'English (Trinidad & Tobago)';



CREATE COLLATION "pg_catalog"."en-TV-x-icu" (provider = icu, locale = 'en-TV');


ALTER COLLATION "pg_catalog"."en-TV-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-TV-x-icu" IS 'English (Tuvalu)';



CREATE COLLATION "pg_catalog"."en-TZ-x-icu" (provider = icu, locale = 'en-TZ');


ALTER COLLATION "pg_catalog"."en-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-TZ-x-icu" IS 'English (Tanzania)';



CREATE COLLATION "pg_catalog"."en-UG-x-icu" (provider = icu, locale = 'en-UG');


ALTER COLLATION "pg_catalog"."en-UG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-UG-x-icu" IS 'English (Uganda)';



CREATE COLLATION "pg_catalog"."en-UM-x-icu" (provider = icu, locale = 'en-UM');


ALTER COLLATION "pg_catalog"."en-UM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-UM-x-icu" IS 'English (U.S. Outlying Islands)';



CREATE COLLATION "pg_catalog"."en-US-u-va-posix-x-icu" (provider = icu, locale = 'en-US-u-va-posix');


ALTER COLLATION "pg_catalog"."en-US-u-va-posix-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-US-u-va-posix-x-icu" IS 'English (United States, Computer)';



CREATE COLLATION "pg_catalog"."en-US-x-icu" (provider = icu, locale = 'en-US');


ALTER COLLATION "pg_catalog"."en-US-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-US-x-icu" IS 'English (United States)';



CREATE COLLATION "pg_catalog"."en-VC-x-icu" (provider = icu, locale = 'en-VC');


ALTER COLLATION "pg_catalog"."en-VC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-VC-x-icu" IS 'English (St. Vincent & Grenadines)';



CREATE COLLATION "pg_catalog"."en-VG-x-icu" (provider = icu, locale = 'en-VG');


ALTER COLLATION "pg_catalog"."en-VG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-VG-x-icu" IS 'English (British Virgin Islands)';



CREATE COLLATION "pg_catalog"."en-VI-x-icu" (provider = icu, locale = 'en-VI');


ALTER COLLATION "pg_catalog"."en-VI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-VI-x-icu" IS 'English (U.S. Virgin Islands)';



CREATE COLLATION "pg_catalog"."en-VU-x-icu" (provider = icu, locale = 'en-VU');


ALTER COLLATION "pg_catalog"."en-VU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-VU-x-icu" IS 'English (Vanuatu)';



CREATE COLLATION "pg_catalog"."en-WS-x-icu" (provider = icu, locale = 'en-WS');


ALTER COLLATION "pg_catalog"."en-WS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-WS-x-icu" IS 'English (Samoa)';



CREATE COLLATION "pg_catalog"."en-ZA-x-icu" (provider = icu, locale = 'en-ZA');


ALTER COLLATION "pg_catalog"."en-ZA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-ZA-x-icu" IS 'English (South Africa)';



CREATE COLLATION "pg_catalog"."en-ZM-x-icu" (provider = icu, locale = 'en-ZM');


ALTER COLLATION "pg_catalog"."en-ZM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-ZM-x-icu" IS 'English (Zambia)';



CREATE COLLATION "pg_catalog"."en-ZW-x-icu" (provider = icu, locale = 'en-ZW');


ALTER COLLATION "pg_catalog"."en-ZW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-ZW-x-icu" IS 'English (Zimbabwe)';



CREATE COLLATION "pg_catalog"."en-x-icu" (provider = icu, locale = 'en');


ALTER COLLATION "pg_catalog"."en-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."en-x-icu" IS 'English';



CREATE COLLATION "pg_catalog"."en_US" (provider = libc, locale = 'en_US.utf8');


ALTER COLLATION "pg_catalog"."en_US" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."en_US.utf8" (provider = libc, locale = 'en_US.utf8');


ALTER COLLATION "pg_catalog"."en_US.utf8" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."eo-001-x-icu" (provider = icu, locale = 'eo-001');


ALTER COLLATION "pg_catalog"."eo-001-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."eo-001-x-icu" IS 'Esperanto (world)';



CREATE COLLATION "pg_catalog"."eo-x-icu" (provider = icu, locale = 'eo');


ALTER COLLATION "pg_catalog"."eo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."eo-x-icu" IS 'Esperanto';



CREATE COLLATION "pg_catalog"."es-419-x-icu" (provider = icu, locale = 'es-419');


ALTER COLLATION "pg_catalog"."es-419-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-419-x-icu" IS 'Spanish (Latin America)';



CREATE COLLATION "pg_catalog"."es-AR-x-icu" (provider = icu, locale = 'es-AR');


ALTER COLLATION "pg_catalog"."es-AR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-AR-x-icu" IS 'Spanish (Argentina)';



CREATE COLLATION "pg_catalog"."es-BO-x-icu" (provider = icu, locale = 'es-BO');


ALTER COLLATION "pg_catalog"."es-BO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-BO-x-icu" IS 'Spanish (Bolivia)';



CREATE COLLATION "pg_catalog"."es-BR-x-icu" (provider = icu, locale = 'es-BR');


ALTER COLLATION "pg_catalog"."es-BR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-BR-x-icu" IS 'Spanish (Brazil)';



CREATE COLLATION "pg_catalog"."es-BZ-x-icu" (provider = icu, locale = 'es-BZ');


ALTER COLLATION "pg_catalog"."es-BZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-BZ-x-icu" IS 'Spanish (Belize)';



CREATE COLLATION "pg_catalog"."es-CL-x-icu" (provider = icu, locale = 'es-CL');


ALTER COLLATION "pg_catalog"."es-CL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-CL-x-icu" IS 'Spanish (Chile)';



CREATE COLLATION "pg_catalog"."es-CO-x-icu" (provider = icu, locale = 'es-CO');


ALTER COLLATION "pg_catalog"."es-CO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-CO-x-icu" IS 'Spanish (Colombia)';



CREATE COLLATION "pg_catalog"."es-CR-x-icu" (provider = icu, locale = 'es-CR');


ALTER COLLATION "pg_catalog"."es-CR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-CR-x-icu" IS 'Spanish (Costa Rica)';



CREATE COLLATION "pg_catalog"."es-CU-x-icu" (provider = icu, locale = 'es-CU');


ALTER COLLATION "pg_catalog"."es-CU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-CU-x-icu" IS 'Spanish (Cuba)';



CREATE COLLATION "pg_catalog"."es-DO-x-icu" (provider = icu, locale = 'es-DO');


ALTER COLLATION "pg_catalog"."es-DO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-DO-x-icu" IS 'Spanish (Dominican Republic)';



CREATE COLLATION "pg_catalog"."es-EA-x-icu" (provider = icu, locale = 'es-EA');


ALTER COLLATION "pg_catalog"."es-EA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-EA-x-icu" IS 'Spanish (Ceuta & Melilla)';



CREATE COLLATION "pg_catalog"."es-EC-x-icu" (provider = icu, locale = 'es-EC');


ALTER COLLATION "pg_catalog"."es-EC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-EC-x-icu" IS 'Spanish (Ecuador)';



CREATE COLLATION "pg_catalog"."es-ES-x-icu" (provider = icu, locale = 'es-ES');


ALTER COLLATION "pg_catalog"."es-ES-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-ES-x-icu" IS 'Spanish (Spain)';



CREATE COLLATION "pg_catalog"."es-GQ-x-icu" (provider = icu, locale = 'es-GQ');


ALTER COLLATION "pg_catalog"."es-GQ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-GQ-x-icu" IS 'Spanish (Equatorial Guinea)';



CREATE COLLATION "pg_catalog"."es-GT-x-icu" (provider = icu, locale = 'es-GT');


ALTER COLLATION "pg_catalog"."es-GT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-GT-x-icu" IS 'Spanish (Guatemala)';



CREATE COLLATION "pg_catalog"."es-HN-x-icu" (provider = icu, locale = 'es-HN');


ALTER COLLATION "pg_catalog"."es-HN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-HN-x-icu" IS 'Spanish (Honduras)';



CREATE COLLATION "pg_catalog"."es-IC-x-icu" (provider = icu, locale = 'es-IC');


ALTER COLLATION "pg_catalog"."es-IC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-IC-x-icu" IS 'Spanish (Canary Islands)';



CREATE COLLATION "pg_catalog"."es-MX-x-icu" (provider = icu, locale = 'es-MX');


ALTER COLLATION "pg_catalog"."es-MX-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-MX-x-icu" IS 'Spanish (Mexico)';



CREATE COLLATION "pg_catalog"."es-NI-x-icu" (provider = icu, locale = 'es-NI');


ALTER COLLATION "pg_catalog"."es-NI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-NI-x-icu" IS 'Spanish (Nicaragua)';



CREATE COLLATION "pg_catalog"."es-PA-x-icu" (provider = icu, locale = 'es-PA');


ALTER COLLATION "pg_catalog"."es-PA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-PA-x-icu" IS 'Spanish (Panama)';



CREATE COLLATION "pg_catalog"."es-PE-x-icu" (provider = icu, locale = 'es-PE');


ALTER COLLATION "pg_catalog"."es-PE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-PE-x-icu" IS 'Spanish (Peru)';



CREATE COLLATION "pg_catalog"."es-PH-x-icu" (provider = icu, locale = 'es-PH');


ALTER COLLATION "pg_catalog"."es-PH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-PH-x-icu" IS 'Spanish (Philippines)';



CREATE COLLATION "pg_catalog"."es-PR-x-icu" (provider = icu, locale = 'es-PR');


ALTER COLLATION "pg_catalog"."es-PR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-PR-x-icu" IS 'Spanish (Puerto Rico)';



CREATE COLLATION "pg_catalog"."es-PY-x-icu" (provider = icu, locale = 'es-PY');


ALTER COLLATION "pg_catalog"."es-PY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-PY-x-icu" IS 'Spanish (Paraguay)';



CREATE COLLATION "pg_catalog"."es-SV-x-icu" (provider = icu, locale = 'es-SV');


ALTER COLLATION "pg_catalog"."es-SV-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-SV-x-icu" IS 'Spanish (El Salvador)';



CREATE COLLATION "pg_catalog"."es-US-x-icu" (provider = icu, locale = 'es-US');


ALTER COLLATION "pg_catalog"."es-US-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-US-x-icu" IS 'Spanish (United States)';



CREATE COLLATION "pg_catalog"."es-UY-x-icu" (provider = icu, locale = 'es-UY');


ALTER COLLATION "pg_catalog"."es-UY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-UY-x-icu" IS 'Spanish (Uruguay)';



CREATE COLLATION "pg_catalog"."es-VE-x-icu" (provider = icu, locale = 'es-VE');


ALTER COLLATION "pg_catalog"."es-VE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-VE-x-icu" IS 'Spanish (Venezuela)';



CREATE COLLATION "pg_catalog"."es-x-icu" (provider = icu, locale = 'es');


ALTER COLLATION "pg_catalog"."es-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."es-x-icu" IS 'Spanish';



CREATE COLLATION "pg_catalog"."et-EE-x-icu" (provider = icu, locale = 'et-EE');


ALTER COLLATION "pg_catalog"."et-EE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."et-EE-x-icu" IS 'Estonian (Estonia)';



CREATE COLLATION "pg_catalog"."et-x-icu" (provider = icu, locale = 'et');


ALTER COLLATION "pg_catalog"."et-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."et-x-icu" IS 'Estonian';



CREATE COLLATION "pg_catalog"."eu-ES-x-icu" (provider = icu, locale = 'eu-ES');


ALTER COLLATION "pg_catalog"."eu-ES-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."eu-ES-x-icu" IS 'Basque (Spain)';



CREATE COLLATION "pg_catalog"."eu-x-icu" (provider = icu, locale = 'eu');


ALTER COLLATION "pg_catalog"."eu-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."eu-x-icu" IS 'Basque';



CREATE COLLATION "pg_catalog"."ewo-CM-x-icu" (provider = icu, locale = 'ewo-CM');


ALTER COLLATION "pg_catalog"."ewo-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ewo-CM-x-icu" IS 'Ewondo (Cameroon)';



CREATE COLLATION "pg_catalog"."ewo-x-icu" (provider = icu, locale = 'ewo');


ALTER COLLATION "pg_catalog"."ewo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ewo-x-icu" IS 'Ewondo';



CREATE COLLATION "pg_catalog"."fa-AF-x-icu" (provider = icu, locale = 'fa-AF');


ALTER COLLATION "pg_catalog"."fa-AF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fa-AF-x-icu" IS 'Persian (Afghanistan)';



CREATE COLLATION "pg_catalog"."fa-IR-x-icu" (provider = icu, locale = 'fa-IR');


ALTER COLLATION "pg_catalog"."fa-IR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fa-IR-x-icu" IS 'Persian (Iran)';



CREATE COLLATION "pg_catalog"."fa-x-icu" (provider = icu, locale = 'fa');


ALTER COLLATION "pg_catalog"."fa-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fa-x-icu" IS 'Persian';



CREATE COLLATION "pg_catalog"."ff-Adlm-BF-x-icu" (provider = icu, locale = 'ff-Adlm-BF');


ALTER COLLATION "pg_catalog"."ff-Adlm-BF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-BF-x-icu" IS 'Fula (Adlam, Burkina Faso)';



CREATE COLLATION "pg_catalog"."ff-Adlm-CM-x-icu" (provider = icu, locale = 'ff-Adlm-CM');


ALTER COLLATION "pg_catalog"."ff-Adlm-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-CM-x-icu" IS 'Fula (Adlam, Cameroon)';



CREATE COLLATION "pg_catalog"."ff-Adlm-GH-x-icu" (provider = icu, locale = 'ff-Adlm-GH');


ALTER COLLATION "pg_catalog"."ff-Adlm-GH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-GH-x-icu" IS 'Fula (Adlam, Ghana)';



CREATE COLLATION "pg_catalog"."ff-Adlm-GM-x-icu" (provider = icu, locale = 'ff-Adlm-GM');


ALTER COLLATION "pg_catalog"."ff-Adlm-GM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-GM-x-icu" IS 'Fula (Adlam, Gambia)';



CREATE COLLATION "pg_catalog"."ff-Adlm-GN-x-icu" (provider = icu, locale = 'ff-Adlm-GN');


ALTER COLLATION "pg_catalog"."ff-Adlm-GN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-GN-x-icu" IS 'Fula (Adlam, Guinea)';



CREATE COLLATION "pg_catalog"."ff-Adlm-GW-x-icu" (provider = icu, locale = 'ff-Adlm-GW');


ALTER COLLATION "pg_catalog"."ff-Adlm-GW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-GW-x-icu" IS 'Fula (Adlam, Guinea-Bissau)';



CREATE COLLATION "pg_catalog"."ff-Adlm-LR-x-icu" (provider = icu, locale = 'ff-Adlm-LR');


ALTER COLLATION "pg_catalog"."ff-Adlm-LR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-LR-x-icu" IS 'Fula (Adlam, Liberia)';



CREATE COLLATION "pg_catalog"."ff-Adlm-MR-x-icu" (provider = icu, locale = 'ff-Adlm-MR');


ALTER COLLATION "pg_catalog"."ff-Adlm-MR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-MR-x-icu" IS 'Fula (Adlam, Mauritania)';



CREATE COLLATION "pg_catalog"."ff-Adlm-NE-x-icu" (provider = icu, locale = 'ff-Adlm-NE');


ALTER COLLATION "pg_catalog"."ff-Adlm-NE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-NE-x-icu" IS 'Fula (Adlam, Niger)';



CREATE COLLATION "pg_catalog"."ff-Adlm-NG-x-icu" (provider = icu, locale = 'ff-Adlm-NG');


ALTER COLLATION "pg_catalog"."ff-Adlm-NG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-NG-x-icu" IS 'Fula (Adlam, Nigeria)';



CREATE COLLATION "pg_catalog"."ff-Adlm-SL-x-icu" (provider = icu, locale = 'ff-Adlm-SL');


ALTER COLLATION "pg_catalog"."ff-Adlm-SL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-SL-x-icu" IS 'Fula (Adlam, Sierra Leone)';



CREATE COLLATION "pg_catalog"."ff-Adlm-SN-x-icu" (provider = icu, locale = 'ff-Adlm-SN');


ALTER COLLATION "pg_catalog"."ff-Adlm-SN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-SN-x-icu" IS 'Fula (Adlam, Senegal)';



CREATE COLLATION "pg_catalog"."ff-Adlm-x-icu" (provider = icu, locale = 'ff-Adlm');


ALTER COLLATION "pg_catalog"."ff-Adlm-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Adlm-x-icu" IS 'Fula (Adlam)';



CREATE COLLATION "pg_catalog"."ff-Latn-BF-x-icu" (provider = icu, locale = 'ff-Latn-BF');


ALTER COLLATION "pg_catalog"."ff-Latn-BF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-BF-x-icu" IS 'Fula (Latin, Burkina Faso)';



CREATE COLLATION "pg_catalog"."ff-Latn-CM-x-icu" (provider = icu, locale = 'ff-Latn-CM');


ALTER COLLATION "pg_catalog"."ff-Latn-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-CM-x-icu" IS 'Fula (Latin, Cameroon)';



CREATE COLLATION "pg_catalog"."ff-Latn-GH-x-icu" (provider = icu, locale = 'ff-Latn-GH');


ALTER COLLATION "pg_catalog"."ff-Latn-GH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-GH-x-icu" IS 'Fula (Latin, Ghana)';



CREATE COLLATION "pg_catalog"."ff-Latn-GM-x-icu" (provider = icu, locale = 'ff-Latn-GM');


ALTER COLLATION "pg_catalog"."ff-Latn-GM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-GM-x-icu" IS 'Fula (Latin, Gambia)';



CREATE COLLATION "pg_catalog"."ff-Latn-GN-x-icu" (provider = icu, locale = 'ff-Latn-GN');


ALTER COLLATION "pg_catalog"."ff-Latn-GN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-GN-x-icu" IS 'Fula (Latin, Guinea)';



CREATE COLLATION "pg_catalog"."ff-Latn-GW-x-icu" (provider = icu, locale = 'ff-Latn-GW');


ALTER COLLATION "pg_catalog"."ff-Latn-GW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-GW-x-icu" IS 'Fula (Latin, Guinea-Bissau)';



CREATE COLLATION "pg_catalog"."ff-Latn-LR-x-icu" (provider = icu, locale = 'ff-Latn-LR');


ALTER COLLATION "pg_catalog"."ff-Latn-LR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-LR-x-icu" IS 'Fula (Latin, Liberia)';



CREATE COLLATION "pg_catalog"."ff-Latn-MR-x-icu" (provider = icu, locale = 'ff-Latn-MR');


ALTER COLLATION "pg_catalog"."ff-Latn-MR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-MR-x-icu" IS 'Fula (Latin, Mauritania)';



CREATE COLLATION "pg_catalog"."ff-Latn-NE-x-icu" (provider = icu, locale = 'ff-Latn-NE');


ALTER COLLATION "pg_catalog"."ff-Latn-NE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-NE-x-icu" IS 'Fula (Latin, Niger)';



CREATE COLLATION "pg_catalog"."ff-Latn-NG-x-icu" (provider = icu, locale = 'ff-Latn-NG');


ALTER COLLATION "pg_catalog"."ff-Latn-NG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-NG-x-icu" IS 'Fula (Latin, Nigeria)';



CREATE COLLATION "pg_catalog"."ff-Latn-SL-x-icu" (provider = icu, locale = 'ff-Latn-SL');


ALTER COLLATION "pg_catalog"."ff-Latn-SL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-SL-x-icu" IS 'Fula (Latin, Sierra Leone)';



CREATE COLLATION "pg_catalog"."ff-Latn-SN-x-icu" (provider = icu, locale = 'ff-Latn-SN');


ALTER COLLATION "pg_catalog"."ff-Latn-SN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-SN-x-icu" IS 'Fula (Latin, Senegal)';



CREATE COLLATION "pg_catalog"."ff-Latn-x-icu" (provider = icu, locale = 'ff-Latn');


ALTER COLLATION "pg_catalog"."ff-Latn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-Latn-x-icu" IS 'Fula (Latin)';



CREATE COLLATION "pg_catalog"."ff-x-icu" (provider = icu, locale = 'ff');


ALTER COLLATION "pg_catalog"."ff-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ff-x-icu" IS 'Fula';



CREATE COLLATION "pg_catalog"."fi-FI-x-icu" (provider = icu, locale = 'fi-FI');


ALTER COLLATION "pg_catalog"."fi-FI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fi-FI-x-icu" IS 'Finnish (Finland)';



CREATE COLLATION "pg_catalog"."fi-x-icu" (provider = icu, locale = 'fi');


ALTER COLLATION "pg_catalog"."fi-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fi-x-icu" IS 'Finnish';



CREATE COLLATION "pg_catalog"."fil-PH-x-icu" (provider = icu, locale = 'fil-PH');


ALTER COLLATION "pg_catalog"."fil-PH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fil-PH-x-icu" IS 'Filipino (Philippines)';



CREATE COLLATION "pg_catalog"."fil-x-icu" (provider = icu, locale = 'fil');


ALTER COLLATION "pg_catalog"."fil-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fil-x-icu" IS 'Filipino';



CREATE COLLATION "pg_catalog"."fo-DK-x-icu" (provider = icu, locale = 'fo-DK');


ALTER COLLATION "pg_catalog"."fo-DK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fo-DK-x-icu" IS 'Faroese (Denmark)';



CREATE COLLATION "pg_catalog"."fo-FO-x-icu" (provider = icu, locale = 'fo-FO');


ALTER COLLATION "pg_catalog"."fo-FO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fo-FO-x-icu" IS 'Faroese (Faroe Islands)';



CREATE COLLATION "pg_catalog"."fo-x-icu" (provider = icu, locale = 'fo');


ALTER COLLATION "pg_catalog"."fo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fo-x-icu" IS 'Faroese';



CREATE COLLATION "pg_catalog"."fr-BE-x-icu" (provider = icu, locale = 'fr-BE');


ALTER COLLATION "pg_catalog"."fr-BE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-BE-x-icu" IS 'French (Belgium)';



CREATE COLLATION "pg_catalog"."fr-BF-x-icu" (provider = icu, locale = 'fr-BF');


ALTER COLLATION "pg_catalog"."fr-BF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-BF-x-icu" IS 'French (Burkina Faso)';



CREATE COLLATION "pg_catalog"."fr-BI-x-icu" (provider = icu, locale = 'fr-BI');


ALTER COLLATION "pg_catalog"."fr-BI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-BI-x-icu" IS 'French (Burundi)';



CREATE COLLATION "pg_catalog"."fr-BJ-x-icu" (provider = icu, locale = 'fr-BJ');


ALTER COLLATION "pg_catalog"."fr-BJ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-BJ-x-icu" IS 'French (Benin)';



CREATE COLLATION "pg_catalog"."fr-BL-x-icu" (provider = icu, locale = 'fr-BL');


ALTER COLLATION "pg_catalog"."fr-BL-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."fr-CA-x-icu" (provider = icu, locale = 'fr-CA');


ALTER COLLATION "pg_catalog"."fr-CA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-CA-x-icu" IS 'French (Canada)';



CREATE COLLATION "pg_catalog"."fr-CD-x-icu" (provider = icu, locale = 'fr-CD');


ALTER COLLATION "pg_catalog"."fr-CD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-CD-x-icu" IS 'French (Congo - Kinshasa)';



CREATE COLLATION "pg_catalog"."fr-CF-x-icu" (provider = icu, locale = 'fr-CF');


ALTER COLLATION "pg_catalog"."fr-CF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-CF-x-icu" IS 'French (Central African Republic)';



CREATE COLLATION "pg_catalog"."fr-CG-x-icu" (provider = icu, locale = 'fr-CG');


ALTER COLLATION "pg_catalog"."fr-CG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-CG-x-icu" IS 'French (Congo - Brazzaville)';



CREATE COLLATION "pg_catalog"."fr-CH-x-icu" (provider = icu, locale = 'fr-CH');


ALTER COLLATION "pg_catalog"."fr-CH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-CH-x-icu" IS 'French (Switzerland)';



CREATE COLLATION "pg_catalog"."fr-CI-x-icu" (provider = icu, locale = 'fr-CI');


ALTER COLLATION "pg_catalog"."fr-CI-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."fr-CM-x-icu" (provider = icu, locale = 'fr-CM');


ALTER COLLATION "pg_catalog"."fr-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-CM-x-icu" IS 'French (Cameroon)';



CREATE COLLATION "pg_catalog"."fr-DJ-x-icu" (provider = icu, locale = 'fr-DJ');


ALTER COLLATION "pg_catalog"."fr-DJ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-DJ-x-icu" IS 'French (Djibouti)';



CREATE COLLATION "pg_catalog"."fr-DZ-x-icu" (provider = icu, locale = 'fr-DZ');


ALTER COLLATION "pg_catalog"."fr-DZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-DZ-x-icu" IS 'French (Algeria)';



CREATE COLLATION "pg_catalog"."fr-FR-x-icu" (provider = icu, locale = 'fr-FR');


ALTER COLLATION "pg_catalog"."fr-FR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-FR-x-icu" IS 'French (France)';



CREATE COLLATION "pg_catalog"."fr-GA-x-icu" (provider = icu, locale = 'fr-GA');


ALTER COLLATION "pg_catalog"."fr-GA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-GA-x-icu" IS 'French (Gabon)';



CREATE COLLATION "pg_catalog"."fr-GF-x-icu" (provider = icu, locale = 'fr-GF');


ALTER COLLATION "pg_catalog"."fr-GF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-GF-x-icu" IS 'French (French Guiana)';



CREATE COLLATION "pg_catalog"."fr-GN-x-icu" (provider = icu, locale = 'fr-GN');


ALTER COLLATION "pg_catalog"."fr-GN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-GN-x-icu" IS 'French (Guinea)';



CREATE COLLATION "pg_catalog"."fr-GP-x-icu" (provider = icu, locale = 'fr-GP');


ALTER COLLATION "pg_catalog"."fr-GP-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-GP-x-icu" IS 'French (Guadeloupe)';



CREATE COLLATION "pg_catalog"."fr-GQ-x-icu" (provider = icu, locale = 'fr-GQ');


ALTER COLLATION "pg_catalog"."fr-GQ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-GQ-x-icu" IS 'French (Equatorial Guinea)';



CREATE COLLATION "pg_catalog"."fr-HT-x-icu" (provider = icu, locale = 'fr-HT');


ALTER COLLATION "pg_catalog"."fr-HT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-HT-x-icu" IS 'French (Haiti)';



CREATE COLLATION "pg_catalog"."fr-KM-x-icu" (provider = icu, locale = 'fr-KM');


ALTER COLLATION "pg_catalog"."fr-KM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-KM-x-icu" IS 'French (Comoros)';



CREATE COLLATION "pg_catalog"."fr-LU-x-icu" (provider = icu, locale = 'fr-LU');


ALTER COLLATION "pg_catalog"."fr-LU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-LU-x-icu" IS 'French (Luxembourg)';



CREATE COLLATION "pg_catalog"."fr-MA-x-icu" (provider = icu, locale = 'fr-MA');


ALTER COLLATION "pg_catalog"."fr-MA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-MA-x-icu" IS 'French (Morocco)';



CREATE COLLATION "pg_catalog"."fr-MC-x-icu" (provider = icu, locale = 'fr-MC');


ALTER COLLATION "pg_catalog"."fr-MC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-MC-x-icu" IS 'French (Monaco)';



CREATE COLLATION "pg_catalog"."fr-MF-x-icu" (provider = icu, locale = 'fr-MF');


ALTER COLLATION "pg_catalog"."fr-MF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-MF-x-icu" IS 'French (St. Martin)';



CREATE COLLATION "pg_catalog"."fr-MG-x-icu" (provider = icu, locale = 'fr-MG');


ALTER COLLATION "pg_catalog"."fr-MG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-MG-x-icu" IS 'French (Madagascar)';



CREATE COLLATION "pg_catalog"."fr-ML-x-icu" (provider = icu, locale = 'fr-ML');


ALTER COLLATION "pg_catalog"."fr-ML-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-ML-x-icu" IS 'French (Mali)';



CREATE COLLATION "pg_catalog"."fr-MQ-x-icu" (provider = icu, locale = 'fr-MQ');


ALTER COLLATION "pg_catalog"."fr-MQ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-MQ-x-icu" IS 'French (Martinique)';



CREATE COLLATION "pg_catalog"."fr-MR-x-icu" (provider = icu, locale = 'fr-MR');


ALTER COLLATION "pg_catalog"."fr-MR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-MR-x-icu" IS 'French (Mauritania)';



CREATE COLLATION "pg_catalog"."fr-MU-x-icu" (provider = icu, locale = 'fr-MU');


ALTER COLLATION "pg_catalog"."fr-MU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-MU-x-icu" IS 'French (Mauritius)';



CREATE COLLATION "pg_catalog"."fr-NC-x-icu" (provider = icu, locale = 'fr-NC');


ALTER COLLATION "pg_catalog"."fr-NC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-NC-x-icu" IS 'French (New Caledonia)';



CREATE COLLATION "pg_catalog"."fr-NE-x-icu" (provider = icu, locale = 'fr-NE');


ALTER COLLATION "pg_catalog"."fr-NE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-NE-x-icu" IS 'French (Niger)';



CREATE COLLATION "pg_catalog"."fr-PF-x-icu" (provider = icu, locale = 'fr-PF');


ALTER COLLATION "pg_catalog"."fr-PF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-PF-x-icu" IS 'French (French Polynesia)';



CREATE COLLATION "pg_catalog"."fr-PM-x-icu" (provider = icu, locale = 'fr-PM');


ALTER COLLATION "pg_catalog"."fr-PM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-PM-x-icu" IS 'French (St. Pierre & Miquelon)';



CREATE COLLATION "pg_catalog"."fr-RE-x-icu" (provider = icu, locale = 'fr-RE');


ALTER COLLATION "pg_catalog"."fr-RE-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."fr-RW-x-icu" (provider = icu, locale = 'fr-RW');


ALTER COLLATION "pg_catalog"."fr-RW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-RW-x-icu" IS 'French (Rwanda)';



CREATE COLLATION "pg_catalog"."fr-SC-x-icu" (provider = icu, locale = 'fr-SC');


ALTER COLLATION "pg_catalog"."fr-SC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-SC-x-icu" IS 'French (Seychelles)';



CREATE COLLATION "pg_catalog"."fr-SN-x-icu" (provider = icu, locale = 'fr-SN');


ALTER COLLATION "pg_catalog"."fr-SN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-SN-x-icu" IS 'French (Senegal)';



CREATE COLLATION "pg_catalog"."fr-SY-x-icu" (provider = icu, locale = 'fr-SY');


ALTER COLLATION "pg_catalog"."fr-SY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-SY-x-icu" IS 'French (Syria)';



CREATE COLLATION "pg_catalog"."fr-TD-x-icu" (provider = icu, locale = 'fr-TD');


ALTER COLLATION "pg_catalog"."fr-TD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-TD-x-icu" IS 'French (Chad)';



CREATE COLLATION "pg_catalog"."fr-TG-x-icu" (provider = icu, locale = 'fr-TG');


ALTER COLLATION "pg_catalog"."fr-TG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-TG-x-icu" IS 'French (Togo)';



CREATE COLLATION "pg_catalog"."fr-TN-x-icu" (provider = icu, locale = 'fr-TN');


ALTER COLLATION "pg_catalog"."fr-TN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-TN-x-icu" IS 'French (Tunisia)';



CREATE COLLATION "pg_catalog"."fr-VU-x-icu" (provider = icu, locale = 'fr-VU');


ALTER COLLATION "pg_catalog"."fr-VU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-VU-x-icu" IS 'French (Vanuatu)';



CREATE COLLATION "pg_catalog"."fr-WF-x-icu" (provider = icu, locale = 'fr-WF');


ALTER COLLATION "pg_catalog"."fr-WF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-WF-x-icu" IS 'French (Wallis & Futuna)';



CREATE COLLATION "pg_catalog"."fr-YT-x-icu" (provider = icu, locale = 'fr-YT');


ALTER COLLATION "pg_catalog"."fr-YT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-YT-x-icu" IS 'French (Mayotte)';



CREATE COLLATION "pg_catalog"."fr-x-icu" (provider = icu, locale = 'fr');


ALTER COLLATION "pg_catalog"."fr-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fr-x-icu" IS 'French';



CREATE COLLATION "pg_catalog"."fur-IT-x-icu" (provider = icu, locale = 'fur-IT');


ALTER COLLATION "pg_catalog"."fur-IT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fur-IT-x-icu" IS 'Friulian (Italy)';



CREATE COLLATION "pg_catalog"."fur-x-icu" (provider = icu, locale = 'fur');


ALTER COLLATION "pg_catalog"."fur-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fur-x-icu" IS 'Friulian';



CREATE COLLATION "pg_catalog"."fy-NL-x-icu" (provider = icu, locale = 'fy-NL');


ALTER COLLATION "pg_catalog"."fy-NL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fy-NL-x-icu" IS 'Western Frisian (Netherlands)';



CREATE COLLATION "pg_catalog"."fy-x-icu" (provider = icu, locale = 'fy');


ALTER COLLATION "pg_catalog"."fy-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."fy-x-icu" IS 'Western Frisian';



CREATE COLLATION "pg_catalog"."ga-GB-x-icu" (provider = icu, locale = 'ga-GB');


ALTER COLLATION "pg_catalog"."ga-GB-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ga-GB-x-icu" IS 'Irish (United Kingdom)';



CREATE COLLATION "pg_catalog"."ga-IE-x-icu" (provider = icu, locale = 'ga-IE');


ALTER COLLATION "pg_catalog"."ga-IE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ga-IE-x-icu" IS 'Irish (Ireland)';



CREATE COLLATION "pg_catalog"."ga-x-icu" (provider = icu, locale = 'ga');


ALTER COLLATION "pg_catalog"."ga-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ga-x-icu" IS 'Irish';



CREATE COLLATION "pg_catalog"."gd-GB-x-icu" (provider = icu, locale = 'gd-GB');


ALTER COLLATION "pg_catalog"."gd-GB-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gd-GB-x-icu" IS 'Scottish Gaelic (United Kingdom)';



CREATE COLLATION "pg_catalog"."gd-x-icu" (provider = icu, locale = 'gd');


ALTER COLLATION "pg_catalog"."gd-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gd-x-icu" IS 'Scottish Gaelic';



CREATE COLLATION "pg_catalog"."gl-ES-x-icu" (provider = icu, locale = 'gl-ES');


ALTER COLLATION "pg_catalog"."gl-ES-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gl-ES-x-icu" IS 'Galician (Spain)';



CREATE COLLATION "pg_catalog"."gl-x-icu" (provider = icu, locale = 'gl');


ALTER COLLATION "pg_catalog"."gl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gl-x-icu" IS 'Galician';



CREATE COLLATION "pg_catalog"."gsw-CH-x-icu" (provider = icu, locale = 'gsw-CH');


ALTER COLLATION "pg_catalog"."gsw-CH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gsw-CH-x-icu" IS 'Swiss German (Switzerland)';



CREATE COLLATION "pg_catalog"."gsw-FR-x-icu" (provider = icu, locale = 'gsw-FR');


ALTER COLLATION "pg_catalog"."gsw-FR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gsw-FR-x-icu" IS 'Swiss German (France)';



CREATE COLLATION "pg_catalog"."gsw-LI-x-icu" (provider = icu, locale = 'gsw-LI');


ALTER COLLATION "pg_catalog"."gsw-LI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gsw-LI-x-icu" IS 'Swiss German (Liechtenstein)';



CREATE COLLATION "pg_catalog"."gsw-x-icu" (provider = icu, locale = 'gsw');


ALTER COLLATION "pg_catalog"."gsw-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gsw-x-icu" IS 'Swiss German';



CREATE COLLATION "pg_catalog"."gu-IN-x-icu" (provider = icu, locale = 'gu-IN');


ALTER COLLATION "pg_catalog"."gu-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gu-IN-x-icu" IS 'Gujarati (India)';



CREATE COLLATION "pg_catalog"."gu-x-icu" (provider = icu, locale = 'gu');


ALTER COLLATION "pg_catalog"."gu-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gu-x-icu" IS 'Gujarati';



CREATE COLLATION "pg_catalog"."guz-KE-x-icu" (provider = icu, locale = 'guz-KE');


ALTER COLLATION "pg_catalog"."guz-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."guz-KE-x-icu" IS 'Gusii (Kenya)';



CREATE COLLATION "pg_catalog"."guz-x-icu" (provider = icu, locale = 'guz');


ALTER COLLATION "pg_catalog"."guz-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."guz-x-icu" IS 'Gusii';



CREATE COLLATION "pg_catalog"."gv-IM-x-icu" (provider = icu, locale = 'gv-IM');


ALTER COLLATION "pg_catalog"."gv-IM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gv-IM-x-icu" IS 'Manx (Isle of Man)';



CREATE COLLATION "pg_catalog"."gv-x-icu" (provider = icu, locale = 'gv');


ALTER COLLATION "pg_catalog"."gv-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."gv-x-icu" IS 'Manx';



CREATE COLLATION "pg_catalog"."ha-GH-x-icu" (provider = icu, locale = 'ha-GH');


ALTER COLLATION "pg_catalog"."ha-GH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ha-GH-x-icu" IS 'Hausa (Ghana)';



CREATE COLLATION "pg_catalog"."ha-NE-x-icu" (provider = icu, locale = 'ha-NE');


ALTER COLLATION "pg_catalog"."ha-NE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ha-NE-x-icu" IS 'Hausa (Niger)';



CREATE COLLATION "pg_catalog"."ha-NG-x-icu" (provider = icu, locale = 'ha-NG');


ALTER COLLATION "pg_catalog"."ha-NG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ha-NG-x-icu" IS 'Hausa (Nigeria)';



CREATE COLLATION "pg_catalog"."ha-x-icu" (provider = icu, locale = 'ha');


ALTER COLLATION "pg_catalog"."ha-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ha-x-icu" IS 'Hausa';



CREATE COLLATION "pg_catalog"."haw-US-x-icu" (provider = icu, locale = 'haw-US');


ALTER COLLATION "pg_catalog"."haw-US-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."haw-US-x-icu" IS 'Hawaiian (United States)';



CREATE COLLATION "pg_catalog"."haw-x-icu" (provider = icu, locale = 'haw');


ALTER COLLATION "pg_catalog"."haw-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."haw-x-icu" IS 'Hawaiian';



CREATE COLLATION "pg_catalog"."he-IL-x-icu" (provider = icu, locale = 'he-IL');


ALTER COLLATION "pg_catalog"."he-IL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."he-IL-x-icu" IS 'Hebrew (Israel)';



CREATE COLLATION "pg_catalog"."he-x-icu" (provider = icu, locale = 'he');


ALTER COLLATION "pg_catalog"."he-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."he-x-icu" IS 'Hebrew';



CREATE COLLATION "pg_catalog"."hi-IN-x-icu" (provider = icu, locale = 'hi-IN');


ALTER COLLATION "pg_catalog"."hi-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hi-IN-x-icu" IS 'Hindi (India)';



CREATE COLLATION "pg_catalog"."hi-Latn-IN-x-icu" (provider = icu, locale = 'hi-Latn-IN');


ALTER COLLATION "pg_catalog"."hi-Latn-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hi-Latn-IN-x-icu" IS 'Hindi (Latin, India)';



CREATE COLLATION "pg_catalog"."hi-Latn-x-icu" (provider = icu, locale = 'hi-Latn');


ALTER COLLATION "pg_catalog"."hi-Latn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hi-Latn-x-icu" IS 'Hindi (Latin)';



CREATE COLLATION "pg_catalog"."hi-x-icu" (provider = icu, locale = 'hi');


ALTER COLLATION "pg_catalog"."hi-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hi-x-icu" IS 'Hindi';



CREATE COLLATION "pg_catalog"."hr-BA-x-icu" (provider = icu, locale = 'hr-BA');


ALTER COLLATION "pg_catalog"."hr-BA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hr-BA-x-icu" IS 'Croatian (Bosnia & Herzegovina)';



CREATE COLLATION "pg_catalog"."hr-HR-x-icu" (provider = icu, locale = 'hr-HR');


ALTER COLLATION "pg_catalog"."hr-HR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hr-HR-x-icu" IS 'Croatian (Croatia)';



CREATE COLLATION "pg_catalog"."hr-x-icu" (provider = icu, locale = 'hr');


ALTER COLLATION "pg_catalog"."hr-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hr-x-icu" IS 'Croatian';



CREATE COLLATION "pg_catalog"."hsb-DE-x-icu" (provider = icu, locale = 'hsb-DE');


ALTER COLLATION "pg_catalog"."hsb-DE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hsb-DE-x-icu" IS 'Upper Sorbian (Germany)';



CREATE COLLATION "pg_catalog"."hsb-x-icu" (provider = icu, locale = 'hsb');


ALTER COLLATION "pg_catalog"."hsb-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hsb-x-icu" IS 'Upper Sorbian';



CREATE COLLATION "pg_catalog"."hu-HU-x-icu" (provider = icu, locale = 'hu-HU');


ALTER COLLATION "pg_catalog"."hu-HU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hu-HU-x-icu" IS 'Hungarian (Hungary)';



CREATE COLLATION "pg_catalog"."hu-x-icu" (provider = icu, locale = 'hu');


ALTER COLLATION "pg_catalog"."hu-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hu-x-icu" IS 'Hungarian';



CREATE COLLATION "pg_catalog"."hy-AM-x-icu" (provider = icu, locale = 'hy-AM');


ALTER COLLATION "pg_catalog"."hy-AM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hy-AM-x-icu" IS 'Armenian (Armenia)';



CREATE COLLATION "pg_catalog"."hy-x-icu" (provider = icu, locale = 'hy');


ALTER COLLATION "pg_catalog"."hy-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."hy-x-icu" IS 'Armenian';



CREATE COLLATION "pg_catalog"."ia-001-x-icu" (provider = icu, locale = 'ia-001');


ALTER COLLATION "pg_catalog"."ia-001-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ia-001-x-icu" IS 'Interlingua (world)';



CREATE COLLATION "pg_catalog"."ia-x-icu" (provider = icu, locale = 'ia');


ALTER COLLATION "pg_catalog"."ia-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ia-x-icu" IS 'Interlingua';



CREATE COLLATION "pg_catalog"."id-ID-x-icu" (provider = icu, locale = 'id-ID');


ALTER COLLATION "pg_catalog"."id-ID-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."id-ID-x-icu" IS 'Indonesian (Indonesia)';



CREATE COLLATION "pg_catalog"."id-x-icu" (provider = icu, locale = 'id');


ALTER COLLATION "pg_catalog"."id-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."id-x-icu" IS 'Indonesian';



CREATE COLLATION "pg_catalog"."ig-NG-x-icu" (provider = icu, locale = 'ig-NG');


ALTER COLLATION "pg_catalog"."ig-NG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ig-NG-x-icu" IS 'Igbo (Nigeria)';



CREATE COLLATION "pg_catalog"."ig-x-icu" (provider = icu, locale = 'ig');


ALTER COLLATION "pg_catalog"."ig-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ig-x-icu" IS 'Igbo';



CREATE COLLATION "pg_catalog"."ii-CN-x-icu" (provider = icu, locale = 'ii-CN');


ALTER COLLATION "pg_catalog"."ii-CN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ii-CN-x-icu" IS 'Sichuan Yi (China)';



CREATE COLLATION "pg_catalog"."ii-x-icu" (provider = icu, locale = 'ii');


ALTER COLLATION "pg_catalog"."ii-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ii-x-icu" IS 'Sichuan Yi';



CREATE COLLATION "pg_catalog"."is-IS-x-icu" (provider = icu, locale = 'is-IS');


ALTER COLLATION "pg_catalog"."is-IS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."is-IS-x-icu" IS 'Icelandic (Iceland)';



CREATE COLLATION "pg_catalog"."is-x-icu" (provider = icu, locale = 'is');


ALTER COLLATION "pg_catalog"."is-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."is-x-icu" IS 'Icelandic';



CREATE COLLATION "pg_catalog"."it-CH-x-icu" (provider = icu, locale = 'it-CH');


ALTER COLLATION "pg_catalog"."it-CH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."it-CH-x-icu" IS 'Italian (Switzerland)';



CREATE COLLATION "pg_catalog"."it-IT-x-icu" (provider = icu, locale = 'it-IT');


ALTER COLLATION "pg_catalog"."it-IT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."it-IT-x-icu" IS 'Italian (Italy)';



CREATE COLLATION "pg_catalog"."it-SM-x-icu" (provider = icu, locale = 'it-SM');


ALTER COLLATION "pg_catalog"."it-SM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."it-SM-x-icu" IS 'Italian (San Marino)';



CREATE COLLATION "pg_catalog"."it-VA-x-icu" (provider = icu, locale = 'it-VA');


ALTER COLLATION "pg_catalog"."it-VA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."it-VA-x-icu" IS 'Italian (Vatican City)';



CREATE COLLATION "pg_catalog"."it-x-icu" (provider = icu, locale = 'it');


ALTER COLLATION "pg_catalog"."it-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."it-x-icu" IS 'Italian';



CREATE COLLATION "pg_catalog"."ja-JP-x-icu" (provider = icu, locale = 'ja-JP');


ALTER COLLATION "pg_catalog"."ja-JP-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ja-JP-x-icu" IS 'Japanese (Japan)';



CREATE COLLATION "pg_catalog"."ja-x-icu" (provider = icu, locale = 'ja');


ALTER COLLATION "pg_catalog"."ja-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ja-x-icu" IS 'Japanese';



CREATE COLLATION "pg_catalog"."jgo-CM-x-icu" (provider = icu, locale = 'jgo-CM');


ALTER COLLATION "pg_catalog"."jgo-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."jgo-CM-x-icu" IS 'Ngomba (Cameroon)';



CREATE COLLATION "pg_catalog"."jgo-x-icu" (provider = icu, locale = 'jgo');


ALTER COLLATION "pg_catalog"."jgo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."jgo-x-icu" IS 'Ngomba';



CREATE COLLATION "pg_catalog"."jmc-TZ-x-icu" (provider = icu, locale = 'jmc-TZ');


ALTER COLLATION "pg_catalog"."jmc-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."jmc-TZ-x-icu" IS 'Machame (Tanzania)';



CREATE COLLATION "pg_catalog"."jmc-x-icu" (provider = icu, locale = 'jmc');


ALTER COLLATION "pg_catalog"."jmc-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."jmc-x-icu" IS 'Machame';



CREATE COLLATION "pg_catalog"."jv-ID-x-icu" (provider = icu, locale = 'jv-ID');


ALTER COLLATION "pg_catalog"."jv-ID-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."jv-ID-x-icu" IS 'Javanese (Indonesia)';



CREATE COLLATION "pg_catalog"."jv-x-icu" (provider = icu, locale = 'jv');


ALTER COLLATION "pg_catalog"."jv-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."jv-x-icu" IS 'Javanese';



CREATE COLLATION "pg_catalog"."ka-GE-x-icu" (provider = icu, locale = 'ka-GE');


ALTER COLLATION "pg_catalog"."ka-GE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ka-GE-x-icu" IS 'Georgian (Georgia)';



CREATE COLLATION "pg_catalog"."ka-x-icu" (provider = icu, locale = 'ka');


ALTER COLLATION "pg_catalog"."ka-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ka-x-icu" IS 'Georgian';



CREATE COLLATION "pg_catalog"."kab-DZ-x-icu" (provider = icu, locale = 'kab-DZ');


ALTER COLLATION "pg_catalog"."kab-DZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kab-DZ-x-icu" IS 'Kabyle (Algeria)';



CREATE COLLATION "pg_catalog"."kab-x-icu" (provider = icu, locale = 'kab');


ALTER COLLATION "pg_catalog"."kab-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kab-x-icu" IS 'Kabyle';



CREATE COLLATION "pg_catalog"."kam-KE-x-icu" (provider = icu, locale = 'kam-KE');


ALTER COLLATION "pg_catalog"."kam-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kam-KE-x-icu" IS 'Kamba (Kenya)';



CREATE COLLATION "pg_catalog"."kam-x-icu" (provider = icu, locale = 'kam');


ALTER COLLATION "pg_catalog"."kam-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kam-x-icu" IS 'Kamba';



CREATE COLLATION "pg_catalog"."kde-TZ-x-icu" (provider = icu, locale = 'kde-TZ');


ALTER COLLATION "pg_catalog"."kde-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kde-TZ-x-icu" IS 'Makonde (Tanzania)';



CREATE COLLATION "pg_catalog"."kde-x-icu" (provider = icu, locale = 'kde');


ALTER COLLATION "pg_catalog"."kde-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kde-x-icu" IS 'Makonde';



CREATE COLLATION "pg_catalog"."kea-CV-x-icu" (provider = icu, locale = 'kea-CV');


ALTER COLLATION "pg_catalog"."kea-CV-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kea-CV-x-icu" IS 'Kabuverdianu (Cape Verde)';



CREATE COLLATION "pg_catalog"."kea-x-icu" (provider = icu, locale = 'kea');


ALTER COLLATION "pg_catalog"."kea-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kea-x-icu" IS 'Kabuverdianu';



CREATE COLLATION "pg_catalog"."kgp-BR-x-icu" (provider = icu, locale = 'kgp-BR');


ALTER COLLATION "pg_catalog"."kgp-BR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kgp-BR-x-icu" IS 'Kaingang (Brazil)';



CREATE COLLATION "pg_catalog"."kgp-x-icu" (provider = icu, locale = 'kgp');


ALTER COLLATION "pg_catalog"."kgp-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kgp-x-icu" IS 'Kaingang';



CREATE COLLATION "pg_catalog"."khq-ML-x-icu" (provider = icu, locale = 'khq-ML');


ALTER COLLATION "pg_catalog"."khq-ML-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."khq-ML-x-icu" IS 'Koyra Chiini (Mali)';



CREATE COLLATION "pg_catalog"."khq-x-icu" (provider = icu, locale = 'khq');


ALTER COLLATION "pg_catalog"."khq-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."khq-x-icu" IS 'Koyra Chiini';



CREATE COLLATION "pg_catalog"."ki-KE-x-icu" (provider = icu, locale = 'ki-KE');


ALTER COLLATION "pg_catalog"."ki-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ki-KE-x-icu" IS 'Kikuyu (Kenya)';



CREATE COLLATION "pg_catalog"."ki-x-icu" (provider = icu, locale = 'ki');


ALTER COLLATION "pg_catalog"."ki-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ki-x-icu" IS 'Kikuyu';



CREATE COLLATION "pg_catalog"."kk-KZ-x-icu" (provider = icu, locale = 'kk-KZ');


ALTER COLLATION "pg_catalog"."kk-KZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kk-KZ-x-icu" IS 'Kazakh (Kazakhstan)';



CREATE COLLATION "pg_catalog"."kk-x-icu" (provider = icu, locale = 'kk');


ALTER COLLATION "pg_catalog"."kk-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kk-x-icu" IS 'Kazakh';



CREATE COLLATION "pg_catalog"."kkj-CM-x-icu" (provider = icu, locale = 'kkj-CM');


ALTER COLLATION "pg_catalog"."kkj-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kkj-CM-x-icu" IS 'Kako (Cameroon)';



CREATE COLLATION "pg_catalog"."kkj-x-icu" (provider = icu, locale = 'kkj');


ALTER COLLATION "pg_catalog"."kkj-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kkj-x-icu" IS 'Kako';



CREATE COLLATION "pg_catalog"."kl-GL-x-icu" (provider = icu, locale = 'kl-GL');


ALTER COLLATION "pg_catalog"."kl-GL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kl-GL-x-icu" IS 'Kalaallisut (Greenland)';



CREATE COLLATION "pg_catalog"."kl-x-icu" (provider = icu, locale = 'kl');


ALTER COLLATION "pg_catalog"."kl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kl-x-icu" IS 'Kalaallisut';



CREATE COLLATION "pg_catalog"."kln-KE-x-icu" (provider = icu, locale = 'kln-KE');


ALTER COLLATION "pg_catalog"."kln-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kln-KE-x-icu" IS 'Kalenjin (Kenya)';



CREATE COLLATION "pg_catalog"."kln-x-icu" (provider = icu, locale = 'kln');


ALTER COLLATION "pg_catalog"."kln-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kln-x-icu" IS 'Kalenjin';



CREATE COLLATION "pg_catalog"."km-KH-x-icu" (provider = icu, locale = 'km-KH');


ALTER COLLATION "pg_catalog"."km-KH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."km-KH-x-icu" IS 'Khmer (Cambodia)';



CREATE COLLATION "pg_catalog"."km-x-icu" (provider = icu, locale = 'km');


ALTER COLLATION "pg_catalog"."km-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."km-x-icu" IS 'Khmer';



CREATE COLLATION "pg_catalog"."kn-IN-x-icu" (provider = icu, locale = 'kn-IN');


ALTER COLLATION "pg_catalog"."kn-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kn-IN-x-icu" IS 'Kannada (India)';



CREATE COLLATION "pg_catalog"."kn-x-icu" (provider = icu, locale = 'kn');


ALTER COLLATION "pg_catalog"."kn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kn-x-icu" IS 'Kannada';



CREATE COLLATION "pg_catalog"."ko-KP-x-icu" (provider = icu, locale = 'ko-KP');


ALTER COLLATION "pg_catalog"."ko-KP-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ko-KP-x-icu" IS 'Korean (North Korea)';



CREATE COLLATION "pg_catalog"."ko-KR-x-icu" (provider = icu, locale = 'ko-KR');


ALTER COLLATION "pg_catalog"."ko-KR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ko-KR-x-icu" IS 'Korean (South Korea)';



CREATE COLLATION "pg_catalog"."ko-x-icu" (provider = icu, locale = 'ko');


ALTER COLLATION "pg_catalog"."ko-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ko-x-icu" IS 'Korean';



CREATE COLLATION "pg_catalog"."kok-IN-x-icu" (provider = icu, locale = 'kok-IN');


ALTER COLLATION "pg_catalog"."kok-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kok-IN-x-icu" IS 'Konkani (India)';



CREATE COLLATION "pg_catalog"."kok-x-icu" (provider = icu, locale = 'kok');


ALTER COLLATION "pg_catalog"."kok-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kok-x-icu" IS 'Konkani';



CREATE COLLATION "pg_catalog"."ks-Arab-IN-x-icu" (provider = icu, locale = 'ks-Arab-IN');


ALTER COLLATION "pg_catalog"."ks-Arab-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ks-Arab-IN-x-icu" IS 'Kashmiri (Arabic, India)';



CREATE COLLATION "pg_catalog"."ks-Arab-x-icu" (provider = icu, locale = 'ks-Arab');


ALTER COLLATION "pg_catalog"."ks-Arab-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ks-Arab-x-icu" IS 'Kashmiri (Arabic)';



CREATE COLLATION "pg_catalog"."ks-Deva-IN-x-icu" (provider = icu, locale = 'ks-Deva-IN');


ALTER COLLATION "pg_catalog"."ks-Deva-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ks-Deva-IN-x-icu" IS 'Kashmiri (Devanagari, India)';



CREATE COLLATION "pg_catalog"."ks-Deva-x-icu" (provider = icu, locale = 'ks-Deva');


ALTER COLLATION "pg_catalog"."ks-Deva-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ks-Deva-x-icu" IS 'Kashmiri (Devanagari)';



CREATE COLLATION "pg_catalog"."ks-x-icu" (provider = icu, locale = 'ks');


ALTER COLLATION "pg_catalog"."ks-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ks-x-icu" IS 'Kashmiri';



CREATE COLLATION "pg_catalog"."ksb-TZ-x-icu" (provider = icu, locale = 'ksb-TZ');


ALTER COLLATION "pg_catalog"."ksb-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ksb-TZ-x-icu" IS 'Shambala (Tanzania)';



CREATE COLLATION "pg_catalog"."ksb-x-icu" (provider = icu, locale = 'ksb');


ALTER COLLATION "pg_catalog"."ksb-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ksb-x-icu" IS 'Shambala';



CREATE COLLATION "pg_catalog"."ksf-CM-x-icu" (provider = icu, locale = 'ksf-CM');


ALTER COLLATION "pg_catalog"."ksf-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ksf-CM-x-icu" IS 'Bafia (Cameroon)';



CREATE COLLATION "pg_catalog"."ksf-x-icu" (provider = icu, locale = 'ksf');


ALTER COLLATION "pg_catalog"."ksf-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ksf-x-icu" IS 'Bafia';



CREATE COLLATION "pg_catalog"."ksh-DE-x-icu" (provider = icu, locale = 'ksh-DE');


ALTER COLLATION "pg_catalog"."ksh-DE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ksh-DE-x-icu" IS 'Colognian (Germany)';



CREATE COLLATION "pg_catalog"."ksh-x-icu" (provider = icu, locale = 'ksh');


ALTER COLLATION "pg_catalog"."ksh-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ksh-x-icu" IS 'Colognian';



CREATE COLLATION "pg_catalog"."ku-TR-x-icu" (provider = icu, locale = 'ku-TR');


ALTER COLLATION "pg_catalog"."ku-TR-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."ku-x-icu" (provider = icu, locale = 'ku');


ALTER COLLATION "pg_catalog"."ku-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ku-x-icu" IS 'Kurdish';



CREATE COLLATION "pg_catalog"."kw-GB-x-icu" (provider = icu, locale = 'kw-GB');


ALTER COLLATION "pg_catalog"."kw-GB-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kw-GB-x-icu" IS 'Cornish (United Kingdom)';



CREATE COLLATION "pg_catalog"."kw-x-icu" (provider = icu, locale = 'kw');


ALTER COLLATION "pg_catalog"."kw-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."kw-x-icu" IS 'Cornish';



CREATE COLLATION "pg_catalog"."ky-KG-x-icu" (provider = icu, locale = 'ky-KG');


ALTER COLLATION "pg_catalog"."ky-KG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ky-KG-x-icu" IS 'Kyrgyz (Kyrgyzstan)';



CREATE COLLATION "pg_catalog"."ky-x-icu" (provider = icu, locale = 'ky');


ALTER COLLATION "pg_catalog"."ky-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ky-x-icu" IS 'Kyrgyz';



CREATE COLLATION "pg_catalog"."lag-TZ-x-icu" (provider = icu, locale = 'lag-TZ');


ALTER COLLATION "pg_catalog"."lag-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lag-TZ-x-icu" IS 'Langi (Tanzania)';



CREATE COLLATION "pg_catalog"."lag-x-icu" (provider = icu, locale = 'lag');


ALTER COLLATION "pg_catalog"."lag-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lag-x-icu" IS 'Langi';



CREATE COLLATION "pg_catalog"."lb-LU-x-icu" (provider = icu, locale = 'lb-LU');


ALTER COLLATION "pg_catalog"."lb-LU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lb-LU-x-icu" IS 'Luxembourgish (Luxembourg)';



CREATE COLLATION "pg_catalog"."lb-x-icu" (provider = icu, locale = 'lb');


ALTER COLLATION "pg_catalog"."lb-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lb-x-icu" IS 'Luxembourgish';



CREATE COLLATION "pg_catalog"."lg-UG-x-icu" (provider = icu, locale = 'lg-UG');


ALTER COLLATION "pg_catalog"."lg-UG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lg-UG-x-icu" IS 'Ganda (Uganda)';



CREATE COLLATION "pg_catalog"."lg-x-icu" (provider = icu, locale = 'lg');


ALTER COLLATION "pg_catalog"."lg-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lg-x-icu" IS 'Ganda';



CREATE COLLATION "pg_catalog"."lkt-US-x-icu" (provider = icu, locale = 'lkt-US');


ALTER COLLATION "pg_catalog"."lkt-US-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lkt-US-x-icu" IS 'Lakota (United States)';



CREATE COLLATION "pg_catalog"."lkt-x-icu" (provider = icu, locale = 'lkt');


ALTER COLLATION "pg_catalog"."lkt-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lkt-x-icu" IS 'Lakota';



CREATE COLLATION "pg_catalog"."ln-AO-x-icu" (provider = icu, locale = 'ln-AO');


ALTER COLLATION "pg_catalog"."ln-AO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ln-AO-x-icu" IS 'Lingala (Angola)';



CREATE COLLATION "pg_catalog"."ln-CD-x-icu" (provider = icu, locale = 'ln-CD');


ALTER COLLATION "pg_catalog"."ln-CD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ln-CD-x-icu" IS 'Lingala (Congo - Kinshasa)';



CREATE COLLATION "pg_catalog"."ln-CF-x-icu" (provider = icu, locale = 'ln-CF');


ALTER COLLATION "pg_catalog"."ln-CF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ln-CF-x-icu" IS 'Lingala (Central African Republic)';



CREATE COLLATION "pg_catalog"."ln-CG-x-icu" (provider = icu, locale = 'ln-CG');


ALTER COLLATION "pg_catalog"."ln-CG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ln-CG-x-icu" IS 'Lingala (Congo - Brazzaville)';



CREATE COLLATION "pg_catalog"."ln-x-icu" (provider = icu, locale = 'ln');


ALTER COLLATION "pg_catalog"."ln-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ln-x-icu" IS 'Lingala';



CREATE COLLATION "pg_catalog"."lo-LA-x-icu" (provider = icu, locale = 'lo-LA');


ALTER COLLATION "pg_catalog"."lo-LA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lo-LA-x-icu" IS 'Lao (Laos)';



CREATE COLLATION "pg_catalog"."lo-x-icu" (provider = icu, locale = 'lo');


ALTER COLLATION "pg_catalog"."lo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lo-x-icu" IS 'Lao';



CREATE COLLATION "pg_catalog"."lrc-IQ-x-icu" (provider = icu, locale = 'lrc-IQ');


ALTER COLLATION "pg_catalog"."lrc-IQ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lrc-IQ-x-icu" IS 'Northern Luri (Iraq)';



CREATE COLLATION "pg_catalog"."lrc-IR-x-icu" (provider = icu, locale = 'lrc-IR');


ALTER COLLATION "pg_catalog"."lrc-IR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lrc-IR-x-icu" IS 'Northern Luri (Iran)';



CREATE COLLATION "pg_catalog"."lrc-x-icu" (provider = icu, locale = 'lrc');


ALTER COLLATION "pg_catalog"."lrc-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lrc-x-icu" IS 'Northern Luri';



CREATE COLLATION "pg_catalog"."lt-LT-x-icu" (provider = icu, locale = 'lt-LT');


ALTER COLLATION "pg_catalog"."lt-LT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lt-LT-x-icu" IS 'Lithuanian (Lithuania)';



CREATE COLLATION "pg_catalog"."lt-x-icu" (provider = icu, locale = 'lt');


ALTER COLLATION "pg_catalog"."lt-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lt-x-icu" IS 'Lithuanian';



CREATE COLLATION "pg_catalog"."lu-CD-x-icu" (provider = icu, locale = 'lu-CD');


ALTER COLLATION "pg_catalog"."lu-CD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lu-CD-x-icu" IS 'Luba-Katanga (Congo - Kinshasa)';



CREATE COLLATION "pg_catalog"."lu-x-icu" (provider = icu, locale = 'lu');


ALTER COLLATION "pg_catalog"."lu-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lu-x-icu" IS 'Luba-Katanga';



CREATE COLLATION "pg_catalog"."luo-KE-x-icu" (provider = icu, locale = 'luo-KE');


ALTER COLLATION "pg_catalog"."luo-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."luo-KE-x-icu" IS 'Luo (Kenya)';



CREATE COLLATION "pg_catalog"."luo-x-icu" (provider = icu, locale = 'luo');


ALTER COLLATION "pg_catalog"."luo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."luo-x-icu" IS 'Luo';



CREATE COLLATION "pg_catalog"."luy-KE-x-icu" (provider = icu, locale = 'luy-KE');


ALTER COLLATION "pg_catalog"."luy-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."luy-KE-x-icu" IS 'Luyia (Kenya)';



CREATE COLLATION "pg_catalog"."luy-x-icu" (provider = icu, locale = 'luy');


ALTER COLLATION "pg_catalog"."luy-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."luy-x-icu" IS 'Luyia';



CREATE COLLATION "pg_catalog"."lv-LV-x-icu" (provider = icu, locale = 'lv-LV');


ALTER COLLATION "pg_catalog"."lv-LV-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lv-LV-x-icu" IS 'Latvian (Latvia)';



CREATE COLLATION "pg_catalog"."lv-x-icu" (provider = icu, locale = 'lv');


ALTER COLLATION "pg_catalog"."lv-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."lv-x-icu" IS 'Latvian';



CREATE COLLATION "pg_catalog"."mai-IN-x-icu" (provider = icu, locale = 'mai-IN');


ALTER COLLATION "pg_catalog"."mai-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mai-IN-x-icu" IS 'Maithili (India)';



CREATE COLLATION "pg_catalog"."mai-x-icu" (provider = icu, locale = 'mai');


ALTER COLLATION "pg_catalog"."mai-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mai-x-icu" IS 'Maithili';



CREATE COLLATION "pg_catalog"."mas-KE-x-icu" (provider = icu, locale = 'mas-KE');


ALTER COLLATION "pg_catalog"."mas-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mas-KE-x-icu" IS 'Masai (Kenya)';



CREATE COLLATION "pg_catalog"."mas-TZ-x-icu" (provider = icu, locale = 'mas-TZ');


ALTER COLLATION "pg_catalog"."mas-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mas-TZ-x-icu" IS 'Masai (Tanzania)';



CREATE COLLATION "pg_catalog"."mas-x-icu" (provider = icu, locale = 'mas');


ALTER COLLATION "pg_catalog"."mas-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mas-x-icu" IS 'Masai';



CREATE COLLATION "pg_catalog"."mer-KE-x-icu" (provider = icu, locale = 'mer-KE');


ALTER COLLATION "pg_catalog"."mer-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mer-KE-x-icu" IS 'Meru (Kenya)';



CREATE COLLATION "pg_catalog"."mer-x-icu" (provider = icu, locale = 'mer');


ALTER COLLATION "pg_catalog"."mer-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mer-x-icu" IS 'Meru';



CREATE COLLATION "pg_catalog"."mfe-MU-x-icu" (provider = icu, locale = 'mfe-MU');


ALTER COLLATION "pg_catalog"."mfe-MU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mfe-MU-x-icu" IS 'Morisyen (Mauritius)';



CREATE COLLATION "pg_catalog"."mfe-x-icu" (provider = icu, locale = 'mfe');


ALTER COLLATION "pg_catalog"."mfe-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mfe-x-icu" IS 'Morisyen';



CREATE COLLATION "pg_catalog"."mg-MG-x-icu" (provider = icu, locale = 'mg-MG');


ALTER COLLATION "pg_catalog"."mg-MG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mg-MG-x-icu" IS 'Malagasy (Madagascar)';



CREATE COLLATION "pg_catalog"."mg-x-icu" (provider = icu, locale = 'mg');


ALTER COLLATION "pg_catalog"."mg-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mg-x-icu" IS 'Malagasy';



CREATE COLLATION "pg_catalog"."mgh-MZ-x-icu" (provider = icu, locale = 'mgh-MZ');


ALTER COLLATION "pg_catalog"."mgh-MZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mgh-MZ-x-icu" IS 'Makhuwa-Meetto (Mozambique)';



CREATE COLLATION "pg_catalog"."mgh-x-icu" (provider = icu, locale = 'mgh');


ALTER COLLATION "pg_catalog"."mgh-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mgh-x-icu" IS 'Makhuwa-Meetto';



CREATE COLLATION "pg_catalog"."mgo-CM-x-icu" (provider = icu, locale = 'mgo-CM');


ALTER COLLATION "pg_catalog"."mgo-CM-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."mgo-x-icu" (provider = icu, locale = 'mgo');


ALTER COLLATION "pg_catalog"."mgo-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."mi-NZ-x-icu" (provider = icu, locale = 'mi-NZ');


ALTER COLLATION "pg_catalog"."mi-NZ-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."mi-x-icu" (provider = icu, locale = 'mi');


ALTER COLLATION "pg_catalog"."mi-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."mk-MK-x-icu" (provider = icu, locale = 'mk-MK');


ALTER COLLATION "pg_catalog"."mk-MK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mk-MK-x-icu" IS 'Macedonian (North Macedonia)';



CREATE COLLATION "pg_catalog"."mk-x-icu" (provider = icu, locale = 'mk');


ALTER COLLATION "pg_catalog"."mk-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mk-x-icu" IS 'Macedonian';



CREATE COLLATION "pg_catalog"."ml-IN-x-icu" (provider = icu, locale = 'ml-IN');


ALTER COLLATION "pg_catalog"."ml-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ml-IN-x-icu" IS 'Malayalam (India)';



CREATE COLLATION "pg_catalog"."ml-x-icu" (provider = icu, locale = 'ml');


ALTER COLLATION "pg_catalog"."ml-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ml-x-icu" IS 'Malayalam';



CREATE COLLATION "pg_catalog"."mn-MN-x-icu" (provider = icu, locale = 'mn-MN');


ALTER COLLATION "pg_catalog"."mn-MN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mn-MN-x-icu" IS 'Mongolian (Mongolia)';



CREATE COLLATION "pg_catalog"."mn-x-icu" (provider = icu, locale = 'mn');


ALTER COLLATION "pg_catalog"."mn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mn-x-icu" IS 'Mongolian';



CREATE COLLATION "pg_catalog"."mni-Beng-IN-x-icu" (provider = icu, locale = 'mni-Beng-IN');


ALTER COLLATION "pg_catalog"."mni-Beng-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mni-Beng-IN-x-icu" IS 'Manipuri (Bangla, India)';



CREATE COLLATION "pg_catalog"."mni-Beng-x-icu" (provider = icu, locale = 'mni-Beng');


ALTER COLLATION "pg_catalog"."mni-Beng-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mni-Beng-x-icu" IS 'Manipuri (Bangla)';



CREATE COLLATION "pg_catalog"."mni-x-icu" (provider = icu, locale = 'mni');


ALTER COLLATION "pg_catalog"."mni-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mni-x-icu" IS 'Manipuri';



CREATE COLLATION "pg_catalog"."mr-IN-x-icu" (provider = icu, locale = 'mr-IN');


ALTER COLLATION "pg_catalog"."mr-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mr-IN-x-icu" IS 'Marathi (India)';



CREATE COLLATION "pg_catalog"."mr-x-icu" (provider = icu, locale = 'mr');


ALTER COLLATION "pg_catalog"."mr-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mr-x-icu" IS 'Marathi';



CREATE COLLATION "pg_catalog"."ms-BN-x-icu" (provider = icu, locale = 'ms-BN');


ALTER COLLATION "pg_catalog"."ms-BN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ms-BN-x-icu" IS 'Malay (Brunei)';



CREATE COLLATION "pg_catalog"."ms-ID-x-icu" (provider = icu, locale = 'ms-ID');


ALTER COLLATION "pg_catalog"."ms-ID-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ms-ID-x-icu" IS 'Malay (Indonesia)';



CREATE COLLATION "pg_catalog"."ms-MY-x-icu" (provider = icu, locale = 'ms-MY');


ALTER COLLATION "pg_catalog"."ms-MY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ms-MY-x-icu" IS 'Malay (Malaysia)';



CREATE COLLATION "pg_catalog"."ms-SG-x-icu" (provider = icu, locale = 'ms-SG');


ALTER COLLATION "pg_catalog"."ms-SG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ms-SG-x-icu" IS 'Malay (Singapore)';



CREATE COLLATION "pg_catalog"."ms-x-icu" (provider = icu, locale = 'ms');


ALTER COLLATION "pg_catalog"."ms-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ms-x-icu" IS 'Malay';



CREATE COLLATION "pg_catalog"."mt-MT-x-icu" (provider = icu, locale = 'mt-MT');


ALTER COLLATION "pg_catalog"."mt-MT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mt-MT-x-icu" IS 'Maltese (Malta)';



CREATE COLLATION "pg_catalog"."mt-x-icu" (provider = icu, locale = 'mt');


ALTER COLLATION "pg_catalog"."mt-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mt-x-icu" IS 'Maltese';



CREATE COLLATION "pg_catalog"."mua-CM-x-icu" (provider = icu, locale = 'mua-CM');


ALTER COLLATION "pg_catalog"."mua-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mua-CM-x-icu" IS 'Mundang (Cameroon)';



CREATE COLLATION "pg_catalog"."mua-x-icu" (provider = icu, locale = 'mua');


ALTER COLLATION "pg_catalog"."mua-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mua-x-icu" IS 'Mundang';



CREATE COLLATION "pg_catalog"."my-MM-x-icu" (provider = icu, locale = 'my-MM');


ALTER COLLATION "pg_catalog"."my-MM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."my-MM-x-icu" IS 'Burmese (Myanmar [Burma])';



CREATE COLLATION "pg_catalog"."my-x-icu" (provider = icu, locale = 'my');


ALTER COLLATION "pg_catalog"."my-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."my-x-icu" IS 'Burmese';



CREATE COLLATION "pg_catalog"."mzn-IR-x-icu" (provider = icu, locale = 'mzn-IR');


ALTER COLLATION "pg_catalog"."mzn-IR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mzn-IR-x-icu" IS 'Mazanderani (Iran)';



CREATE COLLATION "pg_catalog"."mzn-x-icu" (provider = icu, locale = 'mzn');


ALTER COLLATION "pg_catalog"."mzn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."mzn-x-icu" IS 'Mazanderani';



CREATE COLLATION "pg_catalog"."naq-NA-x-icu" (provider = icu, locale = 'naq-NA');


ALTER COLLATION "pg_catalog"."naq-NA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."naq-NA-x-icu" IS 'Nama (Namibia)';



CREATE COLLATION "pg_catalog"."naq-x-icu" (provider = icu, locale = 'naq');


ALTER COLLATION "pg_catalog"."naq-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."naq-x-icu" IS 'Nama';



CREATE COLLATION "pg_catalog"."nb-NO-x-icu" (provider = icu, locale = 'nb-NO');


ALTER COLLATION "pg_catalog"."nb-NO-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."nb-SJ-x-icu" (provider = icu, locale = 'nb-SJ');


ALTER COLLATION "pg_catalog"."nb-SJ-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."nb-x-icu" (provider = icu, locale = 'nb');


ALTER COLLATION "pg_catalog"."nb-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."nd-ZW-x-icu" (provider = icu, locale = 'nd-ZW');


ALTER COLLATION "pg_catalog"."nd-ZW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nd-ZW-x-icu" IS 'North Ndebele (Zimbabwe)';



CREATE COLLATION "pg_catalog"."nd-x-icu" (provider = icu, locale = 'nd');


ALTER COLLATION "pg_catalog"."nd-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nd-x-icu" IS 'North Ndebele';



CREATE COLLATION "pg_catalog"."ne-IN-x-icu" (provider = icu, locale = 'ne-IN');


ALTER COLLATION "pg_catalog"."ne-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ne-IN-x-icu" IS 'Nepali (India)';



CREATE COLLATION "pg_catalog"."ne-NP-x-icu" (provider = icu, locale = 'ne-NP');


ALTER COLLATION "pg_catalog"."ne-NP-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ne-NP-x-icu" IS 'Nepali (Nepal)';



CREATE COLLATION "pg_catalog"."ne-x-icu" (provider = icu, locale = 'ne');


ALTER COLLATION "pg_catalog"."ne-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ne-x-icu" IS 'Nepali';



CREATE COLLATION "pg_catalog"."nl-AW-x-icu" (provider = icu, locale = 'nl-AW');


ALTER COLLATION "pg_catalog"."nl-AW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nl-AW-x-icu" IS 'Dutch (Aruba)';



CREATE COLLATION "pg_catalog"."nl-BE-x-icu" (provider = icu, locale = 'nl-BE');


ALTER COLLATION "pg_catalog"."nl-BE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nl-BE-x-icu" IS 'Dutch (Belgium)';



CREATE COLLATION "pg_catalog"."nl-BQ-x-icu" (provider = icu, locale = 'nl-BQ');


ALTER COLLATION "pg_catalog"."nl-BQ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nl-BQ-x-icu" IS 'Dutch (Caribbean Netherlands)';



CREATE COLLATION "pg_catalog"."nl-CW-x-icu" (provider = icu, locale = 'nl-CW');


ALTER COLLATION "pg_catalog"."nl-CW-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."nl-NL-x-icu" (provider = icu, locale = 'nl-NL');


ALTER COLLATION "pg_catalog"."nl-NL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nl-NL-x-icu" IS 'Dutch (Netherlands)';



CREATE COLLATION "pg_catalog"."nl-SR-x-icu" (provider = icu, locale = 'nl-SR');


ALTER COLLATION "pg_catalog"."nl-SR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nl-SR-x-icu" IS 'Dutch (Suriname)';



CREATE COLLATION "pg_catalog"."nl-SX-x-icu" (provider = icu, locale = 'nl-SX');


ALTER COLLATION "pg_catalog"."nl-SX-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nl-SX-x-icu" IS 'Dutch (Sint Maarten)';



CREATE COLLATION "pg_catalog"."nl-x-icu" (provider = icu, locale = 'nl');


ALTER COLLATION "pg_catalog"."nl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nl-x-icu" IS 'Dutch';



CREATE COLLATION "pg_catalog"."nmg-CM-x-icu" (provider = icu, locale = 'nmg-CM');


ALTER COLLATION "pg_catalog"."nmg-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nmg-CM-x-icu" IS 'Kwasio (Cameroon)';



CREATE COLLATION "pg_catalog"."nmg-x-icu" (provider = icu, locale = 'nmg');


ALTER COLLATION "pg_catalog"."nmg-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nmg-x-icu" IS 'Kwasio';



CREATE COLLATION "pg_catalog"."nn-NO-x-icu" (provider = icu, locale = 'nn-NO');


ALTER COLLATION "pg_catalog"."nn-NO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nn-NO-x-icu" IS 'Norwegian Nynorsk (Norway)';



CREATE COLLATION "pg_catalog"."nn-x-icu" (provider = icu, locale = 'nn');


ALTER COLLATION "pg_catalog"."nn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nn-x-icu" IS 'Norwegian Nynorsk';



CREATE COLLATION "pg_catalog"."nnh-CM-x-icu" (provider = icu, locale = 'nnh-CM');


ALTER COLLATION "pg_catalog"."nnh-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nnh-CM-x-icu" IS 'Ngiemboon (Cameroon)';



CREATE COLLATION "pg_catalog"."nnh-x-icu" (provider = icu, locale = 'nnh');


ALTER COLLATION "pg_catalog"."nnh-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nnh-x-icu" IS 'Ngiemboon';



CREATE COLLATION "pg_catalog"."no-x-icu" (provider = icu, locale = 'no');


ALTER COLLATION "pg_catalog"."no-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."no-x-icu" IS 'Norwegian';



CREATE COLLATION "pg_catalog"."nus-SS-x-icu" (provider = icu, locale = 'nus-SS');


ALTER COLLATION "pg_catalog"."nus-SS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nus-SS-x-icu" IS 'Nuer (South Sudan)';



CREATE COLLATION "pg_catalog"."nus-x-icu" (provider = icu, locale = 'nus');


ALTER COLLATION "pg_catalog"."nus-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nus-x-icu" IS 'Nuer';



CREATE COLLATION "pg_catalog"."nyn-UG-x-icu" (provider = icu, locale = 'nyn-UG');


ALTER COLLATION "pg_catalog"."nyn-UG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nyn-UG-x-icu" IS 'Nyankole (Uganda)';



CREATE COLLATION "pg_catalog"."nyn-x-icu" (provider = icu, locale = 'nyn');


ALTER COLLATION "pg_catalog"."nyn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."nyn-x-icu" IS 'Nyankole';



CREATE COLLATION "pg_catalog"."om-ET-x-icu" (provider = icu, locale = 'om-ET');


ALTER COLLATION "pg_catalog"."om-ET-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."om-ET-x-icu" IS 'Oromo (Ethiopia)';



CREATE COLLATION "pg_catalog"."om-KE-x-icu" (provider = icu, locale = 'om-KE');


ALTER COLLATION "pg_catalog"."om-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."om-KE-x-icu" IS 'Oromo (Kenya)';



CREATE COLLATION "pg_catalog"."om-x-icu" (provider = icu, locale = 'om');


ALTER COLLATION "pg_catalog"."om-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."om-x-icu" IS 'Oromo';



CREATE COLLATION "pg_catalog"."or-IN-x-icu" (provider = icu, locale = 'or-IN');


ALTER COLLATION "pg_catalog"."or-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."or-IN-x-icu" IS 'Odia (India)';



CREATE COLLATION "pg_catalog"."or-x-icu" (provider = icu, locale = 'or');


ALTER COLLATION "pg_catalog"."or-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."or-x-icu" IS 'Odia';



CREATE COLLATION "pg_catalog"."os-GE-x-icu" (provider = icu, locale = 'os-GE');


ALTER COLLATION "pg_catalog"."os-GE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."os-GE-x-icu" IS 'Ossetic (Georgia)';



CREATE COLLATION "pg_catalog"."os-RU-x-icu" (provider = icu, locale = 'os-RU');


ALTER COLLATION "pg_catalog"."os-RU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."os-RU-x-icu" IS 'Ossetic (Russia)';



CREATE COLLATION "pg_catalog"."os-x-icu" (provider = icu, locale = 'os');


ALTER COLLATION "pg_catalog"."os-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."os-x-icu" IS 'Ossetic';



CREATE COLLATION "pg_catalog"."pa-Arab-PK-x-icu" (provider = icu, locale = 'pa-Arab-PK');


ALTER COLLATION "pg_catalog"."pa-Arab-PK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pa-Arab-PK-x-icu" IS 'Punjabi (Arabic, Pakistan)';



CREATE COLLATION "pg_catalog"."pa-Arab-x-icu" (provider = icu, locale = 'pa-Arab');


ALTER COLLATION "pg_catalog"."pa-Arab-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pa-Arab-x-icu" IS 'Punjabi (Arabic)';



CREATE COLLATION "pg_catalog"."pa-Guru-IN-x-icu" (provider = icu, locale = 'pa-Guru-IN');


ALTER COLLATION "pg_catalog"."pa-Guru-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pa-Guru-IN-x-icu" IS 'Punjabi (Gurmukhi, India)';



CREATE COLLATION "pg_catalog"."pa-Guru-x-icu" (provider = icu, locale = 'pa-Guru');


ALTER COLLATION "pg_catalog"."pa-Guru-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pa-Guru-x-icu" IS 'Punjabi (Gurmukhi)';



CREATE COLLATION "pg_catalog"."pa-x-icu" (provider = icu, locale = 'pa');


ALTER COLLATION "pg_catalog"."pa-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pa-x-icu" IS 'Punjabi';



CREATE COLLATION "pg_catalog"."pcm-NG-x-icu" (provider = icu, locale = 'pcm-NG');


ALTER COLLATION "pg_catalog"."pcm-NG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pcm-NG-x-icu" IS 'Nigerian Pidgin (Nigeria)';



CREATE COLLATION "pg_catalog"."pcm-x-icu" (provider = icu, locale = 'pcm');


ALTER COLLATION "pg_catalog"."pcm-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pcm-x-icu" IS 'Nigerian Pidgin';



CREATE COLLATION "pg_catalog"."pg_c_utf8" (provider = builtin, locale = 'C.UTF-8');


ALTER COLLATION "pg_catalog"."pg_c_utf8" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pg_c_utf8" IS 'sorts by Unicode code point; Unicode and POSIX character semantics';



CREATE COLLATION "pg_catalog"."pl-PL-x-icu" (provider = icu, locale = 'pl-PL');


ALTER COLLATION "pg_catalog"."pl-PL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pl-PL-x-icu" IS 'Polish (Poland)';



CREATE COLLATION "pg_catalog"."pl-x-icu" (provider = icu, locale = 'pl');


ALTER COLLATION "pg_catalog"."pl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pl-x-icu" IS 'Polish';



CREATE COLLATION "pg_catalog"."ps-AF-x-icu" (provider = icu, locale = 'ps-AF');


ALTER COLLATION "pg_catalog"."ps-AF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ps-AF-x-icu" IS 'Pashto (Afghanistan)';



CREATE COLLATION "pg_catalog"."ps-PK-x-icu" (provider = icu, locale = 'ps-PK');


ALTER COLLATION "pg_catalog"."ps-PK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ps-PK-x-icu" IS 'Pashto (Pakistan)';



CREATE COLLATION "pg_catalog"."ps-x-icu" (provider = icu, locale = 'ps');


ALTER COLLATION "pg_catalog"."ps-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ps-x-icu" IS 'Pashto';



CREATE COLLATION "pg_catalog"."pt-AO-x-icu" (provider = icu, locale = 'pt-AO');


ALTER COLLATION "pg_catalog"."pt-AO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-AO-x-icu" IS 'Portuguese (Angola)';



CREATE COLLATION "pg_catalog"."pt-BR-x-icu" (provider = icu, locale = 'pt-BR');


ALTER COLLATION "pg_catalog"."pt-BR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-BR-x-icu" IS 'Portuguese (Brazil)';



CREATE COLLATION "pg_catalog"."pt-CH-x-icu" (provider = icu, locale = 'pt-CH');


ALTER COLLATION "pg_catalog"."pt-CH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-CH-x-icu" IS 'Portuguese (Switzerland)';



CREATE COLLATION "pg_catalog"."pt-CV-x-icu" (provider = icu, locale = 'pt-CV');


ALTER COLLATION "pg_catalog"."pt-CV-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-CV-x-icu" IS 'Portuguese (Cape Verde)';



CREATE COLLATION "pg_catalog"."pt-GQ-x-icu" (provider = icu, locale = 'pt-GQ');


ALTER COLLATION "pg_catalog"."pt-GQ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-GQ-x-icu" IS 'Portuguese (Equatorial Guinea)';



CREATE COLLATION "pg_catalog"."pt-GW-x-icu" (provider = icu, locale = 'pt-GW');


ALTER COLLATION "pg_catalog"."pt-GW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-GW-x-icu" IS 'Portuguese (Guinea-Bissau)';



CREATE COLLATION "pg_catalog"."pt-LU-x-icu" (provider = icu, locale = 'pt-LU');


ALTER COLLATION "pg_catalog"."pt-LU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-LU-x-icu" IS 'Portuguese (Luxembourg)';



CREATE COLLATION "pg_catalog"."pt-MO-x-icu" (provider = icu, locale = 'pt-MO');


ALTER COLLATION "pg_catalog"."pt-MO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-MO-x-icu" IS 'Portuguese (Macao SAR China)';



CREATE COLLATION "pg_catalog"."pt-MZ-x-icu" (provider = icu, locale = 'pt-MZ');


ALTER COLLATION "pg_catalog"."pt-MZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-MZ-x-icu" IS 'Portuguese (Mozambique)';



CREATE COLLATION "pg_catalog"."pt-PT-x-icu" (provider = icu, locale = 'pt-PT');


ALTER COLLATION "pg_catalog"."pt-PT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-PT-x-icu" IS 'Portuguese (Portugal)';



CREATE COLLATION "pg_catalog"."pt-ST-x-icu" (provider = icu, locale = 'pt-ST');


ALTER COLLATION "pg_catalog"."pt-ST-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."pt-TL-x-icu" (provider = icu, locale = 'pt-TL');


ALTER COLLATION "pg_catalog"."pt-TL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-TL-x-icu" IS 'Portuguese (Timor-Leste)';



CREATE COLLATION "pg_catalog"."pt-x-icu" (provider = icu, locale = 'pt');


ALTER COLLATION "pg_catalog"."pt-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."pt-x-icu" IS 'Portuguese';



CREATE COLLATION "pg_catalog"."qu-BO-x-icu" (provider = icu, locale = 'qu-BO');


ALTER COLLATION "pg_catalog"."qu-BO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."qu-BO-x-icu" IS 'Quechua (Bolivia)';



CREATE COLLATION "pg_catalog"."qu-EC-x-icu" (provider = icu, locale = 'qu-EC');


ALTER COLLATION "pg_catalog"."qu-EC-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."qu-EC-x-icu" IS 'Quechua (Ecuador)';



CREATE COLLATION "pg_catalog"."qu-PE-x-icu" (provider = icu, locale = 'qu-PE');


ALTER COLLATION "pg_catalog"."qu-PE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."qu-PE-x-icu" IS 'Quechua (Peru)';



CREATE COLLATION "pg_catalog"."qu-x-icu" (provider = icu, locale = 'qu');


ALTER COLLATION "pg_catalog"."qu-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."qu-x-icu" IS 'Quechua';



CREATE COLLATION "pg_catalog"."raj-IN-x-icu" (provider = icu, locale = 'raj-IN');


ALTER COLLATION "pg_catalog"."raj-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."raj-IN-x-icu" IS 'Rajasthani (India)';



CREATE COLLATION "pg_catalog"."raj-x-icu" (provider = icu, locale = 'raj');


ALTER COLLATION "pg_catalog"."raj-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."raj-x-icu" IS 'Rajasthani';



CREATE COLLATION "pg_catalog"."rm-CH-x-icu" (provider = icu, locale = 'rm-CH');


ALTER COLLATION "pg_catalog"."rm-CH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rm-CH-x-icu" IS 'Romansh (Switzerland)';



CREATE COLLATION "pg_catalog"."rm-x-icu" (provider = icu, locale = 'rm');


ALTER COLLATION "pg_catalog"."rm-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rm-x-icu" IS 'Romansh';



CREATE COLLATION "pg_catalog"."rn-BI-x-icu" (provider = icu, locale = 'rn-BI');


ALTER COLLATION "pg_catalog"."rn-BI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rn-BI-x-icu" IS 'Rundi (Burundi)';



CREATE COLLATION "pg_catalog"."rn-x-icu" (provider = icu, locale = 'rn');


ALTER COLLATION "pg_catalog"."rn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rn-x-icu" IS 'Rundi';



CREATE COLLATION "pg_catalog"."ro-MD-x-icu" (provider = icu, locale = 'ro-MD');


ALTER COLLATION "pg_catalog"."ro-MD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ro-MD-x-icu" IS 'Romanian (Moldova)';



CREATE COLLATION "pg_catalog"."ro-RO-x-icu" (provider = icu, locale = 'ro-RO');


ALTER COLLATION "pg_catalog"."ro-RO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ro-RO-x-icu" IS 'Romanian (Romania)';



CREATE COLLATION "pg_catalog"."ro-x-icu" (provider = icu, locale = 'ro');


ALTER COLLATION "pg_catalog"."ro-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ro-x-icu" IS 'Romanian';



CREATE COLLATION "pg_catalog"."rof-TZ-x-icu" (provider = icu, locale = 'rof-TZ');


ALTER COLLATION "pg_catalog"."rof-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rof-TZ-x-icu" IS 'Rombo (Tanzania)';



CREATE COLLATION "pg_catalog"."rof-x-icu" (provider = icu, locale = 'rof');


ALTER COLLATION "pg_catalog"."rof-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rof-x-icu" IS 'Rombo';



CREATE COLLATION "pg_catalog"."ru-BY-x-icu" (provider = icu, locale = 'ru-BY');


ALTER COLLATION "pg_catalog"."ru-BY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ru-BY-x-icu" IS 'Russian (Belarus)';



CREATE COLLATION "pg_catalog"."ru-KG-x-icu" (provider = icu, locale = 'ru-KG');


ALTER COLLATION "pg_catalog"."ru-KG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ru-KG-x-icu" IS 'Russian (Kyrgyzstan)';



CREATE COLLATION "pg_catalog"."ru-KZ-x-icu" (provider = icu, locale = 'ru-KZ');


ALTER COLLATION "pg_catalog"."ru-KZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ru-KZ-x-icu" IS 'Russian (Kazakhstan)';



CREATE COLLATION "pg_catalog"."ru-MD-x-icu" (provider = icu, locale = 'ru-MD');


ALTER COLLATION "pg_catalog"."ru-MD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ru-MD-x-icu" IS 'Russian (Moldova)';



CREATE COLLATION "pg_catalog"."ru-RU-x-icu" (provider = icu, locale = 'ru-RU');


ALTER COLLATION "pg_catalog"."ru-RU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ru-RU-x-icu" IS 'Russian (Russia)';



CREATE COLLATION "pg_catalog"."ru-UA-x-icu" (provider = icu, locale = 'ru-UA');


ALTER COLLATION "pg_catalog"."ru-UA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ru-UA-x-icu" IS 'Russian (Ukraine)';



CREATE COLLATION "pg_catalog"."ru-x-icu" (provider = icu, locale = 'ru');


ALTER COLLATION "pg_catalog"."ru-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ru-x-icu" IS 'Russian';



CREATE COLLATION "pg_catalog"."rw-RW-x-icu" (provider = icu, locale = 'rw-RW');


ALTER COLLATION "pg_catalog"."rw-RW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rw-RW-x-icu" IS 'Kinyarwanda (Rwanda)';



CREATE COLLATION "pg_catalog"."rw-x-icu" (provider = icu, locale = 'rw');


ALTER COLLATION "pg_catalog"."rw-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rw-x-icu" IS 'Kinyarwanda';



CREATE COLLATION "pg_catalog"."rwk-TZ-x-icu" (provider = icu, locale = 'rwk-TZ');


ALTER COLLATION "pg_catalog"."rwk-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rwk-TZ-x-icu" IS 'Rwa (Tanzania)';



CREATE COLLATION "pg_catalog"."rwk-x-icu" (provider = icu, locale = 'rwk');


ALTER COLLATION "pg_catalog"."rwk-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."rwk-x-icu" IS 'Rwa';



CREATE COLLATION "pg_catalog"."sa-IN-x-icu" (provider = icu, locale = 'sa-IN');


ALTER COLLATION "pg_catalog"."sa-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sa-IN-x-icu" IS 'Sanskrit (India)';



CREATE COLLATION "pg_catalog"."sa-x-icu" (provider = icu, locale = 'sa');


ALTER COLLATION "pg_catalog"."sa-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sa-x-icu" IS 'Sanskrit';



CREATE COLLATION "pg_catalog"."sah-RU-x-icu" (provider = icu, locale = 'sah-RU');


ALTER COLLATION "pg_catalog"."sah-RU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sah-RU-x-icu" IS 'Yakut (Russia)';



CREATE COLLATION "pg_catalog"."sah-x-icu" (provider = icu, locale = 'sah');


ALTER COLLATION "pg_catalog"."sah-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sah-x-icu" IS 'Yakut';



CREATE COLLATION "pg_catalog"."saq-KE-x-icu" (provider = icu, locale = 'saq-KE');


ALTER COLLATION "pg_catalog"."saq-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."saq-KE-x-icu" IS 'Samburu (Kenya)';



CREATE COLLATION "pg_catalog"."saq-x-icu" (provider = icu, locale = 'saq');


ALTER COLLATION "pg_catalog"."saq-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."saq-x-icu" IS 'Samburu';



CREATE COLLATION "pg_catalog"."sat-Olck-IN-x-icu" (provider = icu, locale = 'sat-Olck-IN');


ALTER COLLATION "pg_catalog"."sat-Olck-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sat-Olck-IN-x-icu" IS 'Santali (Ol Chiki, India)';



CREATE COLLATION "pg_catalog"."sat-Olck-x-icu" (provider = icu, locale = 'sat-Olck');


ALTER COLLATION "pg_catalog"."sat-Olck-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sat-Olck-x-icu" IS 'Santali (Ol Chiki)';



CREATE COLLATION "pg_catalog"."sat-x-icu" (provider = icu, locale = 'sat');


ALTER COLLATION "pg_catalog"."sat-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sat-x-icu" IS 'Santali';



CREATE COLLATION "pg_catalog"."sbp-TZ-x-icu" (provider = icu, locale = 'sbp-TZ');


ALTER COLLATION "pg_catalog"."sbp-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sbp-TZ-x-icu" IS 'Sangu (Tanzania)';



CREATE COLLATION "pg_catalog"."sbp-x-icu" (provider = icu, locale = 'sbp');


ALTER COLLATION "pg_catalog"."sbp-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sbp-x-icu" IS 'Sangu';



CREATE COLLATION "pg_catalog"."sc-IT-x-icu" (provider = icu, locale = 'sc-IT');


ALTER COLLATION "pg_catalog"."sc-IT-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sc-IT-x-icu" IS 'Sardinian (Italy)';



CREATE COLLATION "pg_catalog"."sc-x-icu" (provider = icu, locale = 'sc');


ALTER COLLATION "pg_catalog"."sc-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sc-x-icu" IS 'Sardinian';



CREATE COLLATION "pg_catalog"."sd-Arab-PK-x-icu" (provider = icu, locale = 'sd-Arab-PK');


ALTER COLLATION "pg_catalog"."sd-Arab-PK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sd-Arab-PK-x-icu" IS 'Sindhi (Arabic, Pakistan)';



CREATE COLLATION "pg_catalog"."sd-Arab-x-icu" (provider = icu, locale = 'sd-Arab');


ALTER COLLATION "pg_catalog"."sd-Arab-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sd-Arab-x-icu" IS 'Sindhi (Arabic)';



CREATE COLLATION "pg_catalog"."sd-Deva-IN-x-icu" (provider = icu, locale = 'sd-Deva-IN');


ALTER COLLATION "pg_catalog"."sd-Deva-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sd-Deva-IN-x-icu" IS 'Sindhi (Devanagari, India)';



CREATE COLLATION "pg_catalog"."sd-Deva-x-icu" (provider = icu, locale = 'sd-Deva');


ALTER COLLATION "pg_catalog"."sd-Deva-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sd-Deva-x-icu" IS 'Sindhi (Devanagari)';



CREATE COLLATION "pg_catalog"."sd-x-icu" (provider = icu, locale = 'sd');


ALTER COLLATION "pg_catalog"."sd-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sd-x-icu" IS 'Sindhi';



CREATE COLLATION "pg_catalog"."se-FI-x-icu" (provider = icu, locale = 'se-FI');


ALTER COLLATION "pg_catalog"."se-FI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."se-FI-x-icu" IS 'Northern Sami (Finland)';



CREATE COLLATION "pg_catalog"."se-NO-x-icu" (provider = icu, locale = 'se-NO');


ALTER COLLATION "pg_catalog"."se-NO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."se-NO-x-icu" IS 'Northern Sami (Norway)';



CREATE COLLATION "pg_catalog"."se-SE-x-icu" (provider = icu, locale = 'se-SE');


ALTER COLLATION "pg_catalog"."se-SE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."se-SE-x-icu" IS 'Northern Sami (Sweden)';



CREATE COLLATION "pg_catalog"."se-x-icu" (provider = icu, locale = 'se');


ALTER COLLATION "pg_catalog"."se-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."se-x-icu" IS 'Northern Sami';



CREATE COLLATION "pg_catalog"."seh-MZ-x-icu" (provider = icu, locale = 'seh-MZ');


ALTER COLLATION "pg_catalog"."seh-MZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."seh-MZ-x-icu" IS 'Sena (Mozambique)';



CREATE COLLATION "pg_catalog"."seh-x-icu" (provider = icu, locale = 'seh');


ALTER COLLATION "pg_catalog"."seh-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."seh-x-icu" IS 'Sena';



CREATE COLLATION "pg_catalog"."ses-ML-x-icu" (provider = icu, locale = 'ses-ML');


ALTER COLLATION "pg_catalog"."ses-ML-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ses-ML-x-icu" IS 'Koyraboro Senni (Mali)';



CREATE COLLATION "pg_catalog"."ses-x-icu" (provider = icu, locale = 'ses');


ALTER COLLATION "pg_catalog"."ses-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ses-x-icu" IS 'Koyraboro Senni';



CREATE COLLATION "pg_catalog"."sg-CF-x-icu" (provider = icu, locale = 'sg-CF');


ALTER COLLATION "pg_catalog"."sg-CF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sg-CF-x-icu" IS 'Sango (Central African Republic)';



CREATE COLLATION "pg_catalog"."sg-x-icu" (provider = icu, locale = 'sg');


ALTER COLLATION "pg_catalog"."sg-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sg-x-icu" IS 'Sango';



CREATE COLLATION "pg_catalog"."shi-Latn-MA-x-icu" (provider = icu, locale = 'shi-Latn-MA');


ALTER COLLATION "pg_catalog"."shi-Latn-MA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."shi-Latn-MA-x-icu" IS 'Tachelhit (Latin, Morocco)';



CREATE COLLATION "pg_catalog"."shi-Latn-x-icu" (provider = icu, locale = 'shi-Latn');


ALTER COLLATION "pg_catalog"."shi-Latn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."shi-Latn-x-icu" IS 'Tachelhit (Latin)';



CREATE COLLATION "pg_catalog"."shi-Tfng-MA-x-icu" (provider = icu, locale = 'shi-Tfng-MA');


ALTER COLLATION "pg_catalog"."shi-Tfng-MA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."shi-Tfng-MA-x-icu" IS 'Tachelhit (Tifinagh, Morocco)';



CREATE COLLATION "pg_catalog"."shi-Tfng-x-icu" (provider = icu, locale = 'shi-Tfng');


ALTER COLLATION "pg_catalog"."shi-Tfng-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."shi-Tfng-x-icu" IS 'Tachelhit (Tifinagh)';



CREATE COLLATION "pg_catalog"."shi-x-icu" (provider = icu, locale = 'shi');


ALTER COLLATION "pg_catalog"."shi-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."shi-x-icu" IS 'Tachelhit';



CREATE COLLATION "pg_catalog"."si-LK-x-icu" (provider = icu, locale = 'si-LK');


ALTER COLLATION "pg_catalog"."si-LK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."si-LK-x-icu" IS 'Sinhala (Sri Lanka)';



CREATE COLLATION "pg_catalog"."si-x-icu" (provider = icu, locale = 'si');


ALTER COLLATION "pg_catalog"."si-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."si-x-icu" IS 'Sinhala';



CREATE COLLATION "pg_catalog"."sk-SK-x-icu" (provider = icu, locale = 'sk-SK');


ALTER COLLATION "pg_catalog"."sk-SK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sk-SK-x-icu" IS 'Slovak (Slovakia)';



CREATE COLLATION "pg_catalog"."sk-x-icu" (provider = icu, locale = 'sk');


ALTER COLLATION "pg_catalog"."sk-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sk-x-icu" IS 'Slovak';



CREATE COLLATION "pg_catalog"."sl-SI-x-icu" (provider = icu, locale = 'sl-SI');


ALTER COLLATION "pg_catalog"."sl-SI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sl-SI-x-icu" IS 'Slovenian (Slovenia)';



CREATE COLLATION "pg_catalog"."sl-x-icu" (provider = icu, locale = 'sl');


ALTER COLLATION "pg_catalog"."sl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sl-x-icu" IS 'Slovenian';



CREATE COLLATION "pg_catalog"."smn-FI-x-icu" (provider = icu, locale = 'smn-FI');


ALTER COLLATION "pg_catalog"."smn-FI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."smn-FI-x-icu" IS 'Inari Sami (Finland)';



CREATE COLLATION "pg_catalog"."smn-x-icu" (provider = icu, locale = 'smn');


ALTER COLLATION "pg_catalog"."smn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."smn-x-icu" IS 'Inari Sami';



CREATE COLLATION "pg_catalog"."sn-ZW-x-icu" (provider = icu, locale = 'sn-ZW');


ALTER COLLATION "pg_catalog"."sn-ZW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sn-ZW-x-icu" IS 'Shona (Zimbabwe)';



CREATE COLLATION "pg_catalog"."sn-x-icu" (provider = icu, locale = 'sn');


ALTER COLLATION "pg_catalog"."sn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sn-x-icu" IS 'Shona';



CREATE COLLATION "pg_catalog"."so-DJ-x-icu" (provider = icu, locale = 'so-DJ');


ALTER COLLATION "pg_catalog"."so-DJ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."so-DJ-x-icu" IS 'Somali (Djibouti)';



CREATE COLLATION "pg_catalog"."so-ET-x-icu" (provider = icu, locale = 'so-ET');


ALTER COLLATION "pg_catalog"."so-ET-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."so-ET-x-icu" IS 'Somali (Ethiopia)';



CREATE COLLATION "pg_catalog"."so-KE-x-icu" (provider = icu, locale = 'so-KE');


ALTER COLLATION "pg_catalog"."so-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."so-KE-x-icu" IS 'Somali (Kenya)';



CREATE COLLATION "pg_catalog"."so-SO-x-icu" (provider = icu, locale = 'so-SO');


ALTER COLLATION "pg_catalog"."so-SO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."so-SO-x-icu" IS 'Somali (Somalia)';



CREATE COLLATION "pg_catalog"."so-x-icu" (provider = icu, locale = 'so');


ALTER COLLATION "pg_catalog"."so-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."so-x-icu" IS 'Somali';



CREATE COLLATION "pg_catalog"."sq-AL-x-icu" (provider = icu, locale = 'sq-AL');


ALTER COLLATION "pg_catalog"."sq-AL-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sq-AL-x-icu" IS 'Albanian (Albania)';



CREATE COLLATION "pg_catalog"."sq-MK-x-icu" (provider = icu, locale = 'sq-MK');


ALTER COLLATION "pg_catalog"."sq-MK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sq-MK-x-icu" IS 'Albanian (North Macedonia)';



CREATE COLLATION "pg_catalog"."sq-XK-x-icu" (provider = icu, locale = 'sq-XK');


ALTER COLLATION "pg_catalog"."sq-XK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sq-XK-x-icu" IS 'Albanian (Kosovo)';



CREATE COLLATION "pg_catalog"."sq-x-icu" (provider = icu, locale = 'sq');


ALTER COLLATION "pg_catalog"."sq-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sq-x-icu" IS 'Albanian';



CREATE COLLATION "pg_catalog"."sr-Cyrl-BA-x-icu" (provider = icu, locale = 'sr-Cyrl-BA');


ALTER COLLATION "pg_catalog"."sr-Cyrl-BA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Cyrl-BA-x-icu" IS 'Serbian (Cyrillic, Bosnia & Herzegovina)';



CREATE COLLATION "pg_catalog"."sr-Cyrl-ME-x-icu" (provider = icu, locale = 'sr-Cyrl-ME');


ALTER COLLATION "pg_catalog"."sr-Cyrl-ME-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Cyrl-ME-x-icu" IS 'Serbian (Cyrillic, Montenegro)';



CREATE COLLATION "pg_catalog"."sr-Cyrl-RS-x-icu" (provider = icu, locale = 'sr-Cyrl-RS');


ALTER COLLATION "pg_catalog"."sr-Cyrl-RS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Cyrl-RS-x-icu" IS 'Serbian (Cyrillic, Serbia)';



CREATE COLLATION "pg_catalog"."sr-Cyrl-XK-x-icu" (provider = icu, locale = 'sr-Cyrl-XK');


ALTER COLLATION "pg_catalog"."sr-Cyrl-XK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Cyrl-XK-x-icu" IS 'Serbian (Cyrillic, Kosovo)';



CREATE COLLATION "pg_catalog"."sr-Cyrl-x-icu" (provider = icu, locale = 'sr-Cyrl');


ALTER COLLATION "pg_catalog"."sr-Cyrl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Cyrl-x-icu" IS 'Serbian (Cyrillic)';



CREATE COLLATION "pg_catalog"."sr-Latn-BA-x-icu" (provider = icu, locale = 'sr-Latn-BA');


ALTER COLLATION "pg_catalog"."sr-Latn-BA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Latn-BA-x-icu" IS 'Serbian (Latin, Bosnia & Herzegovina)';



CREATE COLLATION "pg_catalog"."sr-Latn-ME-x-icu" (provider = icu, locale = 'sr-Latn-ME');


ALTER COLLATION "pg_catalog"."sr-Latn-ME-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Latn-ME-x-icu" IS 'Serbian (Latin, Montenegro)';



CREATE COLLATION "pg_catalog"."sr-Latn-RS-x-icu" (provider = icu, locale = 'sr-Latn-RS');


ALTER COLLATION "pg_catalog"."sr-Latn-RS-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Latn-RS-x-icu" IS 'Serbian (Latin, Serbia)';



CREATE COLLATION "pg_catalog"."sr-Latn-XK-x-icu" (provider = icu, locale = 'sr-Latn-XK');


ALTER COLLATION "pg_catalog"."sr-Latn-XK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Latn-XK-x-icu" IS 'Serbian (Latin, Kosovo)';



CREATE COLLATION "pg_catalog"."sr-Latn-x-icu" (provider = icu, locale = 'sr-Latn');


ALTER COLLATION "pg_catalog"."sr-Latn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-Latn-x-icu" IS 'Serbian (Latin)';



CREATE COLLATION "pg_catalog"."sr-x-icu" (provider = icu, locale = 'sr');


ALTER COLLATION "pg_catalog"."sr-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sr-x-icu" IS 'Serbian';



CREATE COLLATION "pg_catalog"."su-Latn-ID-x-icu" (provider = icu, locale = 'su-Latn-ID');


ALTER COLLATION "pg_catalog"."su-Latn-ID-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."su-Latn-ID-x-icu" IS 'Sundanese (Latin, Indonesia)';



CREATE COLLATION "pg_catalog"."su-Latn-x-icu" (provider = icu, locale = 'su-Latn');


ALTER COLLATION "pg_catalog"."su-Latn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."su-Latn-x-icu" IS 'Sundanese (Latin)';



CREATE COLLATION "pg_catalog"."su-x-icu" (provider = icu, locale = 'su');


ALTER COLLATION "pg_catalog"."su-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."su-x-icu" IS 'Sundanese';



CREATE COLLATION "pg_catalog"."sv-AX-x-icu" (provider = icu, locale = 'sv-AX');


ALTER COLLATION "pg_catalog"."sv-AX-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."sv-FI-x-icu" (provider = icu, locale = 'sv-FI');


ALTER COLLATION "pg_catalog"."sv-FI-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sv-FI-x-icu" IS 'Swedish (Finland)';



CREATE COLLATION "pg_catalog"."sv-SE-x-icu" (provider = icu, locale = 'sv-SE');


ALTER COLLATION "pg_catalog"."sv-SE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sv-SE-x-icu" IS 'Swedish (Sweden)';



CREATE COLLATION "pg_catalog"."sv-x-icu" (provider = icu, locale = 'sv');


ALTER COLLATION "pg_catalog"."sv-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sv-x-icu" IS 'Swedish';



CREATE COLLATION "pg_catalog"."sw-CD-x-icu" (provider = icu, locale = 'sw-CD');


ALTER COLLATION "pg_catalog"."sw-CD-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sw-CD-x-icu" IS 'Swahili (Congo - Kinshasa)';



CREATE COLLATION "pg_catalog"."sw-KE-x-icu" (provider = icu, locale = 'sw-KE');


ALTER COLLATION "pg_catalog"."sw-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sw-KE-x-icu" IS 'Swahili (Kenya)';



CREATE COLLATION "pg_catalog"."sw-TZ-x-icu" (provider = icu, locale = 'sw-TZ');


ALTER COLLATION "pg_catalog"."sw-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sw-TZ-x-icu" IS 'Swahili (Tanzania)';



CREATE COLLATION "pg_catalog"."sw-UG-x-icu" (provider = icu, locale = 'sw-UG');


ALTER COLLATION "pg_catalog"."sw-UG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sw-UG-x-icu" IS 'Swahili (Uganda)';



CREATE COLLATION "pg_catalog"."sw-x-icu" (provider = icu, locale = 'sw');


ALTER COLLATION "pg_catalog"."sw-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."sw-x-icu" IS 'Swahili';



CREATE COLLATION "pg_catalog"."ta-IN-x-icu" (provider = icu, locale = 'ta-IN');


ALTER COLLATION "pg_catalog"."ta-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ta-IN-x-icu" IS 'Tamil (India)';



CREATE COLLATION "pg_catalog"."ta-LK-x-icu" (provider = icu, locale = 'ta-LK');


ALTER COLLATION "pg_catalog"."ta-LK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ta-LK-x-icu" IS 'Tamil (Sri Lanka)';



CREATE COLLATION "pg_catalog"."ta-MY-x-icu" (provider = icu, locale = 'ta-MY');


ALTER COLLATION "pg_catalog"."ta-MY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ta-MY-x-icu" IS 'Tamil (Malaysia)';



CREATE COLLATION "pg_catalog"."ta-SG-x-icu" (provider = icu, locale = 'ta-SG');


ALTER COLLATION "pg_catalog"."ta-SG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ta-SG-x-icu" IS 'Tamil (Singapore)';



CREATE COLLATION "pg_catalog"."ta-x-icu" (provider = icu, locale = 'ta');


ALTER COLLATION "pg_catalog"."ta-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ta-x-icu" IS 'Tamil';



CREATE COLLATION "pg_catalog"."te-IN-x-icu" (provider = icu, locale = 'te-IN');


ALTER COLLATION "pg_catalog"."te-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."te-IN-x-icu" IS 'Telugu (India)';



CREATE COLLATION "pg_catalog"."te-x-icu" (provider = icu, locale = 'te');


ALTER COLLATION "pg_catalog"."te-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."te-x-icu" IS 'Telugu';



CREATE COLLATION "pg_catalog"."teo-KE-x-icu" (provider = icu, locale = 'teo-KE');


ALTER COLLATION "pg_catalog"."teo-KE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."teo-KE-x-icu" IS 'Teso (Kenya)';



CREATE COLLATION "pg_catalog"."teo-UG-x-icu" (provider = icu, locale = 'teo-UG');


ALTER COLLATION "pg_catalog"."teo-UG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."teo-UG-x-icu" IS 'Teso (Uganda)';



CREATE COLLATION "pg_catalog"."teo-x-icu" (provider = icu, locale = 'teo');


ALTER COLLATION "pg_catalog"."teo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."teo-x-icu" IS 'Teso';



CREATE COLLATION "pg_catalog"."tg-TJ-x-icu" (provider = icu, locale = 'tg-TJ');


ALTER COLLATION "pg_catalog"."tg-TJ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tg-TJ-x-icu" IS 'Tajik (Tajikistan)';



CREATE COLLATION "pg_catalog"."tg-x-icu" (provider = icu, locale = 'tg');


ALTER COLLATION "pg_catalog"."tg-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tg-x-icu" IS 'Tajik';



CREATE COLLATION "pg_catalog"."th-TH-x-icu" (provider = icu, locale = 'th-TH');


ALTER COLLATION "pg_catalog"."th-TH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."th-TH-x-icu" IS 'Thai (Thailand)';



CREATE COLLATION "pg_catalog"."th-x-icu" (provider = icu, locale = 'th');


ALTER COLLATION "pg_catalog"."th-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."th-x-icu" IS 'Thai';



CREATE COLLATION "pg_catalog"."ti-ER-x-icu" (provider = icu, locale = 'ti-ER');


ALTER COLLATION "pg_catalog"."ti-ER-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ti-ER-x-icu" IS 'Tigrinya (Eritrea)';



CREATE COLLATION "pg_catalog"."ti-ET-x-icu" (provider = icu, locale = 'ti-ET');


ALTER COLLATION "pg_catalog"."ti-ET-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ti-ET-x-icu" IS 'Tigrinya (Ethiopia)';



CREATE COLLATION "pg_catalog"."ti-x-icu" (provider = icu, locale = 'ti');


ALTER COLLATION "pg_catalog"."ti-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ti-x-icu" IS 'Tigrinya';



CREATE COLLATION "pg_catalog"."tk-TM-x-icu" (provider = icu, locale = 'tk-TM');


ALTER COLLATION "pg_catalog"."tk-TM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tk-TM-x-icu" IS 'Turkmen (Turkmenistan)';



CREATE COLLATION "pg_catalog"."tk-x-icu" (provider = icu, locale = 'tk');


ALTER COLLATION "pg_catalog"."tk-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tk-x-icu" IS 'Turkmen';



CREATE COLLATION "pg_catalog"."to-TO-x-icu" (provider = icu, locale = 'to-TO');


ALTER COLLATION "pg_catalog"."to-TO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."to-TO-x-icu" IS 'Tongan (Tonga)';



CREATE COLLATION "pg_catalog"."to-x-icu" (provider = icu, locale = 'to');


ALTER COLLATION "pg_catalog"."to-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."to-x-icu" IS 'Tongan';



CREATE COLLATION "pg_catalog"."tr-CY-x-icu" (provider = icu, locale = 'tr-CY');


ALTER COLLATION "pg_catalog"."tr-CY-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tr-CY-x-icu" IS 'Turkish (Cyprus)';



CREATE COLLATION "pg_catalog"."tr-TR-x-icu" (provider = icu, locale = 'tr-TR');


ALTER COLLATION "pg_catalog"."tr-TR-x-icu" OWNER TO "supabase_admin";


CREATE COLLATION "pg_catalog"."tr-x-icu" (provider = icu, locale = 'tr');


ALTER COLLATION "pg_catalog"."tr-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tr-x-icu" IS 'Turkish';



CREATE COLLATION "pg_catalog"."tt-RU-x-icu" (provider = icu, locale = 'tt-RU');


ALTER COLLATION "pg_catalog"."tt-RU-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tt-RU-x-icu" IS 'Tatar (Russia)';



CREATE COLLATION "pg_catalog"."tt-x-icu" (provider = icu, locale = 'tt');


ALTER COLLATION "pg_catalog"."tt-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tt-x-icu" IS 'Tatar';



CREATE COLLATION "pg_catalog"."twq-NE-x-icu" (provider = icu, locale = 'twq-NE');


ALTER COLLATION "pg_catalog"."twq-NE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."twq-NE-x-icu" IS 'Tasawaq (Niger)';



CREATE COLLATION "pg_catalog"."twq-x-icu" (provider = icu, locale = 'twq');


ALTER COLLATION "pg_catalog"."twq-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."twq-x-icu" IS 'Tasawaq';



CREATE COLLATION "pg_catalog"."tzm-MA-x-icu" (provider = icu, locale = 'tzm-MA');


ALTER COLLATION "pg_catalog"."tzm-MA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tzm-MA-x-icu" IS 'Central Atlas Tamazight (Morocco)';



CREATE COLLATION "pg_catalog"."tzm-x-icu" (provider = icu, locale = 'tzm');


ALTER COLLATION "pg_catalog"."tzm-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."tzm-x-icu" IS 'Central Atlas Tamazight';



CREATE COLLATION "pg_catalog"."ucs_basic" (provider = builtin, locale = 'C');


ALTER COLLATION "pg_catalog"."ucs_basic" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ucs_basic" IS 'sorts by Unicode code point, C character semantics';



CREATE COLLATION "pg_catalog"."ug-CN-x-icu" (provider = icu, locale = 'ug-CN');


ALTER COLLATION "pg_catalog"."ug-CN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ug-CN-x-icu" IS 'Uyghur (China)';



CREATE COLLATION "pg_catalog"."ug-x-icu" (provider = icu, locale = 'ug');


ALTER COLLATION "pg_catalog"."ug-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ug-x-icu" IS 'Uyghur';



CREATE COLLATION "pg_catalog"."uk-UA-x-icu" (provider = icu, locale = 'uk-UA');


ALTER COLLATION "pg_catalog"."uk-UA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."uk-UA-x-icu" IS 'Ukrainian (Ukraine)';



CREATE COLLATION "pg_catalog"."uk-x-icu" (provider = icu, locale = 'uk');


ALTER COLLATION "pg_catalog"."uk-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."uk-x-icu" IS 'Ukrainian';



CREATE COLLATION "pg_catalog"."und-x-icu" (provider = icu, locale = 'und');


ALTER COLLATION "pg_catalog"."und-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."und-x-icu" IS 'Unknown language';



CREATE COLLATION "pg_catalog"."unicode" (provider = icu, locale = 'und');


ALTER COLLATION "pg_catalog"."unicode" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."unicode" IS 'sorts using the Unicode Collation Algorithm with default settings';



CREATE COLLATION "pg_catalog"."ur-IN-x-icu" (provider = icu, locale = 'ur-IN');


ALTER COLLATION "pg_catalog"."ur-IN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ur-IN-x-icu" IS 'Urdu (India)';



CREATE COLLATION "pg_catalog"."ur-PK-x-icu" (provider = icu, locale = 'ur-PK');


ALTER COLLATION "pg_catalog"."ur-PK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ur-PK-x-icu" IS 'Urdu (Pakistan)';



CREATE COLLATION "pg_catalog"."ur-x-icu" (provider = icu, locale = 'ur');


ALTER COLLATION "pg_catalog"."ur-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."ur-x-icu" IS 'Urdu';



CREATE COLLATION "pg_catalog"."uz-Arab-AF-x-icu" (provider = icu, locale = 'uz-Arab-AF');


ALTER COLLATION "pg_catalog"."uz-Arab-AF-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."uz-Arab-AF-x-icu" IS 'Uzbek (Arabic, Afghanistan)';



CREATE COLLATION "pg_catalog"."uz-Arab-x-icu" (provider = icu, locale = 'uz-Arab');


ALTER COLLATION "pg_catalog"."uz-Arab-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."uz-Arab-x-icu" IS 'Uzbek (Arabic)';



CREATE COLLATION "pg_catalog"."uz-Cyrl-UZ-x-icu" (provider = icu, locale = 'uz-Cyrl-UZ');


ALTER COLLATION "pg_catalog"."uz-Cyrl-UZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."uz-Cyrl-UZ-x-icu" IS 'Uzbek (Cyrillic, Uzbekistan)';



CREATE COLLATION "pg_catalog"."uz-Cyrl-x-icu" (provider = icu, locale = 'uz-Cyrl');


ALTER COLLATION "pg_catalog"."uz-Cyrl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."uz-Cyrl-x-icu" IS 'Uzbek (Cyrillic)';



CREATE COLLATION "pg_catalog"."uz-Latn-UZ-x-icu" (provider = icu, locale = 'uz-Latn-UZ');


ALTER COLLATION "pg_catalog"."uz-Latn-UZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."uz-Latn-UZ-x-icu" IS 'Uzbek (Latin, Uzbekistan)';



CREATE COLLATION "pg_catalog"."uz-Latn-x-icu" (provider = icu, locale = 'uz-Latn');


ALTER COLLATION "pg_catalog"."uz-Latn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."uz-Latn-x-icu" IS 'Uzbek (Latin)';



CREATE COLLATION "pg_catalog"."uz-x-icu" (provider = icu, locale = 'uz');


ALTER COLLATION "pg_catalog"."uz-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."uz-x-icu" IS 'Uzbek';



CREATE COLLATION "pg_catalog"."vai-Latn-LR-x-icu" (provider = icu, locale = 'vai-Latn-LR');


ALTER COLLATION "pg_catalog"."vai-Latn-LR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."vai-Latn-LR-x-icu" IS 'Vai (Latin, Liberia)';



CREATE COLLATION "pg_catalog"."vai-Latn-x-icu" (provider = icu, locale = 'vai-Latn');


ALTER COLLATION "pg_catalog"."vai-Latn-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."vai-Latn-x-icu" IS 'Vai (Latin)';



CREATE COLLATION "pg_catalog"."vai-Vaii-LR-x-icu" (provider = icu, locale = 'vai-Vaii-LR');


ALTER COLLATION "pg_catalog"."vai-Vaii-LR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."vai-Vaii-LR-x-icu" IS 'Vai (Vai, Liberia)';



CREATE COLLATION "pg_catalog"."vai-Vaii-x-icu" (provider = icu, locale = 'vai-Vaii');


ALTER COLLATION "pg_catalog"."vai-Vaii-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."vai-Vaii-x-icu" IS 'Vai (Vai)';



CREATE COLLATION "pg_catalog"."vai-x-icu" (provider = icu, locale = 'vai');


ALTER COLLATION "pg_catalog"."vai-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."vai-x-icu" IS 'Vai';



CREATE COLLATION "pg_catalog"."vi-VN-x-icu" (provider = icu, locale = 'vi-VN');


ALTER COLLATION "pg_catalog"."vi-VN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."vi-VN-x-icu" IS 'Vietnamese (Vietnam)';



CREATE COLLATION "pg_catalog"."vi-x-icu" (provider = icu, locale = 'vi');


ALTER COLLATION "pg_catalog"."vi-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."vi-x-icu" IS 'Vietnamese';



CREATE COLLATION "pg_catalog"."vun-TZ-x-icu" (provider = icu, locale = 'vun-TZ');


ALTER COLLATION "pg_catalog"."vun-TZ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."vun-TZ-x-icu" IS 'Vunjo (Tanzania)';



CREATE COLLATION "pg_catalog"."vun-x-icu" (provider = icu, locale = 'vun');


ALTER COLLATION "pg_catalog"."vun-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."vun-x-icu" IS 'Vunjo';



CREATE COLLATION "pg_catalog"."wae-CH-x-icu" (provider = icu, locale = 'wae-CH');


ALTER COLLATION "pg_catalog"."wae-CH-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."wae-CH-x-icu" IS 'Walser (Switzerland)';



CREATE COLLATION "pg_catalog"."wae-x-icu" (provider = icu, locale = 'wae');


ALTER COLLATION "pg_catalog"."wae-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."wae-x-icu" IS 'Walser';



CREATE COLLATION "pg_catalog"."wo-SN-x-icu" (provider = icu, locale = 'wo-SN');


ALTER COLLATION "pg_catalog"."wo-SN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."wo-SN-x-icu" IS 'Wolof (Senegal)';



CREATE COLLATION "pg_catalog"."wo-x-icu" (provider = icu, locale = 'wo');


ALTER COLLATION "pg_catalog"."wo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."wo-x-icu" IS 'Wolof';



CREATE COLLATION "pg_catalog"."xh-ZA-x-icu" (provider = icu, locale = 'xh-ZA');


ALTER COLLATION "pg_catalog"."xh-ZA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."xh-ZA-x-icu" IS 'Xhosa (South Africa)';



CREATE COLLATION "pg_catalog"."xh-x-icu" (provider = icu, locale = 'xh');


ALTER COLLATION "pg_catalog"."xh-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."xh-x-icu" IS 'Xhosa';



CREATE COLLATION "pg_catalog"."xog-UG-x-icu" (provider = icu, locale = 'xog-UG');


ALTER COLLATION "pg_catalog"."xog-UG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."xog-UG-x-icu" IS 'Soga (Uganda)';



CREATE COLLATION "pg_catalog"."xog-x-icu" (provider = icu, locale = 'xog');


ALTER COLLATION "pg_catalog"."xog-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."xog-x-icu" IS 'Soga';



CREATE COLLATION "pg_catalog"."yav-CM-x-icu" (provider = icu, locale = 'yav-CM');


ALTER COLLATION "pg_catalog"."yav-CM-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yav-CM-x-icu" IS 'Yangben (Cameroon)';



CREATE COLLATION "pg_catalog"."yav-x-icu" (provider = icu, locale = 'yav');


ALTER COLLATION "pg_catalog"."yav-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yav-x-icu" IS 'Yangben';



CREATE COLLATION "pg_catalog"."yi-001-x-icu" (provider = icu, locale = 'yi-001');


ALTER COLLATION "pg_catalog"."yi-001-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yi-001-x-icu" IS 'Yiddish (world)';



CREATE COLLATION "pg_catalog"."yi-x-icu" (provider = icu, locale = 'yi');


ALTER COLLATION "pg_catalog"."yi-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yi-x-icu" IS 'Yiddish';



CREATE COLLATION "pg_catalog"."yo-BJ-x-icu" (provider = icu, locale = 'yo-BJ');


ALTER COLLATION "pg_catalog"."yo-BJ-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yo-BJ-x-icu" IS 'Yoruba (Benin)';



CREATE COLLATION "pg_catalog"."yo-NG-x-icu" (provider = icu, locale = 'yo-NG');


ALTER COLLATION "pg_catalog"."yo-NG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yo-NG-x-icu" IS 'Yoruba (Nigeria)';



CREATE COLLATION "pg_catalog"."yo-x-icu" (provider = icu, locale = 'yo');


ALTER COLLATION "pg_catalog"."yo-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yo-x-icu" IS 'Yoruba';



CREATE COLLATION "pg_catalog"."yrl-BR-x-icu" (provider = icu, locale = 'yrl-BR');


ALTER COLLATION "pg_catalog"."yrl-BR-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yrl-BR-x-icu" IS 'Nheengatu (Brazil)';



CREATE COLLATION "pg_catalog"."yrl-CO-x-icu" (provider = icu, locale = 'yrl-CO');


ALTER COLLATION "pg_catalog"."yrl-CO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yrl-CO-x-icu" IS 'Nheengatu (Colombia)';



CREATE COLLATION "pg_catalog"."yrl-VE-x-icu" (provider = icu, locale = 'yrl-VE');


ALTER COLLATION "pg_catalog"."yrl-VE-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yrl-VE-x-icu" IS 'Nheengatu (Venezuela)';



CREATE COLLATION "pg_catalog"."yrl-x-icu" (provider = icu, locale = 'yrl');


ALTER COLLATION "pg_catalog"."yrl-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yrl-x-icu" IS 'Nheengatu';



CREATE COLLATION "pg_catalog"."yue-Hans-CN-x-icu" (provider = icu, locale = 'yue-Hans-CN');


ALTER COLLATION "pg_catalog"."yue-Hans-CN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yue-Hans-CN-x-icu" IS 'Cantonese (Simplified, China)';



CREATE COLLATION "pg_catalog"."yue-Hans-x-icu" (provider = icu, locale = 'yue-Hans');


ALTER COLLATION "pg_catalog"."yue-Hans-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yue-Hans-x-icu" IS 'Cantonese (Simplified)';



CREATE COLLATION "pg_catalog"."yue-Hant-HK-x-icu" (provider = icu, locale = 'yue-Hant-HK');


ALTER COLLATION "pg_catalog"."yue-Hant-HK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yue-Hant-HK-x-icu" IS 'Cantonese (Traditional, Hong Kong SAR China)';



CREATE COLLATION "pg_catalog"."yue-Hant-x-icu" (provider = icu, locale = 'yue-Hant');


ALTER COLLATION "pg_catalog"."yue-Hant-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yue-Hant-x-icu" IS 'Cantonese (Traditional)';



CREATE COLLATION "pg_catalog"."yue-x-icu" (provider = icu, locale = 'yue');


ALTER COLLATION "pg_catalog"."yue-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."yue-x-icu" IS 'Cantonese';



CREATE COLLATION "pg_catalog"."zgh-MA-x-icu" (provider = icu, locale = 'zgh-MA');


ALTER COLLATION "pg_catalog"."zgh-MA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zgh-MA-x-icu" IS 'Standard Moroccan Tamazight (Morocco)';



CREATE COLLATION "pg_catalog"."zgh-x-icu" (provider = icu, locale = 'zgh');


ALTER COLLATION "pg_catalog"."zgh-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zgh-x-icu" IS 'Standard Moroccan Tamazight';



CREATE COLLATION "pg_catalog"."zh-Hans-CN-x-icu" (provider = icu, locale = 'zh-Hans-CN');


ALTER COLLATION "pg_catalog"."zh-Hans-CN-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-Hans-CN-x-icu" IS 'Chinese (Simplified, China)';



CREATE COLLATION "pg_catalog"."zh-Hans-HK-x-icu" (provider = icu, locale = 'zh-Hans-HK');


ALTER COLLATION "pg_catalog"."zh-Hans-HK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-Hans-HK-x-icu" IS 'Chinese (Simplified, Hong Kong SAR China)';



CREATE COLLATION "pg_catalog"."zh-Hans-MO-x-icu" (provider = icu, locale = 'zh-Hans-MO');


ALTER COLLATION "pg_catalog"."zh-Hans-MO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-Hans-MO-x-icu" IS 'Chinese (Simplified, Macao SAR China)';



CREATE COLLATION "pg_catalog"."zh-Hans-SG-x-icu" (provider = icu, locale = 'zh-Hans-SG');


ALTER COLLATION "pg_catalog"."zh-Hans-SG-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-Hans-SG-x-icu" IS 'Chinese (Simplified, Singapore)';



CREATE COLLATION "pg_catalog"."zh-Hans-x-icu" (provider = icu, locale = 'zh-Hans');


ALTER COLLATION "pg_catalog"."zh-Hans-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-Hans-x-icu" IS 'Chinese (Simplified)';



CREATE COLLATION "pg_catalog"."zh-Hant-HK-x-icu" (provider = icu, locale = 'zh-Hant-HK');


ALTER COLLATION "pg_catalog"."zh-Hant-HK-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-Hant-HK-x-icu" IS 'Chinese (Traditional, Hong Kong SAR China)';



CREATE COLLATION "pg_catalog"."zh-Hant-MO-x-icu" (provider = icu, locale = 'zh-Hant-MO');


ALTER COLLATION "pg_catalog"."zh-Hant-MO-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-Hant-MO-x-icu" IS 'Chinese (Traditional, Macao SAR China)';



CREATE COLLATION "pg_catalog"."zh-Hant-TW-x-icu" (provider = icu, locale = 'zh-Hant-TW');


ALTER COLLATION "pg_catalog"."zh-Hant-TW-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-Hant-TW-x-icu" IS 'Chinese (Traditional, Taiwan)';



CREATE COLLATION "pg_catalog"."zh-Hant-x-icu" (provider = icu, locale = 'zh-Hant');


ALTER COLLATION "pg_catalog"."zh-Hant-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-Hant-x-icu" IS 'Chinese (Traditional)';



CREATE COLLATION "pg_catalog"."zh-x-icu" (provider = icu, locale = 'zh');


ALTER COLLATION "pg_catalog"."zh-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zh-x-icu" IS 'Chinese';



CREATE COLLATION "pg_catalog"."zu-ZA-x-icu" (provider = icu, locale = 'zu-ZA');


ALTER COLLATION "pg_catalog"."zu-ZA-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zu-ZA-x-icu" IS 'Zulu (South Africa)';



CREATE COLLATION "pg_catalog"."zu-x-icu" (provider = icu, locale = 'zu');


ALTER COLLATION "pg_catalog"."zu-x-icu" OWNER TO "supabase_admin";


COMMENT ON COLLATION "pg_catalog"."zu-x-icu" IS 'Zulu';



CREATE TYPE "auth"."aal_level" AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE "auth"."aal_level" OWNER TO "supabase_auth_admin";


CREATE TYPE "auth"."code_challenge_method" AS ENUM (
    's256',
    'plain'
);


ALTER TYPE "auth"."code_challenge_method" OWNER TO "supabase_auth_admin";


CREATE TYPE "auth"."factor_status" AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE "auth"."factor_status" OWNER TO "supabase_auth_admin";


CREATE TYPE "auth"."factor_type" AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE "auth"."factor_type" OWNER TO "supabase_auth_admin";


CREATE TYPE "auth"."one_time_token_type" AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE "auth"."one_time_token_type" OWNER TO "supabase_auth_admin";


CREATE DOMAIN "information_schema"."cardinal_number" AS integer
	CONSTRAINT "cardinal_number_domain_check" CHECK ((VALUE >= 0));


ALTER DOMAIN "information_schema"."cardinal_number" OWNER TO "supabase_admin";


CREATE DOMAIN "information_schema"."character_data" AS character varying COLLATE "pg_catalog"."C";


ALTER DOMAIN "information_schema"."character_data" OWNER TO "supabase_admin";


CREATE DOMAIN "information_schema"."sql_identifier" AS "name";


ALTER DOMAIN "information_schema"."sql_identifier" OWNER TO "supabase_admin";


CREATE DOMAIN "information_schema"."time_stamp" AS timestamp(2) with time zone DEFAULT CURRENT_TIMESTAMP(2);


ALTER DOMAIN "information_schema"."time_stamp" OWNER TO "supabase_admin";


CREATE DOMAIN "information_schema"."yes_or_no" AS character varying(3) COLLATE "pg_catalog"."C"
	CONSTRAINT "yes_or_no_check" CHECK (((VALUE)::"text" = ANY ((ARRAY['YES'::character varying, 'NO'::character varying])::"text"[])));


ALTER DOMAIN "information_schema"."yes_or_no" OWNER TO "supabase_admin";


CREATE TYPE "pg_catalog"."aclitem" (
    INTERNALLENGTH = 16,
    INPUT = "aclitemin",
    OUTPUT = "aclitemout",
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."aclitem" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."aclitem" IS 'access control list';



CREATE TYPE "pg_catalog"."bit" (
    INTERNALLENGTH = variable,
    INPUT = "bit_in",
    OUTPUT = "bit_out",
    RECEIVE = "bit_recv",
    SEND = "bit_send",
    TYPMOD_IN = "bittypmodin",
    TYPMOD_OUT = "bittypmodout",
    CATEGORY = 'V',
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."bit" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."bit" IS 'fixed-length bit string';



CREATE TYPE "pg_catalog"."bool" (
    INTERNALLENGTH = 1,
    INPUT = "boolin",
    OUTPUT = "boolout",
    RECEIVE = "boolrecv",
    SEND = "boolsend",
    CATEGORY = 'B',
    PREFERRED = true,
    ALIGNMENT = char,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."bool" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."bool" IS 'boolean, format ''t''/''f''';



CREATE TYPE "pg_catalog"."box" (
    INTERNALLENGTH = 32,
    INPUT = "box_in",
    OUTPUT = "box_out",
    RECEIVE = "box_recv",
    SEND = "box_send",
    SUBSCRIPT = "raw_array_subscript_handler",
    ELEMENT = "point",
    CATEGORY = 'G',
    DELIMITER = ';',
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."box" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."box" IS 'geometric box, format ''lower left point,upper right point''';



CREATE TYPE "pg_catalog"."bpchar" (
    INTERNALLENGTH = variable,
    INPUT = "bpcharin",
    OUTPUT = "bpcharout",
    RECEIVE = "bpcharrecv",
    SEND = "bpcharsend",
    TYPMOD_IN = "bpchartypmodin",
    TYPMOD_OUT = "bpchartypmodout",
    COLLATABLE = true,
    CATEGORY = 'S',
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."bpchar" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."bpchar" IS '''char(length)'' blank-padded string, fixed storage length';



CREATE TYPE "pg_catalog"."bytea" (
    INTERNALLENGTH = variable,
    INPUT = "byteain",
    OUTPUT = "byteaout",
    RECEIVE = "bytearecv",
    SEND = "byteasend",
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."bytea" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."bytea" IS 'variable-length string, binary values escaped';



CREATE TYPE "pg_catalog"."char" (
    INTERNALLENGTH = 1,
    INPUT = "charin",
    OUTPUT = "charout",
    RECEIVE = "charrecv",
    SEND = "charsend",
    CATEGORY = 'Z',
    ALIGNMENT = char,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."char" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."char" IS 'single character';



CREATE TYPE "pg_catalog"."cid" (
    INTERNALLENGTH = 4,
    INPUT = "cidin",
    OUTPUT = "cidout",
    RECEIVE = "cidrecv",
    SEND = "cidsend",
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."cid" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."cid" IS 'command identifier type, sequence in transaction id';



CREATE TYPE "pg_catalog"."cidr" (
    INTERNALLENGTH = variable,
    INPUT = "cidr_in",
    OUTPUT = "cidr_out",
    RECEIVE = "cidr_recv",
    SEND = "cidr_send",
    CATEGORY = 'I',
    ALIGNMENT = int4,
    STORAGE = main
);


ALTER TYPE "pg_catalog"."cidr" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."cidr" IS 'network IP address/netmask, network address';



CREATE TYPE "pg_catalog"."circle" (
    INTERNALLENGTH = 24,
    INPUT = "circle_in",
    OUTPUT = "circle_out",
    RECEIVE = "circle_recv",
    SEND = "circle_send",
    CATEGORY = 'G',
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."circle" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."circle" IS 'geometric circle, format ''<center point,radius>''';



CREATE TYPE "pg_catalog"."date" (
    INTERNALLENGTH = 4,
    INPUT = "date_in",
    OUTPUT = "date_out",
    RECEIVE = "date_recv",
    SEND = "date_send",
    CATEGORY = 'D',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."date" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."date" IS 'date';



CREATE TYPE "pg_catalog"."daterange" AS RANGE (
    subtype = "date",
    multirange_type_name = "datemultirange",
    canonical = "daterange_canonical",
    subtype_diff = "daterange_subdiff"
);


ALTER TYPE "pg_catalog"."daterange" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."daterange" IS 'range of dates';



CREATE TYPE "pg_catalog"."float4" (
    INTERNALLENGTH = 4,
    INPUT = "float4in",
    OUTPUT = "float4out",
    RECEIVE = "float4recv",
    SEND = "float4send",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."float4" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."float4" IS 'single-precision floating point number, 4-byte storage';



CREATE TYPE "pg_catalog"."float8" (
    INTERNALLENGTH = 8,
    INPUT = "float8in",
    OUTPUT = "float8out",
    RECEIVE = "float8recv",
    SEND = "float8send",
    CATEGORY = 'N',
    PREFERRED = true,
    ALIGNMENT = double,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."float8" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."float8" IS 'double-precision floating point number, 8-byte storage';



CREATE TYPE "pg_catalog"."gtsvector" (
    INTERNALLENGTH = variable,
    INPUT = "gtsvectorin",
    OUTPUT = "gtsvectorout",
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."gtsvector" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."gtsvector" IS 'GiST index internal text representation for text search';



CREATE TYPE "pg_catalog"."inet" (
    INTERNALLENGTH = variable,
    INPUT = "inet_in",
    OUTPUT = "inet_out",
    RECEIVE = "inet_recv",
    SEND = "inet_send",
    CATEGORY = 'I',
    PREFERRED = true,
    ALIGNMENT = int4,
    STORAGE = main
);


ALTER TYPE "pg_catalog"."inet" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."inet" IS 'IP address/netmask, host address, netmask optional';



CREATE TYPE "pg_catalog"."int2" (
    INTERNALLENGTH = 2,
    INPUT = "int2in",
    OUTPUT = "int2out",
    RECEIVE = "int2recv",
    SEND = "int2send",
    CATEGORY = 'N',
    ALIGNMENT = int2,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."int2" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."int2" IS '-32 thousand to 32 thousand, 2-byte storage';



CREATE TYPE "pg_catalog"."int2vector" (
    INTERNALLENGTH = variable,
    INPUT = "int2vectorin",
    OUTPUT = "int2vectorout",
    RECEIVE = "int2vectorrecv",
    SEND = "int2vectorsend",
    SUBSCRIPT = "array_subscript_handler",
    ELEMENT = smallint,
    CATEGORY = 'A',
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."int2vector" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."int2vector" IS 'array of int2, used in system tables';



CREATE TYPE "pg_catalog"."int4" (
    INTERNALLENGTH = 4,
    INPUT = "int4in",
    OUTPUT = "int4out",
    RECEIVE = "int4recv",
    SEND = "int4send",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."int4" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."int4" IS '-2 billion to 2 billion integer, 4-byte storage';



CREATE TYPE "pg_catalog"."int4range" AS RANGE (
    subtype = integer,
    multirange_type_name = "int4multirange",
    canonical = "int4range_canonical",
    subtype_diff = "int4range_subdiff"
);


ALTER TYPE "pg_catalog"."int4range" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."int4range" IS 'range of integers';



CREATE TYPE "pg_catalog"."int8" (
    INTERNALLENGTH = 8,
    INPUT = "int8in",
    OUTPUT = "int8out",
    RECEIVE = "int8recv",
    SEND = "int8send",
    CATEGORY = 'N',
    ALIGNMENT = double,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."int8" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."int8" IS '~18 digit integer, 8-byte storage';



CREATE TYPE "pg_catalog"."int8range" AS RANGE (
    subtype = bigint,
    multirange_type_name = "int8multirange",
    canonical = "int8range_canonical",
    subtype_diff = "int8range_subdiff"
);


ALTER TYPE "pg_catalog"."int8range" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."int8range" IS 'range of bigints';



CREATE TYPE "pg_catalog"."interval" (
    INTERNALLENGTH = 16,
    INPUT = "interval_in",
    OUTPUT = "interval_out",
    RECEIVE = "interval_recv",
    SEND = "interval_send",
    TYPMOD_IN = "intervaltypmodin",
    TYPMOD_OUT = "intervaltypmodout",
    CATEGORY = 'T',
    PREFERRED = true,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."interval" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."interval" IS 'time interval, format ''number units ...''';



CREATE TYPE "pg_catalog"."json" (
    INTERNALLENGTH = variable,
    INPUT = "json_in",
    OUTPUT = "json_out",
    RECEIVE = "json_recv",
    SEND = "json_send",
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."json" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."json" IS 'JSON stored as text';



CREATE TYPE "pg_catalog"."jsonb" (
    INTERNALLENGTH = variable,
    INPUT = "jsonb_in",
    OUTPUT = "jsonb_out",
    RECEIVE = "jsonb_recv",
    SEND = "jsonb_send",
    SUBSCRIPT = "jsonb_subscript_handler",
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."jsonb" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."jsonb" IS 'Binary JSON';



CREATE TYPE "pg_catalog"."jsonpath" (
    INTERNALLENGTH = variable,
    INPUT = "jsonpath_in",
    OUTPUT = "jsonpath_out",
    RECEIVE = "jsonpath_recv",
    SEND = "jsonpath_send",
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."jsonpath" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."jsonpath" IS 'JSON path';



CREATE TYPE "pg_catalog"."line" (
    INTERNALLENGTH = 24,
    INPUT = "line_in",
    OUTPUT = "line_out",
    RECEIVE = "line_recv",
    SEND = "line_send",
    SUBSCRIPT = "raw_array_subscript_handler",
    ELEMENT = double precision,
    CATEGORY = 'G',
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."line" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."line" IS 'geometric line, formats ''{A,B,C}''/''[point1,point2]''';



CREATE TYPE "pg_catalog"."lseg" (
    INTERNALLENGTH = 32,
    INPUT = "lseg_in",
    OUTPUT = "lseg_out",
    RECEIVE = "lseg_recv",
    SEND = "lseg_send",
    SUBSCRIPT = "raw_array_subscript_handler",
    ELEMENT = "point",
    CATEGORY = 'G',
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."lseg" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."lseg" IS 'geometric line segment, format ''[point1,point2]''';



CREATE TYPE "pg_catalog"."macaddr" (
    INTERNALLENGTH = 6,
    INPUT = "macaddr_in",
    OUTPUT = "macaddr_out",
    RECEIVE = "macaddr_recv",
    SEND = "macaddr_send",
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."macaddr" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."macaddr" IS 'XX:XX:XX:XX:XX:XX, MAC address';



CREATE TYPE "pg_catalog"."macaddr8" (
    INTERNALLENGTH = 8,
    INPUT = "macaddr8_in",
    OUTPUT = "macaddr8_out",
    RECEIVE = "macaddr8_recv",
    SEND = "macaddr8_send",
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."macaddr8" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."macaddr8" IS 'XX:XX:XX:XX:XX:XX:XX:XX, MAC address';



CREATE TYPE "pg_catalog"."money" (
    INTERNALLENGTH = 8,
    INPUT = "cash_in",
    OUTPUT = "cash_out",
    RECEIVE = "cash_recv",
    SEND = "cash_send",
    CATEGORY = 'N',
    ALIGNMENT = double,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."money" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."money" IS 'monetary amounts, $d,ddd.cc';



CREATE TYPE "pg_catalog"."name" (
    INTERNALLENGTH = 64,
    INPUT = "namein",
    OUTPUT = "nameout",
    RECEIVE = "namerecv",
    SEND = "namesend",
    COLLATABLE = true,
    SUBSCRIPT = "raw_array_subscript_handler",
    ELEMENT = "char",
    CATEGORY = 'S',
    ALIGNMENT = char,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."name" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."name" IS '63-byte type for storing system identifiers';



CREATE TYPE "pg_catalog"."numeric" (
    INTERNALLENGTH = variable,
    INPUT = "numeric_in",
    OUTPUT = "numeric_out",
    RECEIVE = "numeric_recv",
    SEND = "numeric_send",
    TYPMOD_IN = "numerictypmodin",
    TYPMOD_OUT = "numerictypmodout",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = main
);


ALTER TYPE "pg_catalog"."numeric" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."numeric" IS '''numeric(precision, scale)'' arbitrary precision number';



CREATE TYPE "pg_catalog"."numrange" AS RANGE (
    subtype = numeric,
    multirange_type_name = "nummultirange",
    subtype_diff = "numrange_subdiff"
);


ALTER TYPE "pg_catalog"."numrange" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."numrange" IS 'range of numerics';



CREATE TYPE "pg_catalog"."oid" (
    INTERNALLENGTH = 4,
    INPUT = "oidin",
    OUTPUT = "oidout",
    RECEIVE = "oidrecv",
    SEND = "oidsend",
    CATEGORY = 'N',
    PREFERRED = true,
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."oid" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."oid" IS 'object identifier(oid), maximum 4 billion';



CREATE TYPE "pg_catalog"."oidvector" (
    INTERNALLENGTH = variable,
    INPUT = "oidvectorin",
    OUTPUT = "oidvectorout",
    RECEIVE = "oidvectorrecv",
    SEND = "oidvectorsend",
    SUBSCRIPT = "array_subscript_handler",
    ELEMENT = "oid",
    CATEGORY = 'A',
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."oidvector" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."oidvector" IS 'array of oids, used in system tables';



CREATE TYPE "pg_catalog"."path" (
    INTERNALLENGTH = variable,
    INPUT = "path_in",
    OUTPUT = "path_out",
    RECEIVE = "path_recv",
    SEND = "path_send",
    CATEGORY = 'G',
    ALIGNMENT = double,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."path" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."path" IS 'geometric path, format ''(point1,...)''';



CREATE TYPE "pg_catalog"."pg_brin_bloom_summary" (
    INTERNALLENGTH = variable,
    INPUT = "brin_bloom_summary_in",
    OUTPUT = "brin_bloom_summary_out",
    RECEIVE = "brin_bloom_summary_recv",
    SEND = "brin_bloom_summary_send",
    COLLATABLE = true,
    CATEGORY = 'Z',
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."pg_brin_bloom_summary" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."pg_brin_bloom_summary" IS 'pseudo-type representing BRIN bloom summary';



CREATE TYPE "pg_catalog"."pg_brin_minmax_multi_summary" (
    INTERNALLENGTH = variable,
    INPUT = "brin_minmax_multi_summary_in",
    OUTPUT = "brin_minmax_multi_summary_out",
    RECEIVE = "brin_minmax_multi_summary_recv",
    SEND = "brin_minmax_multi_summary_send",
    COLLATABLE = true,
    CATEGORY = 'Z',
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."pg_brin_minmax_multi_summary" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."pg_brin_minmax_multi_summary" IS 'pseudo-type representing BRIN minmax-multi summary';



CREATE TYPE "pg_catalog"."pg_dependencies" (
    INTERNALLENGTH = variable,
    INPUT = "pg_dependencies_in",
    OUTPUT = "pg_dependencies_out",
    RECEIVE = "pg_dependencies_recv",
    SEND = "pg_dependencies_send",
    COLLATABLE = true,
    CATEGORY = 'Z',
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."pg_dependencies" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."pg_dependencies" IS 'multivariate dependencies';



CREATE TYPE "pg_catalog"."pg_lsn" (
    INTERNALLENGTH = 8,
    INPUT = "pg_lsn_in",
    OUTPUT = "pg_lsn_out",
    RECEIVE = "pg_lsn_recv",
    SEND = "pg_lsn_send",
    ALIGNMENT = double,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."pg_lsn" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."pg_lsn" IS 'PostgreSQL LSN';



CREATE TYPE "pg_catalog"."pg_mcv_list" (
    INTERNALLENGTH = variable,
    INPUT = "pg_mcv_list_in",
    OUTPUT = "pg_mcv_list_out",
    RECEIVE = "pg_mcv_list_recv",
    SEND = "pg_mcv_list_send",
    COLLATABLE = true,
    CATEGORY = 'Z',
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."pg_mcv_list" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."pg_mcv_list" IS 'multivariate MCV list';



CREATE TYPE "pg_catalog"."pg_ndistinct" (
    INTERNALLENGTH = variable,
    INPUT = "pg_ndistinct_in",
    OUTPUT = "pg_ndistinct_out",
    RECEIVE = "pg_ndistinct_recv",
    SEND = "pg_ndistinct_send",
    COLLATABLE = true,
    CATEGORY = 'Z',
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."pg_ndistinct" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."pg_ndistinct" IS 'multivariate ndistinct coefficients';



CREATE TYPE "pg_catalog"."pg_node_tree" (
    INTERNALLENGTH = variable,
    INPUT = "pg_node_tree_in",
    OUTPUT = "pg_node_tree_out",
    RECEIVE = "pg_node_tree_recv",
    SEND = "pg_node_tree_send",
    COLLATABLE = true,
    CATEGORY = 'Z',
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."pg_node_tree" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."pg_node_tree" IS 'string representing an internal node tree';



CREATE TYPE "pg_catalog"."pg_snapshot" (
    INTERNALLENGTH = variable,
    INPUT = "pg_snapshot_in",
    OUTPUT = "pg_snapshot_out",
    RECEIVE = "pg_snapshot_recv",
    SEND = "pg_snapshot_send",
    ALIGNMENT = double,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."pg_snapshot" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."pg_snapshot" IS 'transaction snapshot';



CREATE TYPE "pg_catalog"."point" (
    INTERNALLENGTH = 16,
    INPUT = "point_in",
    OUTPUT = "point_out",
    RECEIVE = "point_recv",
    SEND = "point_send",
    SUBSCRIPT = "raw_array_subscript_handler",
    ELEMENT = double precision,
    CATEGORY = 'G',
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."point" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."point" IS 'geometric point, format ''(x,y)''';



CREATE TYPE "pg_catalog"."polygon" (
    INTERNALLENGTH = variable,
    INPUT = "poly_in",
    OUTPUT = "poly_out",
    RECEIVE = "poly_recv",
    SEND = "poly_send",
    CATEGORY = 'G',
    ALIGNMENT = double,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."polygon" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."polygon" IS 'geometric polygon, format ''(point1,...)''';



CREATE TYPE "pg_catalog"."refcursor" (
    INTERNALLENGTH = variable,
    INPUT = "textin",
    OUTPUT = "textout",
    RECEIVE = "textrecv",
    SEND = "textsend",
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."refcursor" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."refcursor" IS 'reference to cursor (portal name)';



CREATE TYPE "pg_catalog"."regclass" (
    INTERNALLENGTH = 4,
    INPUT = "regclassin",
    OUTPUT = "regclassout",
    RECEIVE = "regclassrecv",
    SEND = "regclasssend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regclass" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regclass" IS 'registered class';



CREATE TYPE "pg_catalog"."regcollation" (
    INTERNALLENGTH = 4,
    INPUT = "regcollationin",
    OUTPUT = "regcollationout",
    RECEIVE = "regcollationrecv",
    SEND = "regcollationsend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regcollation" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regcollation" IS 'registered collation';



CREATE TYPE "pg_catalog"."regconfig" (
    INTERNALLENGTH = 4,
    INPUT = "regconfigin",
    OUTPUT = "regconfigout",
    RECEIVE = "regconfigrecv",
    SEND = "regconfigsend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regconfig" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regconfig" IS 'registered text search configuration';



CREATE TYPE "pg_catalog"."regdictionary" (
    INTERNALLENGTH = 4,
    INPUT = "regdictionaryin",
    OUTPUT = "regdictionaryout",
    RECEIVE = "regdictionaryrecv",
    SEND = "regdictionarysend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regdictionary" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regdictionary" IS 'registered text search dictionary';



CREATE TYPE "pg_catalog"."regnamespace" (
    INTERNALLENGTH = 4,
    INPUT = "regnamespacein",
    OUTPUT = "regnamespaceout",
    RECEIVE = "regnamespacerecv",
    SEND = "regnamespacesend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regnamespace" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regnamespace" IS 'registered namespace';



CREATE TYPE "pg_catalog"."regoper" (
    INTERNALLENGTH = 4,
    INPUT = "regoperin",
    OUTPUT = "regoperout",
    RECEIVE = "regoperrecv",
    SEND = "regopersend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regoper" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regoper" IS 'registered operator';



CREATE TYPE "pg_catalog"."regoperator" (
    INTERNALLENGTH = 4,
    INPUT = "regoperatorin",
    OUTPUT = "regoperatorout",
    RECEIVE = "regoperatorrecv",
    SEND = "regoperatorsend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regoperator" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regoperator" IS 'registered operator (with args)';



CREATE TYPE "pg_catalog"."regproc" (
    INTERNALLENGTH = 4,
    INPUT = "regprocin",
    OUTPUT = "regprocout",
    RECEIVE = "regprocrecv",
    SEND = "regprocsend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regproc" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regproc" IS 'registered procedure';



CREATE TYPE "pg_catalog"."regprocedure" (
    INTERNALLENGTH = 4,
    INPUT = "regprocedurein",
    OUTPUT = "regprocedureout",
    RECEIVE = "regprocedurerecv",
    SEND = "regproceduresend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regprocedure" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regprocedure" IS 'registered procedure (with args)';



CREATE TYPE "pg_catalog"."regrole" (
    INTERNALLENGTH = 4,
    INPUT = "regrolein",
    OUTPUT = "regroleout",
    RECEIVE = "regrolerecv",
    SEND = "regrolesend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regrole" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regrole" IS 'registered role';



CREATE TYPE "pg_catalog"."regtype" (
    INTERNALLENGTH = 4,
    INPUT = "regtypein",
    OUTPUT = "regtypeout",
    RECEIVE = "regtyperecv",
    SEND = "regtypesend",
    CATEGORY = 'N',
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."regtype" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."regtype" IS 'registered type';



CREATE TYPE "pg_catalog"."text" (
    INTERNALLENGTH = variable,
    INPUT = "textin",
    OUTPUT = "textout",
    RECEIVE = "textrecv",
    SEND = "textsend",
    COLLATABLE = true,
    CATEGORY = 'S',
    PREFERRED = true,
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."text" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."text" IS 'variable-length string, no limit specified';



CREATE TYPE "pg_catalog"."tid" (
    INTERNALLENGTH = 6,
    INPUT = "tidin",
    OUTPUT = "tidout",
    RECEIVE = "tidrecv",
    SEND = "tidsend",
    ALIGNMENT = int2,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."tid" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."tid" IS 'tuple physical location, format ''(block,offset)''';



CREATE TYPE "pg_catalog"."time" (
    INTERNALLENGTH = 8,
    INPUT = "time_in",
    OUTPUT = "time_out",
    RECEIVE = "time_recv",
    SEND = "time_send",
    TYPMOD_IN = "timetypmodin",
    TYPMOD_OUT = "timetypmodout",
    CATEGORY = 'D',
    ALIGNMENT = double,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."time" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."time" IS 'time of day';



CREATE TYPE "pg_catalog"."timestamp" (
    INTERNALLENGTH = 8,
    INPUT = "timestamp_in",
    OUTPUT = "timestamp_out",
    RECEIVE = "timestamp_recv",
    SEND = "timestamp_send",
    TYPMOD_IN = "timestamptypmodin",
    TYPMOD_OUT = "timestamptypmodout",
    CATEGORY = 'D',
    ALIGNMENT = double,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."timestamp" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."timestamp" IS 'date and time';



CREATE TYPE "pg_catalog"."timestamptz" (
    INTERNALLENGTH = 8,
    INPUT = "timestamptz_in",
    OUTPUT = "timestamptz_out",
    RECEIVE = "timestamptz_recv",
    SEND = "timestamptz_send",
    TYPMOD_IN = "timestamptztypmodin",
    TYPMOD_OUT = "timestamptztypmodout",
    CATEGORY = 'D',
    PREFERRED = true,
    ALIGNMENT = double,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."timestamptz" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."timestamptz" IS 'date and time with time zone';



CREATE TYPE "pg_catalog"."timetz" (
    INTERNALLENGTH = 12,
    INPUT = "timetz_in",
    OUTPUT = "timetz_out",
    RECEIVE = "timetz_recv",
    SEND = "timetz_send",
    TYPMOD_IN = "timetztypmodin",
    TYPMOD_OUT = "timetztypmodout",
    CATEGORY = 'D',
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."timetz" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."timetz" IS 'time of day with time zone';



CREATE TYPE "pg_catalog"."tsquery" (
    INTERNALLENGTH = variable,
    INPUT = "tsqueryin",
    OUTPUT = "tsqueryout",
    RECEIVE = "tsqueryrecv",
    SEND = "tsquerysend",
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."tsquery" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."tsquery" IS 'query representation for text search';



CREATE TYPE "pg_catalog"."tsrange" AS RANGE (
    subtype = timestamp without time zone,
    multirange_type_name = "tsmultirange",
    subtype_diff = "tsrange_subdiff"
);


ALTER TYPE "pg_catalog"."tsrange" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."tsrange" IS 'range of timestamps without time zone';



CREATE TYPE "pg_catalog"."tstzrange" AS RANGE (
    subtype = timestamp with time zone,
    multirange_type_name = "tstzmultirange",
    subtype_diff = "tstzrange_subdiff"
);


ALTER TYPE "pg_catalog"."tstzrange" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."tstzrange" IS 'range of timestamps with time zone';



CREATE TYPE "pg_catalog"."tsvector" (
    INTERNALLENGTH = variable,
    INPUT = "tsvectorin",
    OUTPUT = "tsvectorout",
    RECEIVE = "tsvectorrecv",
    SEND = "tsvectorsend",
    ANALYZE = "ts_typanalyze",
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."tsvector" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."tsvector" IS 'text representation for text search';



CREATE TYPE "pg_catalog"."txid_snapshot" (
    INTERNALLENGTH = variable,
    INPUT = "txid_snapshot_in",
    OUTPUT = "txid_snapshot_out",
    RECEIVE = "txid_snapshot_recv",
    SEND = "txid_snapshot_send",
    ALIGNMENT = double,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."txid_snapshot" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."txid_snapshot" IS 'transaction snapshot';



CREATE TYPE "pg_catalog"."uuid" (
    INTERNALLENGTH = 16,
    INPUT = "uuid_in",
    OUTPUT = "uuid_out",
    RECEIVE = "uuid_recv",
    SEND = "uuid_send",
    ALIGNMENT = char,
    STORAGE = plain
);


ALTER TYPE "pg_catalog"."uuid" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."uuid" IS 'UUID';



CREATE TYPE "pg_catalog"."varbit" (
    INTERNALLENGTH = variable,
    INPUT = "varbit_in",
    OUTPUT = "varbit_out",
    RECEIVE = "varbit_recv",
    SEND = "varbit_send",
    TYPMOD_IN = "varbittypmodin",
    TYPMOD_OUT = "varbittypmodout",
    CATEGORY = 'V',
    PREFERRED = true,
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."varbit" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."varbit" IS 'variable-length bit string';



CREATE TYPE "pg_catalog"."varchar" (
    INTERNALLENGTH = variable,
    INPUT = "varcharin",
    OUTPUT = "varcharout",
    RECEIVE = "varcharrecv",
    SEND = "varcharsend",
    TYPMOD_IN = "varchartypmodin",
    TYPMOD_OUT = "varchartypmodout",
    COLLATABLE = true,
    CATEGORY = 'S',
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."varchar" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."varchar" IS '''varchar(length)'' non-blank-padded string, variable storage length';



CREATE TYPE "pg_catalog"."xid" (
    INTERNALLENGTH = 4,
    INPUT = "xidin",
    OUTPUT = "xidout",
    RECEIVE = "xidrecv",
    SEND = "xidsend",
    ALIGNMENT = int4,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."xid" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."xid" IS 'transaction id';



CREATE TYPE "pg_catalog"."xid8" (
    INTERNALLENGTH = 8,
    INPUT = "xid8in",
    OUTPUT = "xid8out",
    RECEIVE = "xid8recv",
    SEND = "xid8send",
    ALIGNMENT = double,
    STORAGE = plain,
    PASSEDBYVALUE
);


ALTER TYPE "pg_catalog"."xid8" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."xid8" IS 'full transaction id';



CREATE TYPE "pg_catalog"."xml" (
    INTERNALLENGTH = variable,
    INPUT = "xml_in",
    OUTPUT = "xml_out",
    RECEIVE = "xml_recv",
    SEND = "xml_send",
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE "pg_catalog"."xml" OWNER TO "supabase_admin";


COMMENT ON TYPE "pg_catalog"."xml" IS 'XML content';



CREATE TYPE "realtime"."action" AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE "realtime"."action" OWNER TO "supabase_admin";


CREATE TYPE "realtime"."equality_op" AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE "realtime"."equality_op" OWNER TO "supabase_admin";


CREATE TYPE "realtime"."user_defined_filter" AS (
	"column_name" "text",
	"op" "realtime"."equality_op",
	"value" "text"
);


ALTER TYPE "realtime"."user_defined_filter" OWNER TO "supabase_admin";


CREATE TYPE "realtime"."wal_column" AS (
	"name" "text",
	"type_name" "text",
	"type_oid" "oid",
	"value" "jsonb",
	"is_pkey" boolean,
	"is_selectable" boolean
);


ALTER TYPE "realtime"."wal_column" OWNER TO "supabase_admin";


CREATE TYPE "realtime"."wal_rls" AS (
	"wal" "jsonb",
	"is_rls_enabled" boolean,
	"subscription_ids" "uuid"[],
	"errors" "text"[]
);


ALTER TYPE "realtime"."wal_rls" OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "auth"."email"() RETURNS "text"
    LANGUAGE "sql" STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION "auth"."email"() OWNER TO "supabase_auth_admin";


COMMENT ON FUNCTION "auth"."email"() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';



CREATE OR REPLACE FUNCTION "auth"."jwt"() RETURNS "jsonb"
    LANGUAGE "sql" STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION "auth"."jwt"() OWNER TO "supabase_auth_admin";


CREATE OR REPLACE FUNCTION "auth"."role"() RETURNS "text"
    LANGUAGE "sql" STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION "auth"."role"() OWNER TO "supabase_auth_admin";


COMMENT ON FUNCTION "auth"."role"() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';



CREATE OR REPLACE FUNCTION "auth"."uid"() RETURNS "uuid"
    LANGUAGE "sql" STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION "auth"."uid"() OWNER TO "supabase_auth_admin";


COMMENT ON FUNCTION "auth"."uid"() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';



CREATE OR REPLACE FUNCTION "extensions"."grant_pg_cron_access"() RETURNS "event_trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION "extensions"."grant_pg_cron_access"() OWNER TO "supabase_admin";


COMMENT ON FUNCTION "extensions"."grant_pg_cron_access"() IS 'Grants access to pg_cron';



CREATE OR REPLACE FUNCTION "extensions"."grant_pg_graphql_access"() RETURNS "event_trigger"
    LANGUAGE "plpgsql"
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION "extensions"."grant_pg_graphql_access"() OWNER TO "supabase_admin";


COMMENT ON FUNCTION "extensions"."grant_pg_graphql_access"() IS 'Grants access to pg_graphql';



CREATE OR REPLACE FUNCTION "extensions"."grant_pg_net_access"() RETURNS "event_trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    IF EXISTS (
      SELECT FROM pg_extension
      WHERE extname = 'pg_net'
      -- all versions in use on existing projects as of 2025-02-20
      -- version 0.12.0 onwards don't need these applied
      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')
    ) THEN
      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    END IF;
  END IF;
END;
$$;


ALTER FUNCTION "extensions"."grant_pg_net_access"() OWNER TO "supabase_admin";


COMMENT ON FUNCTION "extensions"."grant_pg_net_access"() IS 'Grants access to pg_net';



CREATE OR REPLACE FUNCTION "extensions"."pgrst_ddl_watch"() RETURNS "event_trigger"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION "extensions"."pgrst_ddl_watch"() OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "extensions"."pgrst_drop_watch"() RETURNS "event_trigger"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION "extensions"."pgrst_drop_watch"() OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "extensions"."set_graphql_placeholder"() RETURNS "event_trigger"
    LANGUAGE "plpgsql"
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION "extensions"."set_graphql_placeholder"() OWNER TO "supabase_admin";


COMMENT ON FUNCTION "extensions"."set_graphql_placeholder"() IS 'Reintroduces placeholder function for graphql_public.graphql';



CREATE OR REPLACE FUNCTION "information_schema"."_pg_char_max_length"("typid" "oid", "typmod" integer) RETURNS integer
    LANGUAGE "sql" IMMUTABLE STRICT PARALLEL SAFE
    RETURN CASE WHEN ("typmod" = '-1'::integer) THEN NULL::integer WHEN ("typid" = ANY (ARRAY[(1042)::"oid", (1043)::"oid"])) THEN ("typmod" - 4) WHEN ("typid" = ANY (ARRAY[(1560)::"oid", (1562)::"oid"])) THEN "typmod" ELSE NULL::integer END;


ALTER FUNCTION "information_schema"."_pg_char_max_length"("typid" "oid", "typmod" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_char_octet_length"("typid" "oid", "typmod" integer) RETURNS integer
    LANGUAGE "sql" IMMUTABLE STRICT PARALLEL SAFE
    RETURN CASE WHEN ("typid" = ANY (ARRAY[(25)::"oid", (1042)::"oid", (1043)::"oid"])) THEN CASE WHEN ("typmod" = '-1'::integer) THEN (((2)::double precision ^ (30)::double precision))::integer ELSE ("information_schema"."_pg_char_max_length"("typid", "typmod") * "pg_encoding_max_length"((SELECT "pg_database"."encoding" FROM "pg_database" WHERE ("pg_database"."datname" = "current_database"())))) END ELSE NULL::integer END;


ALTER FUNCTION "information_schema"."_pg_char_octet_length"("typid" "oid", "typmod" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_datetime_precision"("typid" "oid", "typmod" integer) RETURNS integer
    LANGUAGE "sql" IMMUTABLE STRICT PARALLEL SAFE
    RETURN CASE WHEN ("typid" = (1082)::"oid") THEN 0 WHEN ("typid" = ANY (ARRAY[(1083)::"oid", (1114)::"oid", (1184)::"oid", (1266)::"oid"])) THEN CASE WHEN ("typmod" < 0) THEN 6 ELSE "typmod" END WHEN ("typid" = (1186)::"oid") THEN CASE WHEN (("typmod" < 0) OR (("typmod" & 65535) = 65535)) THEN 6 ELSE ("typmod" & 65535) END ELSE NULL::integer END;


ALTER FUNCTION "information_schema"."_pg_datetime_precision"("typid" "oid", "typmod" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_expandarray"("anyarray", OUT "x" "anyelement", OUT "n" integer) RETURNS SETOF "record"
    LANGUAGE "sql" IMMUTABLE STRICT ROWS 100 SUPPORT "array_unnest_support" PARALLEL SAFE
    AS $_$SELECT * FROM pg_catalog.unnest($1) WITH ORDINALITY$_$;


ALTER FUNCTION "information_schema"."_pg_expandarray"("anyarray", OUT "x" "anyelement", OUT "n" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_index_position"("oid", smallint) RETURNS integer
    LANGUAGE "sql" STABLE STRICT
    BEGIN ATOMIC
 SELECT ("ss"."a")."n" AS "n"
    FROM ( SELECT "information_schema"."_pg_expandarray"("pg_index"."indkey") AS "a"
            FROM "pg_index"
           WHERE ("pg_index"."indexrelid" = $1)) "ss"
   WHERE (("ss"."a")."x" = $2);
END;


ALTER FUNCTION "information_schema"."_pg_index_position"("oid", smallint) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_interval_type"("typid" "oid", "mod" integer) RETURNS "text"
    LANGUAGE "sql" IMMUTABLE STRICT PARALLEL SAFE
    RETURN CASE WHEN ("typid" = (1186)::"oid") THEN "upper"(SUBSTRING("format_type"("typid", "mod") SIMILAR 'interval[()0-9]* #"%#"'::"text" ESCAPE '#'::"text")) ELSE NULL::"text" END;


ALTER FUNCTION "information_schema"."_pg_interval_type"("typid" "oid", "mod" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_numeric_precision"("typid" "oid", "typmod" integer) RETURNS integer
    LANGUAGE "sql" IMMUTABLE STRICT PARALLEL SAFE
    RETURN CASE "typid" WHEN 21 THEN 16 WHEN 23 THEN 32 WHEN 20 THEN 64 WHEN 1700 THEN CASE WHEN ("typmod" = '-1'::integer) THEN NULL::integer ELSE ((("typmod" - 4) >> 16) & 65535) END WHEN 700 THEN 24 WHEN 701 THEN 53 ELSE NULL::integer END;


ALTER FUNCTION "information_schema"."_pg_numeric_precision"("typid" "oid", "typmod" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_numeric_precision_radix"("typid" "oid", "typmod" integer) RETURNS integer
    LANGUAGE "sql" IMMUTABLE STRICT PARALLEL SAFE
    RETURN CASE WHEN ("typid" = ANY (ARRAY[(21)::"oid", (23)::"oid", (20)::"oid", (700)::"oid", (701)::"oid"])) THEN 2 WHEN ("typid" = (1700)::"oid") THEN 10 ELSE NULL::integer END;


ALTER FUNCTION "information_schema"."_pg_numeric_precision_radix"("typid" "oid", "typmod" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_numeric_scale"("typid" "oid", "typmod" integer) RETURNS integer
    LANGUAGE "sql" IMMUTABLE STRICT PARALLEL SAFE
    RETURN CASE WHEN ("typid" = ANY (ARRAY[(21)::"oid", (23)::"oid", (20)::"oid"])) THEN 0 WHEN ("typid" = (1700)::"oid") THEN CASE WHEN ("typmod" = '-1'::integer) THEN NULL::integer ELSE (("typmod" - 4) & 65535) END ELSE NULL::integer END;


ALTER FUNCTION "information_schema"."_pg_numeric_scale"("typid" "oid", "typmod" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_truetypid"("pg_attribute", "pg_type") RETURNS "oid"
    LANGUAGE "sql" IMMUTABLE STRICT PARALLEL SAFE
    RETURN CASE WHEN (($2)."typtype" = 'd'::"char") THEN ($2)."typbasetype" ELSE ($1)."atttypid" END;


ALTER FUNCTION "information_schema"."_pg_truetypid"("pg_attribute", "pg_type") OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "information_schema"."_pg_truetypmod"("pg_attribute", "pg_type") RETURNS integer
    LANGUAGE "sql" IMMUTABLE STRICT PARALLEL SAFE
    RETURN CASE WHEN (($2)."typtype" = 'd'::"char") THEN ($2)."typtypmod" ELSE ($1)."atttypmod" END;


ALTER FUNCTION "information_schema"."_pg_truetypmod"("pg_attribute", "pg_type") OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "pgbouncer"."get_auth"("p_usename" "text") RETURNS TABLE("username" "text", "password" "text")
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $_$
begin
    raise debug 'PgBouncer auth request: %', p_usename;

    return query
    select 
        rolname::text, 
        case when rolvaliduntil < now() 
            then null 
            else rolpassword::text 
        end 
    from pg_authid 
    where rolname=$1 and rolcanlogin;
end;
$_$;


ALTER FUNCTION "pgbouncer"."get_auth"("p_usename" "text") OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "public"."handle_profile_update"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$;


ALTER FUNCTION "public"."handle_profile_update"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_updated_at"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."handle_updated_at"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."match_embeddings"("query_embedding" "public"."vector", "match_threshold" double precision, "match_count" integer) RETURNS TABLE("content" "text", "similarity" double precision)
    LANGUAGE "plpgsql"
    AS $$
begin
    return query
    select
        test_embeddings.content,
        1 - (test_embeddings.embedding <=> query_embedding) as similarity
    from test_embeddings
    where 1 - (test_embeddings.embedding <=> query_embedding) > match_threshold
    order by test_embeddings.embedding <=> query_embedding
    limit match_count;
end;
$$;


ALTER FUNCTION "public"."match_embeddings"("query_embedding" "public"."vector", "match_threshold" double precision, "match_count" integer) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."raw_sql"("query" "text") RETURNS "text"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
declare
    result text;
begin
    execute query into result;
    return result;
end;
$$;


ALTER FUNCTION "public"."raw_sql"("query" "text") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "realtime"."apply_rls"("wal" "jsonb", "max_record_bytes" integer DEFAULT (1024 * 1024)) RETURNS SETOF "realtime"."wal_rls"
    LANGUAGE "plpgsql"
    AS $$
declare
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

columns realtime.wal_column[];
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION "realtime"."apply_rls"("wal" "jsonb", "max_record_bytes" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."broadcast_changes"("topic_name" "text", "event_name" "text", "operation" "text", "table_name" "text", "table_schema" "text", "new" "record", "old" "record", "level" "text" DEFAULT 'ROW'::"text") RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION "realtime"."broadcast_changes"("topic_name" "text", "event_name" "text", "operation" "text", "table_name" "text", "table_schema" "text", "new" "record", "old" "record", "level" "text") OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."build_prepared_statement_sql"("prepared_statement_name" "text", "entity" "regclass", "columns" "realtime"."wal_column"[]) RETURNS "text"
    LANGUAGE "sql"
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION "realtime"."build_prepared_statement_sql"("prepared_statement_name" "text", "entity" "regclass", "columns" "realtime"."wal_column"[]) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."cast"("val" "text", "type_" "regtype") RETURNS "jsonb"
    LANGUAGE "plpgsql" IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION "realtime"."cast"("val" "text", "type_" "regtype") OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."check_equality_op"("op" "realtime"."equality_op", "type_" "regtype", "val_1" "text", "val_2" "text") RETURNS boolean
    LANGUAGE "plpgsql" IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION "realtime"."check_equality_op"("op" "realtime"."equality_op", "type_" "regtype", "val_1" "text", "val_2" "text") OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."is_visible_through_filters"("columns" "realtime"."wal_column"[], "filters" "realtime"."user_defined_filter"[]) RETURNS boolean
    LANGUAGE "sql" IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION "realtime"."is_visible_through_filters"("columns" "realtime"."wal_column"[], "filters" "realtime"."user_defined_filter"[]) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."list_changes"("publication" "name", "slot_name" "name", "max_changes" integer, "max_record_bytes" integer) RETURNS SETOF "realtime"."wal_rls"
    LANGUAGE "sql"
    SET "log_min_messages" TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION "realtime"."list_changes"("publication" "name", "slot_name" "name", "max_changes" integer, "max_record_bytes" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."quote_wal2json"("entity" "regclass") RETURNS "text"
    LANGUAGE "sql" IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION "realtime"."quote_wal2json"("entity" "regclass") OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."send"("payload" "jsonb", "event" "text", "topic" "text", "private" boolean DEFAULT true) RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      PERFORM pg_notify(
          'realtime:system',
          jsonb_build_object(
              'error', SQLERRM,
              'function', 'realtime.send',
              'event', event,
              'topic', topic,
              'private', private
          )::text
      );
  END;
END;
$$;


ALTER FUNCTION "realtime"."send"("payload" "jsonb", "event" "text", "topic" "text", "private" boolean) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."subscription_check_filters"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION "realtime"."subscription_check_filters"() OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."to_regrole"("role_name" "text") RETURNS "regrole"
    LANGUAGE "sql" IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION "realtime"."to_regrole"("role_name" "text") OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "realtime"."topic"() RETURNS "text"
    LANGUAGE "sql" STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION "realtime"."topic"() OWNER TO "supabase_realtime_admin";


CREATE OR REPLACE FUNCTION "storage"."can_insert_object"("bucketid" "text", "name" "text", "owner" "uuid", "metadata" "jsonb") RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION "storage"."can_insert_object"("bucketid" "text", "name" "text", "owner" "uuid", "metadata" "jsonb") OWNER TO "supabase_storage_admin";


CREATE OR REPLACE FUNCTION "storage"."extension"("name" "text") RETURNS "text"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION "storage"."extension"("name" "text") OWNER TO "supabase_storage_admin";


CREATE OR REPLACE FUNCTION "storage"."filename"("name" "text") RETURNS "text"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION "storage"."filename"("name" "text") OWNER TO "supabase_storage_admin";


CREATE OR REPLACE FUNCTION "storage"."foldername"("name" "text") RETURNS "text"[]
    LANGUAGE "plpgsql"
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION "storage"."foldername"("name" "text") OWNER TO "supabase_storage_admin";


CREATE OR REPLACE FUNCTION "storage"."get_size_by_bucket"() RETURNS TABLE("size" bigint, "bucket_id" "text")
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION "storage"."get_size_by_bucket"() OWNER TO "supabase_storage_admin";


CREATE OR REPLACE FUNCTION "storage"."list_multipart_uploads_with_delimiter"("bucket_id" "text", "prefix_param" "text", "delimiter_param" "text", "max_keys" integer DEFAULT 100, "next_key_token" "text" DEFAULT ''::"text", "next_upload_token" "text" DEFAULT ''::"text") RETURNS TABLE("key" "text", "id" "text", "created_at" timestamp with time zone)
    LANGUAGE "plpgsql"
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION "storage"."list_multipart_uploads_with_delimiter"("bucket_id" "text", "prefix_param" "text", "delimiter_param" "text", "max_keys" integer, "next_key_token" "text", "next_upload_token" "text") OWNER TO "supabase_storage_admin";


CREATE OR REPLACE FUNCTION "storage"."list_objects_with_delimiter"("bucket_id" "text", "prefix_param" "text", "delimiter_param" "text", "max_keys" integer DEFAULT 100, "start_after" "text" DEFAULT ''::"text", "next_token" "text" DEFAULT ''::"text") RETURNS TABLE("name" "text", "id" "uuid", "metadata" "jsonb", "updated_at" timestamp with time zone)
    LANGUAGE "plpgsql"
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION "storage"."list_objects_with_delimiter"("bucket_id" "text", "prefix_param" "text", "delimiter_param" "text", "max_keys" integer, "start_after" "text", "next_token" "text") OWNER TO "supabase_storage_admin";


CREATE OR REPLACE FUNCTION "storage"."operation"() RETURNS "text"
    LANGUAGE "plpgsql" STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION "storage"."operation"() OWNER TO "supabase_storage_admin";


CREATE OR REPLACE FUNCTION "storage"."search"("prefix" "text", "bucketname" "text", "limits" integer DEFAULT 100, "levels" integer DEFAULT 1, "offsets" integer DEFAULT 0, "search" "text" DEFAULT ''::"text", "sortcolumn" "text" DEFAULT 'name'::"text", "sortorder" "text" DEFAULT 'asc'::"text") RETURNS TABLE("name" "text", "id" "uuid", "updated_at" timestamp with time zone, "created_at" timestamp with time zone, "last_accessed_at" timestamp with time zone, "metadata" "jsonb")
    LANGUAGE "plpgsql" STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION "storage"."search"("prefix" "text", "bucketname" "text", "limits" integer, "levels" integer, "offsets" integer, "search" "text", "sortcolumn" "text", "sortorder" "text") OWNER TO "supabase_storage_admin";


CREATE OR REPLACE FUNCTION "storage"."update_updated_at_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION "storage"."update_updated_at_column"() OWNER TO "supabase_storage_admin";


CREATE OPERATOR "pg_catalog".!! (
    FUNCTION = "tsquery_not",
    RIGHTARG = "tsquery"
);


ALTER OPERATOR "pg_catalog".!! (NONE, "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!! (NONE, "tsquery") IS 'NOT tsquery';



CREATE OPERATOR "pg_catalog".!~ (
    FUNCTION = "nameregexne",
    LEFTARG = "name",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~),
    RESTRICT = "regexnesel",
    JOIN = "regexnejoinsel"
);


ALTER OPERATOR "pg_catalog".!~ ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~ ("name", "text") IS 'does not match regular expression, case-sensitive';



CREATE OPERATOR "pg_catalog".!~ (
    FUNCTION = "textregexne",
    LEFTARG = "text",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~),
    RESTRICT = "regexnesel",
    JOIN = "regexnejoinsel"
);


ALTER OPERATOR "pg_catalog".!~ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~ ("text", "text") IS 'does not match regular expression, case-sensitive';



CREATE OPERATOR "pg_catalog".!~ (
    FUNCTION = "bpcharregexne",
    LEFTARG = character,
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~),
    RESTRICT = "regexnesel",
    JOIN = "regexnejoinsel"
);


ALTER OPERATOR "pg_catalog".!~ (character, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~ (character, "text") IS 'does not match regular expression, case-sensitive';



CREATE OPERATOR "pg_catalog".!~* (
    FUNCTION = "nameicregexne",
    LEFTARG = "name",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~*),
    RESTRICT = "icregexnesel",
    JOIN = "icregexnejoinsel"
);


ALTER OPERATOR "pg_catalog".!~* ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~* ("name", "text") IS 'does not match regular expression, case-insensitive';



CREATE OPERATOR "pg_catalog".!~* (
    FUNCTION = "texticregexne",
    LEFTARG = "text",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~*),
    RESTRICT = "icregexnesel",
    JOIN = "icregexnejoinsel"
);


ALTER OPERATOR "pg_catalog".!~* ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~* ("text", "text") IS 'does not match regular expression, case-insensitive';



CREATE OPERATOR "pg_catalog".!~* (
    FUNCTION = "bpcharicregexne",
    LEFTARG = character,
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~*),
    RESTRICT = "icregexnesel",
    JOIN = "icregexnejoinsel"
);


ALTER OPERATOR "pg_catalog".!~* (character, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~* (character, "text") IS 'does not match regular expression, case-insensitive';



CREATE OPERATOR "pg_catalog".!~~ (
    FUNCTION = "namenlike",
    LEFTARG = "name",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~~),
    RESTRICT = "nlikesel",
    JOIN = "nlikejoinsel"
);


ALTER OPERATOR "pg_catalog".!~~ ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~~ ("name", "text") IS 'does not match LIKE expression';



CREATE OPERATOR "pg_catalog".!~~ (
    FUNCTION = "textnlike",
    LEFTARG = "text",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~~),
    RESTRICT = "nlikesel",
    JOIN = "nlikejoinsel"
);


ALTER OPERATOR "pg_catalog".!~~ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~~ ("text", "text") IS 'does not match LIKE expression';



CREATE OPERATOR "pg_catalog".!~~ (
    FUNCTION = "bpcharnlike",
    LEFTARG = character,
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~~),
    RESTRICT = "nlikesel",
    JOIN = "nlikejoinsel"
);


ALTER OPERATOR "pg_catalog".!~~ (character, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~~ (character, "text") IS 'does not match LIKE expression';



CREATE OPERATOR "pg_catalog".!~~ (
    FUNCTION = "byteanlike",
    LEFTARG = "bytea",
    RIGHTARG = "bytea",
    NEGATOR = OPERATOR("pg_catalog".~~),
    RESTRICT = "nlikesel",
    JOIN = "nlikejoinsel"
);


ALTER OPERATOR "pg_catalog".!~~ ("bytea", "bytea") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~~ ("bytea", "bytea") IS 'does not match LIKE expression';



CREATE OPERATOR "pg_catalog".!~~* (
    FUNCTION = "nameicnlike",
    LEFTARG = "name",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~~*),
    RESTRICT = "icnlikesel",
    JOIN = "icnlikejoinsel"
);


ALTER OPERATOR "pg_catalog".!~~* ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~~* ("name", "text") IS 'does not match LIKE expression, case-insensitive';



CREATE OPERATOR "pg_catalog".!~~* (
    FUNCTION = "texticnlike",
    LEFTARG = "text",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~~*),
    RESTRICT = "icnlikesel",
    JOIN = "icnlikejoinsel"
);


ALTER OPERATOR "pg_catalog".!~~* ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~~* ("text", "text") IS 'does not match LIKE expression, case-insensitive';



CREATE OPERATOR "pg_catalog".!~~* (
    FUNCTION = "bpcharicnlike",
    LEFTARG = character,
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".~~*),
    RESTRICT = "icnlikesel",
    JOIN = "icnlikejoinsel"
);


ALTER OPERATOR "pg_catalog".!~~* (character, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".!~~* (character, "text") IS 'does not match LIKE expression, case-insensitive';



CREATE OPERATOR "pg_catalog".# (
    FUNCTION = "path_npoints",
    RIGHTARG = "path"
);


ALTER OPERATOR "pg_catalog".# (NONE, "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".# (NONE, "path") IS 'number of points';



CREATE OPERATOR "pg_catalog".# (
    FUNCTION = "poly_npoints",
    RIGHTARG = "polygon"
);


ALTER OPERATOR "pg_catalog".# (NONE, "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".# (NONE, "polygon") IS 'number of points';



CREATE OPERATOR "pg_catalog".# (
    FUNCTION = "box_intersect",
    LEFTARG = "box",
    RIGHTARG = "box"
);


ALTER OPERATOR "pg_catalog".# ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".# ("box", "box") IS 'box intersection';



CREATE OPERATOR "pg_catalog".# (
    FUNCTION = "lseg_interpt",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".#)
);


ALTER OPERATOR "pg_catalog".# ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".# ("lseg", "lseg") IS 'intersection point';



CREATE OPERATOR "pg_catalog".# (
    FUNCTION = "line_interpt",
    LEFTARG = "line",
    RIGHTARG = "line",
    COMMUTATOR = OPERATOR("pg_catalog".#)
);


ALTER OPERATOR "pg_catalog".# ("line", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".# ("line", "line") IS 'intersection point';



CREATE OPERATOR "pg_catalog".# (
    FUNCTION = "bitxor",
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR("pg_catalog".#)
);


ALTER OPERATOR "pg_catalog".# (bit, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".# (bit, bit) IS 'bitwise exclusive or';



CREATE OPERATOR "pg_catalog".# (
    FUNCTION = "int2xor",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".#)
);


ALTER OPERATOR "pg_catalog".# (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".# (smallint, smallint) IS 'bitwise exclusive or';



CREATE OPERATOR "pg_catalog".# (
    FUNCTION = "int4xor",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".#)
);


ALTER OPERATOR "pg_catalog".# (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".# (integer, integer) IS 'bitwise exclusive or';



CREATE OPERATOR "pg_catalog".# (
    FUNCTION = "int8xor",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".#)
);


ALTER OPERATOR "pg_catalog".# (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".# (bigint, bigint) IS 'bitwise exclusive or';



CREATE OPERATOR "pg_catalog".## (
    FUNCTION = "close_pl",
    LEFTARG = "point",
    RIGHTARG = "line"
);


ALTER OPERATOR "pg_catalog".## ("point", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".## ("point", "line") IS 'closest point to A on B';



CREATE OPERATOR "pg_catalog".## (
    FUNCTION = "close_ps",
    LEFTARG = "point",
    RIGHTARG = "lseg"
);


ALTER OPERATOR "pg_catalog".## ("point", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".## ("point", "lseg") IS 'closest point to A on B';



CREATE OPERATOR "pg_catalog".## (
    FUNCTION = "close_pb",
    LEFTARG = "point",
    RIGHTARG = "box"
);


ALTER OPERATOR "pg_catalog".## ("point", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".## ("point", "box") IS 'closest point to A on B';



CREATE OPERATOR "pg_catalog".## (
    FUNCTION = "close_sb",
    LEFTARG = "lseg",
    RIGHTARG = "box"
);


ALTER OPERATOR "pg_catalog".## ("lseg", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".## ("lseg", "box") IS 'closest point to A on B';



CREATE OPERATOR "pg_catalog".## (
    FUNCTION = "close_ls",
    LEFTARG = "line",
    RIGHTARG = "lseg"
);


ALTER OPERATOR "pg_catalog".## ("line", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".## ("line", "lseg") IS 'closest point to A on B';



CREATE OPERATOR "pg_catalog".## (
    FUNCTION = "close_lseg",
    LEFTARG = "lseg",
    RIGHTARG = "lseg"
);


ALTER OPERATOR "pg_catalog".## ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".## ("lseg", "lseg") IS 'closest point to A on B';



CREATE OPERATOR "pg_catalog".#- (
    FUNCTION = "jsonb_delete_path",
    LEFTARG = "jsonb",
    RIGHTARG = "text"[]
);


ALTER OPERATOR "pg_catalog".#- ("jsonb", "text"[]) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".#- ("jsonb", "text"[]) IS 'delete path';



CREATE OPERATOR "pg_catalog".#> (
    FUNCTION = "jsonb_extract_path",
    LEFTARG = "jsonb",
    RIGHTARG = "text"[]
);


ALTER OPERATOR "pg_catalog".#> ("jsonb", "text"[]) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".#> ("jsonb", "text"[]) IS 'get value from jsonb with path elements';



CREATE OPERATOR "pg_catalog".#> (
    FUNCTION = "json_extract_path",
    LEFTARG = json,
    RIGHTARG = "text"[]
);


ALTER OPERATOR "pg_catalog".#> (json, "text"[]) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".#> (json, "text"[]) IS 'get value from json with path elements';



CREATE OPERATOR "pg_catalog".#>> (
    FUNCTION = "jsonb_extract_path_text",
    LEFTARG = "jsonb",
    RIGHTARG = "text"[]
);


ALTER OPERATOR "pg_catalog".#>> ("jsonb", "text"[]) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".#>> ("jsonb", "text"[]) IS 'get value from jsonb as text with path elements';



CREATE OPERATOR "pg_catalog".#>> (
    FUNCTION = "json_extract_path_text",
    LEFTARG = json,
    RIGHTARG = "text"[]
);


ALTER OPERATOR "pg_catalog".#>> (json, "text"[]) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".#>> (json, "text"[]) IS 'get value from json as text with path elements';



CREATE OPERATOR "pg_catalog".% (
    FUNCTION = "int8mod",
    LEFTARG = bigint,
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog".% (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".% (bigint, bigint) IS 'modulus';



CREATE OPERATOR "pg_catalog".% (
    FUNCTION = "int2mod",
    LEFTARG = smallint,
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog".% (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".% (smallint, smallint) IS 'modulus';



CREATE OPERATOR "pg_catalog".% (
    FUNCTION = "int4mod",
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".% (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".% (integer, integer) IS 'modulus';



CREATE OPERATOR "pg_catalog".% (
    FUNCTION = "numeric_mod",
    LEFTARG = numeric,
    RIGHTARG = numeric
);


ALTER OPERATOR "pg_catalog".% (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".% (numeric, numeric) IS 'modulus';



CREATE OPERATOR "pg_catalog".& (
    FUNCTION = "bitand",
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR("pg_catalog".&)
);


ALTER OPERATOR "pg_catalog".& (bit, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".& (bit, bit) IS 'bitwise and';



CREATE OPERATOR "pg_catalog".& (
    FUNCTION = "int2and",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".&)
);


ALTER OPERATOR "pg_catalog".& (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".& (smallint, smallint) IS 'bitwise and';



CREATE OPERATOR "pg_catalog".& (
    FUNCTION = "int4and",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".&)
);


ALTER OPERATOR "pg_catalog".& (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".& (integer, integer) IS 'bitwise and';



CREATE OPERATOR "pg_catalog".& (
    FUNCTION = "int8and",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".&)
);


ALTER OPERATOR "pg_catalog".& (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".& (bigint, bigint) IS 'bitwise and';



CREATE OPERATOR "pg_catalog".& (
    FUNCTION = "inetand",
    LEFTARG = "inet",
    RIGHTARG = "inet"
);


ALTER OPERATOR "pg_catalog".& ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".& ("inet", "inet") IS 'bitwise and';



CREATE OPERATOR "pg_catalog".& (
    FUNCTION = "macaddr_and",
    LEFTARG = "macaddr",
    RIGHTARG = "macaddr"
);


ALTER OPERATOR "pg_catalog".& ("macaddr", "macaddr") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".& ("macaddr", "macaddr") IS 'bitwise and';



CREATE OPERATOR "pg_catalog".& (
    FUNCTION = "macaddr8_and",
    LEFTARG = "macaddr8",
    RIGHTARG = "macaddr8"
);


ALTER OPERATOR "pg_catalog".& ("macaddr8", "macaddr8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".& ("macaddr8", "macaddr8") IS 'bitwise and';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "poly_overlap",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    COMMUTATOR = OPERATOR("pg_catalog".&&),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".&& ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("polygon", "polygon") IS 'overlaps';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "box_overlap",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".&&),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".&& ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("box", "box") IS 'overlaps';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "circle_overlap",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".&&),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".&& ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("circle", "circle") IS 'overlaps';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "arrayoverlap",
    LEFTARG = "anyarray",
    RIGHTARG = "anyarray",
    COMMUTATOR = OPERATOR("pg_catalog".&&),
    RESTRICT = "arraycontsel",
    JOIN = "arraycontjoinsel"
);


ALTER OPERATOR "pg_catalog".&& ("anyarray", "anyarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("anyarray", "anyarray") IS 'overlaps';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "range_overlaps_multirange",
    LEFTARG = "anyrange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".&&),
    RESTRICT = "multirangesel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".&& ("anyrange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("anyrange", "anymultirange") IS 'overlaps';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "multirange_overlaps_range",
    LEFTARG = "anymultirange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".&&),
    RESTRICT = "multirangesel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".&& ("anymultirange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("anymultirange", "anyrange") IS 'overlaps';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "multirange_overlaps_multirange",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".&&),
    RESTRICT = "multirangesel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".&& ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("anymultirange", "anymultirange") IS 'overlaps';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "network_overlap",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".&&),
    RESTRICT = "networksel",
    JOIN = "networkjoinsel"
);


ALTER OPERATOR "pg_catalog".&& ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("inet", "inet") IS 'overlaps (is subnet or supernet)';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "tsquery_and",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery"
);


ALTER OPERATOR "pg_catalog".&& ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("tsquery", "tsquery") IS 'AND-concatenate';



CREATE OPERATOR "pg_catalog".&& (
    FUNCTION = "range_overlaps",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".&&),
    RESTRICT = "rangesel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".&& ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&& ("anyrange", "anyrange") IS 'overlaps';



CREATE OPERATOR "pg_catalog".&< (
    FUNCTION = "poly_overleft",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".&< ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&< ("polygon", "polygon") IS 'overlaps or is left of';



CREATE OPERATOR "pg_catalog".&< (
    FUNCTION = "box_overleft",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".&< ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&< ("box", "box") IS 'overlaps or is left of';



CREATE OPERATOR "pg_catalog".&< (
    FUNCTION = "circle_overleft",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".&< ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&< ("circle", "circle") IS 'overlaps or is left of';



CREATE OPERATOR "pg_catalog".&< (
    FUNCTION = "range_overleft_multirange",
    LEFTARG = "anyrange",
    RIGHTARG = "anymultirange",
    RESTRICT = "multirangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".&< ("anyrange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&< ("anyrange", "anymultirange") IS 'overlaps or is left of';



CREATE OPERATOR "pg_catalog".&< (
    FUNCTION = "multirange_overleft_range",
    LEFTARG = "anymultirange",
    RIGHTARG = "anyrange",
    RESTRICT = "multirangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".&< ("anymultirange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&< ("anymultirange", "anyrange") IS 'overlaps or is left of';



CREATE OPERATOR "pg_catalog".&< (
    FUNCTION = "multirange_overleft_multirange",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    RESTRICT = "multirangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".&< ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&< ("anymultirange", "anymultirange") IS 'overlaps or is left of';



CREATE OPERATOR "pg_catalog".&< (
    FUNCTION = "range_overleft",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    RESTRICT = "rangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".&< ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&< ("anyrange", "anyrange") IS 'overlaps or is left of';



CREATE OPERATOR "pg_catalog".&<| (
    FUNCTION = "box_overbelow",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".&<| ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&<| ("box", "box") IS 'overlaps or is below';



CREATE OPERATOR "pg_catalog".&<| (
    FUNCTION = "poly_overbelow",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".&<| ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&<| ("polygon", "polygon") IS 'overlaps or is below';



CREATE OPERATOR "pg_catalog".&<| (
    FUNCTION = "circle_overbelow",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".&<| ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&<| ("circle", "circle") IS 'overlaps or is below';



CREATE OPERATOR "pg_catalog".&> (
    FUNCTION = "poly_overright",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".&> ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&> ("polygon", "polygon") IS 'overlaps or is right of';



CREATE OPERATOR "pg_catalog".&> (
    FUNCTION = "box_overright",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".&> ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&> ("box", "box") IS 'overlaps or is right of';



CREATE OPERATOR "pg_catalog".&> (
    FUNCTION = "circle_overright",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".&> ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&> ("circle", "circle") IS 'overlaps or is right of';



CREATE OPERATOR "pg_catalog".&> (
    FUNCTION = "range_overright_multirange",
    LEFTARG = "anyrange",
    RIGHTARG = "anymultirange",
    RESTRICT = "multirangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".&> ("anyrange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&> ("anyrange", "anymultirange") IS 'overlaps or is right of';



CREATE OPERATOR "pg_catalog".&> (
    FUNCTION = "range_overright",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    RESTRICT = "rangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".&> ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&> ("anyrange", "anyrange") IS 'overlaps or is right of';



CREATE OPERATOR "pg_catalog".&> (
    FUNCTION = "multirange_overright_range",
    LEFTARG = "anymultirange",
    RIGHTARG = "anyrange",
    RESTRICT = "multirangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".&> ("anymultirange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&> ("anymultirange", "anyrange") IS 'overlaps or is right of';



CREATE OPERATOR "pg_catalog".&> (
    FUNCTION = "multirange_overright_multirange",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    RESTRICT = "multirangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".&> ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".&> ("anymultirange", "anymultirange") IS 'overlaps or is right of';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int4mul",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (integer, integer) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int2mul",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (smallint, smallint) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int24mul",
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (smallint, integer) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int42mul",
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (integer, smallint) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "float4mul",
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (real, real) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "float8mul",
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (double precision, double precision) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int8mul",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (bigint, bigint) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int84mul",
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (bigint, integer) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int48mul",
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (integer, bigint) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "point_mul",
    LEFTARG = "point",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("point", "point") IS 'multiply points (scale/rotate)';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "path_mul_pt",
    LEFTARG = "path",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".* ("path", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("path", "point") IS 'multiply (rotate/scale path)';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "box_mul",
    LEFTARG = "box",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".* ("box", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("box", "point") IS 'multiply box by point (scale)';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int82mul",
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (bigint, smallint) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int28mul",
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (smallint, bigint) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "cash_mul_flt4",
    LEFTARG = "money",
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* ("money", real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("money", real) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "flt4_mul_cash",
    LEFTARG = real,
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (real, "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (real, "money") IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "cash_mul_flt8",
    LEFTARG = "money",
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* ("money", double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("money", double precision) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "cash_mul_int4",
    LEFTARG = "money",
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* ("money", integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("money", integer) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "cash_mul_int2",
    LEFTARG = "money",
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* ("money", smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("money", smallint) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "flt8_mul_cash",
    LEFTARG = double precision,
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (double precision, "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (double precision, "money") IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int4_mul_cash",
    LEFTARG = integer,
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (integer, "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (integer, "money") IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int2_mul_cash",
    LEFTARG = smallint,
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (smallint, "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (smallint, "money") IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "float48mul",
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (real, double precision) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "float84mul",
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (double precision, real) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "circle_mul_pt",
    LEFTARG = "circle",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".* ("circle", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("circle", "point") IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "interval_mul",
    LEFTARG = interval,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (interval, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (interval, double precision) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "mul_d_interval",
    LEFTARG = double precision,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (double precision, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (double precision, interval) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "numeric_mul",
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (numeric, numeric) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "cash_mul_int8",
    LEFTARG = "money",
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* ("money", bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("money", bigint) IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "int8_mul_cash",
    LEFTARG = bigint,
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* (bigint, "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* (bigint, "money") IS 'multiply';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "range_intersect",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("anyrange", "anyrange") IS 'range intersection';



CREATE OPERATOR "pg_catalog".* (
    FUNCTION = "multirange_intersect",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".*)
);


ALTER OPERATOR "pg_catalog".* ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".* ("anymultirange", "anymultirange") IS 'multirange intersect';



CREATE OPERATOR "pg_catalog".*< (
    FUNCTION = "record_image_lt",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".*>),
    NEGATOR = OPERATOR("pg_catalog".*>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".*< ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".*< ("record", "record") IS 'less than';



CREATE OPERATOR "pg_catalog".*<= (
    FUNCTION = "record_image_le",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".*>=),
    NEGATOR = OPERATOR("pg_catalog".*>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".*<= ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".*<= ("record", "record") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".*<> (
    FUNCTION = "record_image_ne",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".*<>),
    NEGATOR = OPERATOR("pg_catalog".*=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".*<> ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".*<> ("record", "record") IS 'not identical';



CREATE OPERATOR "pg_catalog".*= (
    FUNCTION = "record_image_eq",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".*=),
    NEGATOR = OPERATOR("pg_catalog".*<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".*= ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".*= ("record", "record") IS 'identical';



CREATE OPERATOR "pg_catalog".*> (
    FUNCTION = "record_image_gt",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".*<),
    NEGATOR = OPERATOR("pg_catalog".*<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".*> ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".*> ("record", "record") IS 'greater than';



CREATE OPERATOR "pg_catalog".*>= (
    FUNCTION = "record_image_ge",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".*<=),
    NEGATOR = OPERATOR("pg_catalog".*<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".*>= ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".*>= ("record", "record") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int8up",
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog".+ (NONE, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (NONE, bigint) IS 'unary plus';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int2up",
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog".+ (NONE, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (NONE, smallint) IS 'unary plus';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int4up",
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".+ (NONE, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (NONE, integer) IS 'unary plus';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "float4up",
    RIGHTARG = real
);


ALTER OPERATOR "pg_catalog".+ (NONE, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (NONE, real) IS 'unary plus';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "float8up",
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog".+ (NONE, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (NONE, double precision) IS 'unary plus';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "numeric_uplus",
    RIGHTARG = numeric
);


ALTER OPERATOR "pg_catalog".+ (NONE, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (NONE, numeric) IS 'unary plus';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int2pl",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (smallint, smallint) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int4pl",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (integer, integer) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int24pl",
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (smallint, integer) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int42pl",
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (integer, smallint) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "float4pl",
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (real, real) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "float8pl",
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (double precision, double precision) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int8pl",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (bigint, bigint) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int84pl",
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (bigint, integer) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int48pl",
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (integer, bigint) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "point_add",
    LEFTARG = "point",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("point", "point") IS 'add points (translate)';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "path_add",
    LEFTARG = "path",
    RIGHTARG = "path",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("path", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("path", "path") IS 'concatenate';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "path_add_pt",
    LEFTARG = "path",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".+ ("path", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("path", "point") IS 'add (translate path)';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "box_add",
    LEFTARG = "box",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".+ ("box", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("box", "point") IS 'add point to box (translate)';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int82pl",
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (bigint, smallint) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int28pl",
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (smallint, bigint) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "cash_pl",
    LEFTARG = "money",
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("money", "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("money", "money") IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "aclinsert",
    LEFTARG = "aclitem"[],
    RIGHTARG = "aclitem"
);


ALTER OPERATOR "pg_catalog".+ ("aclitem"[], "aclitem") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("aclitem"[], "aclitem") IS 'add/update ACL item';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "date_pl_interval",
    LEFTARG = "date",
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("date", interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("date", interval) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "date_pli",
    LEFTARG = "date",
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("date", integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("date", integer) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "float48pl",
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (real, double precision) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "float84pl",
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (double precision, real) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "timestamptz_pl_interval",
    LEFTARG = timestamp with time zone,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (timestamp with time zone, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (timestamp with time zone, interval) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "interval_pl",
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (interval, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (interval, interval) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "datetime_pl",
    LEFTARG = "date",
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("date", time without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("date", time without time zone) IS 'convert date and time to timestamp';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "datetimetz_pl",
    LEFTARG = "date",
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("date", time with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("date", time with time zone) IS 'convert date and time with time zone to timestamp with time zone';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "timedate_pl",
    LEFTARG = time without time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (time without time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (time without time zone, "date") IS 'convert time and date to timestamp';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "timetzdate_pl",
    LEFTARG = time with time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (time with time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (time with time zone, "date") IS 'convert time with time zone and date to timestamp with time zone';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "circle_add_pt",
    LEFTARG = "circle",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".+ ("circle", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("circle", "point") IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "numeric_add",
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (numeric, numeric) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "time_pl_interval",
    LEFTARG = time without time zone,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (time without time zone, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (time without time zone, interval) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "timetz_pl_interval",
    LEFTARG = time with time zone,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (time with time zone, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (time with time zone, interval) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "interval_pl_time",
    LEFTARG = interval,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (interval, time without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (interval, time without time zone) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "timestamp_pl_interval",
    LEFTARG = timestamp without time zone,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (timestamp without time zone, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (timestamp without time zone, interval) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "interval_pl_date",
    LEFTARG = interval,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (interval, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (interval, "date") IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "interval_pl_timetz",
    LEFTARG = interval,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (interval, time with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (interval, time with time zone) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "interval_pl_timestamp",
    LEFTARG = interval,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (interval, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (interval, timestamp without time zone) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "interval_pl_timestamptz",
    LEFTARG = interval,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (interval, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (interval, timestamp with time zone) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "integer_pl_date",
    LEFTARG = integer,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (integer, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (integer, "date") IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "inetpl",
    LEFTARG = "inet",
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("inet", bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("inet", bigint) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "int8pl_inet",
    LEFTARG = bigint,
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (bigint, "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (bigint, "inet") IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "range_union",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("anyrange", "anyrange") IS 'range union';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "multirange_union",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("anymultirange", "anymultirange") IS 'multirange union';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "pg_lsn_pli",
    LEFTARG = "pg_lsn",
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ ("pg_lsn", numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ ("pg_lsn", numeric) IS 'add';



CREATE OPERATOR "pg_catalog".+ (
    FUNCTION = "numeric_pl_pg_lsn",
    LEFTARG = numeric,
    RIGHTARG = "pg_lsn",
    COMMUTATOR = OPERATOR("pg_catalog".+)
);


ALTER OPERATOR "pg_catalog".+ (numeric, "pg_lsn") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".+ (numeric, "pg_lsn") IS 'add';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int8um",
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog".- (NONE, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (NONE, bigint) IS 'negate';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int4um",
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".- (NONE, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (NONE, integer) IS 'negate';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int2um",
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog".- (NONE, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (NONE, smallint) IS 'negate';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "float4um",
    RIGHTARG = real
);


ALTER OPERATOR "pg_catalog".- (NONE, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (NONE, real) IS 'negate';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "float8um",
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog".- (NONE, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (NONE, double precision) IS 'negate';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "interval_um",
    RIGHTARG = interval
);


ALTER OPERATOR "pg_catalog".- (NONE, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (NONE, interval) IS 'negate';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "numeric_uminus",
    RIGHTARG = numeric
);


ALTER OPERATOR "pg_catalog".- (NONE, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (NONE, numeric) IS 'negate';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int2mi",
    LEFTARG = smallint,
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog".- (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (smallint, smallint) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int4mi",
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".- (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (integer, integer) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int24mi",
    LEFTARG = smallint,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".- (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (smallint, integer) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int42mi",
    LEFTARG = integer,
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog".- (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (integer, smallint) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "float4mi",
    LEFTARG = real,
    RIGHTARG = real
);


ALTER OPERATOR "pg_catalog".- (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (real, real) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "float8mi",
    LEFTARG = double precision,
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog".- (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (double precision, double precision) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int8mi",
    LEFTARG = bigint,
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog".- (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (bigint, bigint) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int84mi",
    LEFTARG = bigint,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".- (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (bigint, integer) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int48mi",
    LEFTARG = integer,
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog".- (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (integer, bigint) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "point_sub",
    LEFTARG = "point",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".- ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("point", "point") IS 'subtract points (translate)';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "path_sub_pt",
    LEFTARG = "path",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".- ("path", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("path", "point") IS 'subtract (translate path)';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "box_sub",
    LEFTARG = "box",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".- ("box", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("box", "point") IS 'subtract point from box (translate)';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int82mi",
    LEFTARG = bigint,
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog".- (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (bigint, smallint) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "int28mi",
    LEFTARG = smallint,
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog".- (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (smallint, bigint) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "cash_mi",
    LEFTARG = "money",
    RIGHTARG = "money"
);


ALTER OPERATOR "pg_catalog".- ("money", "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("money", "money") IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "aclremove",
    LEFTARG = "aclitem"[],
    RIGHTARG = "aclitem"
);


ALTER OPERATOR "pg_catalog".- ("aclitem"[], "aclitem") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("aclitem"[], "aclitem") IS 'remove ACL item';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "date_mi_interval",
    LEFTARG = "date",
    RIGHTARG = interval
);


ALTER OPERATOR "pg_catalog".- ("date", interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("date", interval) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "date_mi",
    LEFTARG = "date",
    RIGHTARG = "date"
);


ALTER OPERATOR "pg_catalog".- ("date", "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("date", "date") IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "date_mii",
    LEFTARG = "date",
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".- ("date", integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("date", integer) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "float48mi",
    LEFTARG = real,
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog".- (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (real, double precision) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "float84mi",
    LEFTARG = double precision,
    RIGHTARG = real
);


ALTER OPERATOR "pg_catalog".- (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (double precision, real) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "timestamptz_mi",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone
);


ALTER OPERATOR "pg_catalog".- (timestamp with time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (timestamp with time zone, timestamp with time zone) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "timestamptz_mi_interval",
    LEFTARG = timestamp with time zone,
    RIGHTARG = interval
);


ALTER OPERATOR "pg_catalog".- (timestamp with time zone, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (timestamp with time zone, interval) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "interval_mi",
    LEFTARG = interval,
    RIGHTARG = interval
);


ALTER OPERATOR "pg_catalog".- (interval, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (interval, interval) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "time_mi_time",
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone
);


ALTER OPERATOR "pg_catalog".- (time without time zone, time without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (time without time zone, time without time zone) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "circle_sub_pt",
    LEFTARG = "circle",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog".- ("circle", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("circle", "point") IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "numeric_sub",
    LEFTARG = numeric,
    RIGHTARG = numeric
);


ALTER OPERATOR "pg_catalog".- (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (numeric, numeric) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "time_mi_interval",
    LEFTARG = time without time zone,
    RIGHTARG = interval
);


ALTER OPERATOR "pg_catalog".- (time without time zone, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (time without time zone, interval) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "timetz_mi_interval",
    LEFTARG = time with time zone,
    RIGHTARG = interval
);


ALTER OPERATOR "pg_catalog".- (time with time zone, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (time with time zone, interval) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "timestamp_mi",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone
);


ALTER OPERATOR "pg_catalog".- (timestamp without time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (timestamp without time zone, timestamp without time zone) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "timestamp_mi_interval",
    LEFTARG = timestamp without time zone,
    RIGHTARG = interval
);


ALTER OPERATOR "pg_catalog".- (timestamp without time zone, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- (timestamp without time zone, interval) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "inetmi_int8",
    LEFTARG = "inet",
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog".- ("inet", bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("inet", bigint) IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "inetmi",
    LEFTARG = "inet",
    RIGHTARG = "inet"
);


ALTER OPERATOR "pg_catalog".- ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("inet", "inet") IS 'subtract';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "pg_lsn_mi",
    LEFTARG = "pg_lsn",
    RIGHTARG = "pg_lsn"
);


ALTER OPERATOR "pg_catalog".- ("pg_lsn", "pg_lsn") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("pg_lsn", "pg_lsn") IS 'minus';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "jsonb_delete",
    LEFTARG = "jsonb",
    RIGHTARG = "text"
);


ALTER OPERATOR "pg_catalog".- ("jsonb", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("jsonb", "text") IS 'delete object field';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "jsonb_delete",
    LEFTARG = "jsonb",
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".- ("jsonb", integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("jsonb", integer) IS 'delete array element';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "jsonb_delete",
    LEFTARG = "jsonb",
    RIGHTARG = "text"[]
);


ALTER OPERATOR "pg_catalog".- ("jsonb", "text"[]) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("jsonb", "text"[]) IS 'delete object fields';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "range_minus",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange"
);


ALTER OPERATOR "pg_catalog".- ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("anyrange", "anyrange") IS 'range difference';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "multirange_minus",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange"
);


ALTER OPERATOR "pg_catalog".- ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("anymultirange", "anymultirange") IS 'multirange minus';



CREATE OPERATOR "pg_catalog".- (
    FUNCTION = "pg_lsn_mii",
    LEFTARG = "pg_lsn",
    RIGHTARG = numeric
);


ALTER OPERATOR "pg_catalog".- ("pg_lsn", numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".- ("pg_lsn", numeric) IS 'subtract';



CREATE OPERATOR "pg_catalog".-> (
    FUNCTION = "jsonb_object_field",
    LEFTARG = "jsonb",
    RIGHTARG = "text"
);


ALTER OPERATOR "pg_catalog".-> ("jsonb", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".-> ("jsonb", "text") IS 'get jsonb object field';



CREATE OPERATOR "pg_catalog".-> (
    FUNCTION = "jsonb_array_element",
    LEFTARG = "jsonb",
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".-> ("jsonb", integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".-> ("jsonb", integer) IS 'get jsonb array element';



CREATE OPERATOR "pg_catalog".-> (
    FUNCTION = "json_object_field",
    LEFTARG = json,
    RIGHTARG = "text"
);


ALTER OPERATOR "pg_catalog".-> (json, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".-> (json, "text") IS 'get json object field';



CREATE OPERATOR "pg_catalog".-> (
    FUNCTION = "json_array_element",
    LEFTARG = json,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".-> (json, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".-> (json, integer) IS 'get json array element';



CREATE OPERATOR "pg_catalog".->> (
    FUNCTION = "jsonb_object_field_text",
    LEFTARG = "jsonb",
    RIGHTARG = "text"
);


ALTER OPERATOR "pg_catalog".->> ("jsonb", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".->> ("jsonb", "text") IS 'get jsonb object field as text';



CREATE OPERATOR "pg_catalog".->> (
    FUNCTION = "jsonb_array_element_text",
    LEFTARG = "jsonb",
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".->> ("jsonb", integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".->> ("jsonb", integer) IS 'get jsonb array element as text';



CREATE OPERATOR "pg_catalog".->> (
    FUNCTION = "json_object_field_text",
    LEFTARG = json,
    RIGHTARG = "text"
);


ALTER OPERATOR "pg_catalog".->> (json, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".->> (json, "text") IS 'get json object field as text';



CREATE OPERATOR "pg_catalog".->> (
    FUNCTION = "json_array_element_text",
    LEFTARG = json,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".->> (json, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".->> (json, integer) IS 'get json array element as text';



CREATE OPERATOR "pg_catalog".-|- (
    FUNCTION = "range_adjacent",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".-|-),
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".-|- ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".-|- ("anyrange", "anyrange") IS 'is adjacent to';



CREATE OPERATOR "pg_catalog".-|- (
    FUNCTION = "range_adjacent_multirange",
    LEFTARG = "anyrange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".-|-),
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".-|- ("anyrange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".-|- ("anyrange", "anymultirange") IS 'is adjacent to';



CREATE OPERATOR "pg_catalog".-|- (
    FUNCTION = "multirange_adjacent_range",
    LEFTARG = "anymultirange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".-|-),
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".-|- ("anymultirange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".-|- ("anymultirange", "anyrange") IS 'is adjacent to';



CREATE OPERATOR "pg_catalog".-|- (
    FUNCTION = "multirange_adjacent_multirange",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".-|-),
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".-|- ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".-|- ("anymultirange", "anymultirange") IS 'is adjacent to';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "int2div",
    LEFTARG = smallint,
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog"./ (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (smallint, smallint) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "int4div",
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog"./ (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (integer, integer) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "int24div",
    LEFTARG = smallint,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog"./ (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (smallint, integer) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "int42div",
    LEFTARG = integer,
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog"./ (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (integer, smallint) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "float4div",
    LEFTARG = real,
    RIGHTARG = real
);


ALTER OPERATOR "pg_catalog"./ (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (real, real) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "float8div",
    LEFTARG = double precision,
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog"./ (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (double precision, double precision) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "int8div",
    LEFTARG = bigint,
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog"./ (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (bigint, bigint) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "int84div",
    LEFTARG = bigint,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog"./ (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (bigint, integer) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "int48div",
    LEFTARG = integer,
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog"./ (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (integer, bigint) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "point_div",
    LEFTARG = "point",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog"./ ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("point", "point") IS 'divide points (scale/rotate)';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "path_div_pt",
    LEFTARG = "path",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog"./ ("path", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("path", "point") IS 'divide (rotate/scale path)';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "box_div",
    LEFTARG = "box",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog"./ ("box", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("box", "point") IS 'divide box by point (scale)';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "int82div",
    LEFTARG = bigint,
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog"./ (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (bigint, smallint) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "int28div",
    LEFTARG = smallint,
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog"./ (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (smallint, bigint) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "cash_div_flt4",
    LEFTARG = "money",
    RIGHTARG = real
);


ALTER OPERATOR "pg_catalog"./ ("money", real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("money", real) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "cash_div_flt8",
    LEFTARG = "money",
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog"./ ("money", double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("money", double precision) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "cash_div_int4",
    LEFTARG = "money",
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog"./ ("money", integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("money", integer) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "cash_div_int2",
    LEFTARG = "money",
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog"./ ("money", smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("money", smallint) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "float48div",
    LEFTARG = real,
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog"./ (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (real, double precision) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "float84div",
    LEFTARG = double precision,
    RIGHTARG = real
);


ALTER OPERATOR "pg_catalog"./ (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (double precision, real) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "circle_div_pt",
    LEFTARG = "circle",
    RIGHTARG = "point"
);


ALTER OPERATOR "pg_catalog"./ ("circle", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("circle", "point") IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "interval_div",
    LEFTARG = interval,
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog"./ (interval, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (interval, double precision) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "numeric_div",
    LEFTARG = numeric,
    RIGHTARG = numeric
);


ALTER OPERATOR "pg_catalog"./ (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ (numeric, numeric) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "cash_div_int8",
    LEFTARG = "money",
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog"./ ("money", bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("money", bigint) IS 'divide';



CREATE OPERATOR "pg_catalog"./ (
    FUNCTION = "cash_div_cash",
    LEFTARG = "money",
    RIGHTARG = "money"
);


ALTER OPERATOR "pg_catalog"./ ("money", "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog"./ ("money", "money") IS 'divide';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "int48lt",
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (integer, bigint) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "boollt",
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (boolean, boolean) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (boolean, boolean) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "int2lt",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (smallint, smallint) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "int4lt",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (integer, integer) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "namelttext",
    LEFTARG = "name",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("name", "text") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "textltname",
    LEFTARG = "text",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("text", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("text", "name") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "int8lt",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (bigint, bigint) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "int84lt",
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (bigint, integer) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "box_lt",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".< ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("box", "box") IS 'less than by area';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "int24lt",
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (smallint, integer) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "int42lt",
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (integer, smallint) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "oidlt",
    LEFTARG = "oid",
    RIGHTARG = "oid",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("oid", "oid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("oid", "oid") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "float4lt",
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (real, real) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "charlt",
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("char", "char") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("char", "char") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "oidvectorlt",
    LEFTARG = "oidvector",
    RIGHTARG = "oidvector",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("oidvector", "oidvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("oidvector", "oidvector") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "namelt",
    LEFTARG = "name",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("name", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("name", "name") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "text_lt",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("text", "text") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "float8lt",
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (double precision, double precision) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "path_n_lt",
    LEFTARG = "path",
    RIGHTARG = "path",
    COMMUTATOR = OPERATOR("pg_catalog".>)
);


ALTER OPERATOR "pg_catalog".< ("path", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("path", "path") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "cash_lt",
    LEFTARG = "money",
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("money", "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("money", "money") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "bpcharlt",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (character, character) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "array_lt",
    LEFTARG = "anyarray",
    RIGHTARG = "anyarray",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("anyarray", "anyarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("anyarray", "anyarray") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "date_lt",
    LEFTARG = "date",
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("date", "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("date", "date") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "time_lt",
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (time without time zone, time without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (time without time zone, time without time zone) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "float48lt",
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (real, double precision) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "float84lt",
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (double precision, real) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "network_lt",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("inet", "inet") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "macaddr_lt",
    LEFTARG = "macaddr",
    RIGHTARG = "macaddr",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("macaddr", "macaddr") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("macaddr", "macaddr") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "timestamptz_lt",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (timestamp with time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (timestamp with time zone, timestamp with time zone) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "interval_lt",
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (interval, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (interval, interval) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "circle_lt",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".< ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("circle", "circle") IS 'less than by area';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "timetz_lt",
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (time with time zone, time with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (time with time zone, time with time zone) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "lseg_lt",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=)
);


ALTER OPERATOR "pg_catalog".< ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("lseg", "lseg") IS 'less than by length';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "numeric_lt",
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (numeric, numeric) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "bitlt",
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (bit, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (bit, bit) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "varbitlt",
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (bit varying, bit varying) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (bit varying, bit varying) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "int28lt",
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (smallint, bigint) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "int82lt",
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (bigint, smallint) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "bytealt",
    LEFTARG = "bytea",
    RIGHTARG = "bytea",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("bytea", "bytea") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("bytea", "bytea") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "timestamp_lt",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (timestamp without time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (timestamp without time zone, timestamp without time zone) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "date_lt_timestamp",
    LEFTARG = "date",
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("date", timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("date", timestamp without time zone) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "date_lt_timestamptz",
    LEFTARG = "date",
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("date", timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("date", timestamp with time zone) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "timestamp_lt_date",
    LEFTARG = timestamp without time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (timestamp without time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (timestamp without time zone, "date") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "timestamptz_lt_date",
    LEFTARG = timestamp with time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (timestamp with time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (timestamp with time zone, "date") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "timestamp_lt_timestamptz",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (timestamp without time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (timestamp without time zone, timestamp with time zone) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "timestamptz_lt_timestamp",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< (timestamp with time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< (timestamp with time zone, timestamp without time zone) IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "tidlt",
    LEFTARG = "tid",
    RIGHTARG = "tid",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("tid", "tid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("tid", "tid") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "multirange_lt",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "multirangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("anymultirange", "anymultirange") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "uuid_lt",
    LEFTARG = "uuid",
    RIGHTARG = "uuid",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("uuid", "uuid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("uuid", "uuid") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "record_lt",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("record", "record") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "pg_lsn_lt",
    LEFTARG = "pg_lsn",
    RIGHTARG = "pg_lsn",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("pg_lsn", "pg_lsn") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("pg_lsn", "pg_lsn") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "jsonb_lt",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonb",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("jsonb", "jsonb") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("jsonb", "jsonb") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "macaddr8_lt",
    LEFTARG = "macaddr8",
    RIGHTARG = "macaddr8",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("macaddr8", "macaddr8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("macaddr8", "macaddr8") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "enum_lt",
    LEFTARG = "anyenum",
    RIGHTARG = "anyenum",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("anyenum", "anyenum") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("anyenum", "anyenum") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "tsvector_lt",
    LEFTARG = "tsvector",
    RIGHTARG = "tsvector",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("tsvector", "tsvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("tsvector", "tsvector") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "tsquery_lt",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("tsquery", "tsquery") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "range_lt",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "rangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("anyrange", "anyrange") IS 'less than';



CREATE OPERATOR "pg_catalog".< (
    FUNCTION = "xid8lt",
    LEFTARG = "xid8",
    RIGHTARG = "xid8",
    COMMUTATOR = OPERATOR("pg_catalog".>),
    NEGATOR = OPERATOR("pg_catalog".>=),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".< ("xid8", "xid8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".< ("xid8", "xid8") IS 'less than';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "point_distance",
    LEFTARG = "point",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("point", "point") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_bp",
    LEFTARG = "box",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("box", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("box", "point") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_pl",
    LEFTARG = "point",
    RIGHTARG = "line",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("point", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("point", "line") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_ps",
    LEFTARG = "point",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("point", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("point", "lseg") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_pb",
    LEFTARG = "point",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("point", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("point", "box") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_sl",
    LEFTARG = "lseg",
    RIGHTARG = "line",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("lseg", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("lseg", "line") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_sb",
    LEFTARG = "lseg",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("lseg", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("lseg", "box") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_ppath",
    LEFTARG = "point",
    RIGHTARG = "path",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("point", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("point", "path") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "box_distance",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("box", "box") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "path_distance",
    LEFTARG = "path",
    RIGHTARG = "path",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("path", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("path", "path") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "line_distance",
    LEFTARG = "line",
    RIGHTARG = "line",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("line", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("line", "line") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "lseg_distance",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("lseg", "lseg") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "poly_distance",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("polygon", "polygon") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_lp",
    LEFTARG = "line",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("line", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("line", "point") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_sp",
    LEFTARG = "lseg",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("lseg", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("lseg", "point") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_ls",
    LEFTARG = "line",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("line", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("line", "lseg") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_bs",
    LEFTARG = "box",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("box", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("box", "lseg") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_pathp",
    LEFTARG = "path",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("path", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("path", "point") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_polyc",
    LEFTARG = "polygon",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("polygon", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("polygon", "circle") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "circle_distance",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("circle", "circle") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_pc",
    LEFTARG = "point",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("point", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("point", "circle") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_cpoly",
    LEFTARG = "circle",
    RIGHTARG = "polygon",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("circle", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("circle", "polygon") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_ppoly",
    LEFTARG = "point",
    RIGHTARG = "polygon",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("point", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("point", "polygon") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_polyp",
    LEFTARG = "polygon",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("polygon", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("polygon", "point") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "dist_cpoint",
    LEFTARG = "circle",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<->)
);


ALTER OPERATOR "pg_catalog".<-> ("circle", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("circle", "point") IS 'distance between';



CREATE OPERATOR "pg_catalog".<-> (
    FUNCTION = "tsquery_phrase",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery"
);


ALTER OPERATOR "pg_catalog".<-> ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<-> ("tsquery", "tsquery") IS 'phrase-concatenate';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "poly_left",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<< ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< ("polygon", "polygon") IS 'is left of';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "box_left",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<< ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< ("box", "box") IS 'is left of';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "point_left",
    LEFTARG = "point",
    RIGHTARG = "point",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<< ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< ("point", "point") IS 'is left of';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "network_sub",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".>>),
    RESTRICT = "networksel",
    JOIN = "networkjoinsel"
);


ALTER OPERATOR "pg_catalog".<< ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< ("inet", "inet") IS 'is subnet';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "circle_left",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<< ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< ("circle", "circle") IS 'is left of';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "bitshiftleft",
    LEFTARG = bit,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".<< (bit, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< (bit, integer) IS 'bitwise shift left';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "int2shl",
    LEFTARG = smallint,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".<< (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< (smallint, integer) IS 'bitwise shift left';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "int4shl",
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".<< (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< (integer, integer) IS 'bitwise shift left';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "int8shl",
    LEFTARG = bigint,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".<< (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< (bigint, integer) IS 'bitwise shift left';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "range_before",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".>>),
    RESTRICT = "rangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".<< ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< ("anyrange", "anyrange") IS 'is left of';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "range_before_multirange",
    LEFTARG = "anyrange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".>>),
    RESTRICT = "multirangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".<< ("anyrange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< ("anyrange", "anymultirange") IS 'is left of';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "multirange_before_range",
    LEFTARG = "anymultirange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".>>),
    RESTRICT = "multirangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".<< ("anymultirange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< ("anymultirange", "anyrange") IS 'is left of';



CREATE OPERATOR "pg_catalog".<< (
    FUNCTION = "multirange_before_multirange",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".>>),
    RESTRICT = "multirangesel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".<< ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<< ("anymultirange", "anymultirange") IS 'is left of';



CREATE OPERATOR "pg_catalog".<<= (
    FUNCTION = "network_subeq",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".>>=),
    RESTRICT = "networksel",
    JOIN = "networkjoinsel"
);


ALTER OPERATOR "pg_catalog".<<= ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<<= ("inet", "inet") IS 'is subnet or equal';



CREATE OPERATOR "pg_catalog".<<| (
    FUNCTION = "circle_below",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<<| ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<<| ("circle", "circle") IS 'is below';



CREATE OPERATOR "pg_catalog".<<| (
    FUNCTION = "box_below",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<<| ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<<| ("box", "box") IS 'is below';



CREATE OPERATOR "pg_catalog".<<| (
    FUNCTION = "poly_below",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<<| ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<<| ("polygon", "polygon") IS 'is below';



CREATE OPERATOR "pg_catalog".<<| (
    FUNCTION = "point_below",
    LEFTARG = "point",
    RIGHTARG = "point",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<<| ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<<| ("point", "point") IS 'is below';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "int48le",
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (integer, bigint) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "nameletext",
    LEFTARG = "name",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("name", "text") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "textlename",
    LEFTARG = "text",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("text", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("text", "name") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "int8le",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (bigint, bigint) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "int84le",
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (bigint, integer) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "box_le",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("box", "box") IS 'less than or equal by area';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "int2le",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (smallint, smallint) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "int4le",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (integer, integer) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "int24le",
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (smallint, integer) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "int42le",
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (integer, smallint) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "oidle",
    LEFTARG = "oid",
    RIGHTARG = "oid",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("oid", "oid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("oid", "oid") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "float4le",
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (real, real) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "charle",
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("char", "char") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("char", "char") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "oidvectorle",
    LEFTARG = "oidvector",
    RIGHTARG = "oidvector",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("oidvector", "oidvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("oidvector", "oidvector") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "namele",
    LEFTARG = "name",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("name", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("name", "name") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "text_le",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("text", "text") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "float8le",
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (double precision, double precision) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "path_n_le",
    LEFTARG = "path",
    RIGHTARG = "path",
    COMMUTATOR = OPERATOR("pg_catalog".>=)
);


ALTER OPERATOR "pg_catalog".<= ("path", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("path", "path") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "cash_le",
    LEFTARG = "money",
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("money", "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("money", "money") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "bpcharle",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (character, character) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "array_le",
    LEFTARG = "anyarray",
    RIGHTARG = "anyarray",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("anyarray", "anyarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("anyarray", "anyarray") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "date_le",
    LEFTARG = "date",
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("date", "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("date", "date") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "time_le",
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (time without time zone, time without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (time without time zone, time without time zone) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "float48le",
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (real, double precision) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "float84le",
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (double precision, real) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "network_le",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("inet", "inet") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "macaddr_le",
    LEFTARG = "macaddr",
    RIGHTARG = "macaddr",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("macaddr", "macaddr") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("macaddr", "macaddr") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "timestamptz_le",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (timestamp with time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (timestamp with time zone, timestamp with time zone) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "interval_le",
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (interval, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (interval, interval) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "circle_le",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("circle", "circle") IS 'less than or equal by area';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "timetz_le",
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (time with time zone, time with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (time with time zone, time with time zone) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "lseg_le",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>)
);


ALTER OPERATOR "pg_catalog".<= ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("lseg", "lseg") IS 'less than or equal by length';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "boolle",
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (boolean, boolean) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (boolean, boolean) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "numeric_le",
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (numeric, numeric) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "bitle",
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (bit, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (bit, bit) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "varbitle",
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (bit varying, bit varying) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (bit varying, bit varying) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "int28le",
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (smallint, bigint) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "int82le",
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (bigint, smallint) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "byteale",
    LEFTARG = "bytea",
    RIGHTARG = "bytea",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("bytea", "bytea") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("bytea", "bytea") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "timestamp_le",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (timestamp without time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (timestamp without time zone, timestamp without time zone) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "date_le_timestamp",
    LEFTARG = "date",
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("date", timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("date", timestamp without time zone) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "date_le_timestamptz",
    LEFTARG = "date",
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("date", timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("date", timestamp with time zone) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "timestamp_le_date",
    LEFTARG = timestamp without time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (timestamp without time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (timestamp without time zone, "date") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "timestamptz_le_date",
    LEFTARG = timestamp with time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (timestamp with time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (timestamp with time zone, "date") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "timestamp_le_timestamptz",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (timestamp without time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (timestamp without time zone, timestamp with time zone) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "timestamptz_le_timestamp",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= (timestamp with time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= (timestamp with time zone, timestamp without time zone) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "tidle",
    LEFTARG = "tid",
    RIGHTARG = "tid",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("tid", "tid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("tid", "tid") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "multirange_le",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "multirangesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("anymultirange", "anymultirange") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "uuid_le",
    LEFTARG = "uuid",
    RIGHTARG = "uuid",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("uuid", "uuid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("uuid", "uuid") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "record_le",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("record", "record") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "pg_lsn_le",
    LEFTARG = "pg_lsn",
    RIGHTARG = "pg_lsn",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("pg_lsn", "pg_lsn") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("pg_lsn", "pg_lsn") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "jsonb_le",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonb",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("jsonb", "jsonb") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("jsonb", "jsonb") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "macaddr8_le",
    LEFTARG = "macaddr8",
    RIGHTARG = "macaddr8",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("macaddr8", "macaddr8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("macaddr8", "macaddr8") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "enum_le",
    LEFTARG = "anyenum",
    RIGHTARG = "anyenum",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("anyenum", "anyenum") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("anyenum", "anyenum") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "tsvector_le",
    LEFTARG = "tsvector",
    RIGHTARG = "tsvector",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("tsvector", "tsvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("tsvector", "tsvector") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "tsquery_le",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("tsquery", "tsquery") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "range_le",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "rangesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("anyrange", "anyrange") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<= (
    FUNCTION = "xid8le",
    LEFTARG = "xid8",
    RIGHTARG = "xid8",
    COMMUTATOR = OPERATOR("pg_catalog".>=),
    NEGATOR = OPERATOR("pg_catalog".>),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".<= ("xid8", "xid8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<= ("xid8", "xid8") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "int48ne",
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (integer, bigint) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "boolne",
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (boolean, boolean) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (boolean, boolean) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "namenetext",
    LEFTARG = "name",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("name", "text") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "textnename",
    LEFTARG = "text",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("text", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("text", "name") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "tidne",
    LEFTARG = "tid",
    RIGHTARG = "tid",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("tid", "tid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("tid", "tid") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "int8ne",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (bigint, bigint) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "int84ne",
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (bigint, integer) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "int4ne",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (integer, integer) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "int2ne",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (smallint, smallint) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "textne",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("text", "text") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "int24ne",
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (smallint, integer) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "int42ne",
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (integer, smallint) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "oidne",
    LEFTARG = "oid",
    RIGHTARG = "oid",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("oid", "oid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("oid", "oid") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "float4ne",
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (real, real) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "charne",
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("char", "char") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("char", "char") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "namene",
    LEFTARG = "name",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("name", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("name", "name") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "oidvectorne",
    LEFTARG = "oidvector",
    RIGHTARG = "oidvector",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("oidvector", "oidvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("oidvector", "oidvector") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "float8ne",
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (double precision, double precision) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "point_ne",
    LEFTARG = "point",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".~=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("point", "point") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "cash_ne",
    LEFTARG = "money",
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("money", "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("money", "money") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "bpcharne",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (character, character) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "array_ne",
    LEFTARG = "anyarray",
    RIGHTARG = "anyarray",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("anyarray", "anyarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("anyarray", "anyarray") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "date_ne",
    LEFTARG = "date",
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("date", "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("date", "date") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "time_ne",
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (time without time zone, time without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (time without time zone, time without time zone) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "float48ne",
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (real, double precision) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "float84ne",
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (double precision, real) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "network_ne",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("inet", "inet") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "macaddr_ne",
    LEFTARG = "macaddr",
    RIGHTARG = "macaddr",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("macaddr", "macaddr") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("macaddr", "macaddr") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "timestamptz_ne",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (timestamp with time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (timestamp with time zone, timestamp with time zone) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "interval_ne",
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (interval, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (interval, interval) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "circle_ne",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("circle", "circle") IS 'not equal by area';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "timetz_ne",
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (time with time zone, time with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (time with time zone, time with time zone) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "lseg_ne",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("lseg", "lseg") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "numeric_ne",
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (numeric, numeric) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "bitne",
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (bit, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (bit, bit) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "varbitne",
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (bit varying, bit varying) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (bit varying, bit varying) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "int28ne",
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (smallint, bigint) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "int82ne",
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (bigint, smallint) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "byteane",
    LEFTARG = "bytea",
    RIGHTARG = "bytea",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("bytea", "bytea") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("bytea", "bytea") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "timestamp_ne",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (timestamp without time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (timestamp without time zone, timestamp without time zone) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "date_ne_timestamp",
    LEFTARG = "date",
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("date", timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("date", timestamp without time zone) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "date_ne_timestamptz",
    LEFTARG = "date",
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("date", timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("date", timestamp with time zone) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "timestamp_ne_date",
    LEFTARG = timestamp without time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (timestamp without time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (timestamp without time zone, "date") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "timestamptz_ne_date",
    LEFTARG = timestamp with time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (timestamp with time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (timestamp with time zone, "date") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "timestamp_ne_timestamptz",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (timestamp without time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (timestamp without time zone, timestamp with time zone) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "timestamptz_ne_timestamp",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> (timestamp with time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> (timestamp with time zone, timestamp without time zone) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "multirange_ne",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("anymultirange", "anymultirange") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "uuid_ne",
    LEFTARG = "uuid",
    RIGHTARG = "uuid",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("uuid", "uuid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("uuid", "uuid") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "record_ne",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("record", "record") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "pg_lsn_ne",
    LEFTARG = "pg_lsn",
    RIGHTARG = "pg_lsn",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("pg_lsn", "pg_lsn") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("pg_lsn", "pg_lsn") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "jsonb_ne",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonb",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("jsonb", "jsonb") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("jsonb", "jsonb") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "xidneq",
    LEFTARG = "xid",
    RIGHTARG = "xid",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("xid", "xid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("xid", "xid") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "xidneqint4",
    LEFTARG = "xid",
    RIGHTARG = integer,
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("xid", integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("xid", integer) IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "macaddr8_ne",
    LEFTARG = "macaddr8",
    RIGHTARG = "macaddr8",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("macaddr8", "macaddr8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("macaddr8", "macaddr8") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "enum_ne",
    LEFTARG = "anyenum",
    RIGHTARG = "anyenum",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("anyenum", "anyenum") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("anyenum", "anyenum") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "tsvector_ne",
    LEFTARG = "tsvector",
    RIGHTARG = "tsvector",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("tsvector", "tsvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("tsvector", "tsvector") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "tsquery_ne",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("tsquery", "tsquery") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "range_ne",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("anyrange", "anyrange") IS 'not equal';



CREATE OPERATOR "pg_catalog".<> (
    FUNCTION = "xid8ne",
    LEFTARG = "xid8",
    RIGHTARG = "xid8",
    COMMUTATOR = OPERATOR("pg_catalog".<>),
    NEGATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "neqsel",
    JOIN = "neqjoinsel"
);


ALTER OPERATOR "pg_catalog".<> ("xid8", "xid8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<> ("xid8", "xid8") IS 'not equal';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "poly_contained",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("polygon", "polygon") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "box_contained",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("box", "box") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "on_pb",
    LEFTARG = "point",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("point", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("point", "box") IS 'point inside box';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "on_ppath",
    LEFTARG = "point",
    RIGHTARG = "path",
    COMMUTATOR = OPERATOR("pg_catalog".@>)
);


ALTER OPERATOR "pg_catalog".<@ ("point", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("point", "path") IS 'point within closed path, or point on open path';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "pt_contained_poly",
    LEFTARG = "point",
    RIGHTARG = "polygon",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("point", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("point", "polygon") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "pt_contained_circle",
    LEFTARG = "point",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("point", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("point", "circle") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "circle_contained",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("circle", "circle") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "on_pl",
    LEFTARG = "point",
    RIGHTARG = "line"
);


ALTER OPERATOR "pg_catalog".<@ ("point", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("point", "line") IS 'point on line';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "on_ps",
    LEFTARG = "point",
    RIGHTARG = "lseg"
);


ALTER OPERATOR "pg_catalog".<@ ("point", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("point", "lseg") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "on_sl",
    LEFTARG = "lseg",
    RIGHTARG = "line"
);


ALTER OPERATOR "pg_catalog".<@ ("lseg", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("lseg", "line") IS 'lseg on line';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "on_sb",
    LEFTARG = "lseg",
    RIGHTARG = "box"
);


ALTER OPERATOR "pg_catalog".<@ ("lseg", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("lseg", "box") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "arraycontained",
    LEFTARG = "anyarray",
    RIGHTARG = "anyarray",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "arraycontsel",
    JOIN = "arraycontjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("anyarray", "anyarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("anyarray", "anyarray") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "elem_contained_by_multirange",
    LEFTARG = "anyelement",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "multirangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("anyelement", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("anyelement", "anymultirange") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "range_contained_by_multirange",
    LEFTARG = "anyrange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "multirangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("anyrange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("anyrange", "anymultirange") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "multirange_contained_by_multirange",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "multirangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("anymultirange", "anymultirange") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "jsonb_contained",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonb",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("jsonb", "jsonb") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("jsonb", "jsonb") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "tsq_mcontained",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("tsquery", "tsquery") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "elem_contained_by_range",
    LEFTARG = "anyelement",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "rangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("anyelement", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("anyelement", "anyrange") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "range_contained_by",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "rangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("anyrange", "anyrange") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<@ (
    FUNCTION = "multirange_contained_by_range",
    LEFTARG = "anymultirange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".@>),
    RESTRICT = "multirangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".<@ ("anymultirange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<@ ("anymultirange", "anyrange") IS 'is contained by';



CREATE OPERATOR "pg_catalog".<^ (
    FUNCTION = "point_below",
    LEFTARG = "point",
    RIGHTARG = "point",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<^ ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<^ ("point", "point") IS 'deprecated, use <<| instead';



CREATE OPERATOR "pg_catalog".<^ (
    FUNCTION = "box_below_eq",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".<^ ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".<^ ("box", "box") IS 'is below (allows touching)';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "int48eq",
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (integer, bigint) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "booleq",
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (boolean, boolean) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (boolean, boolean) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "chareq",
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("char", "char") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("char", "char") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "nameeq",
    LEFTARG = "name",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("name", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("name", "name") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "int2eq",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (smallint, smallint) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "int4eq",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (integer, integer) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "texteq",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("text", "text") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "nameeqtext",
    LEFTARG = "name",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("name", "text") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "texteqname",
    LEFTARG = "text",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("text", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("text", "name") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "xideq",
    LEFTARG = "xid",
    RIGHTARG = "xid",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("xid", "xid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("xid", "xid") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "xideqint4",
    LEFTARG = "xid",
    RIGHTARG = integer,
    NEGATOR = OPERATOR("pg_catalog".<>),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("xid", integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("xid", integer) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "cideq",
    LEFTARG = "cid",
    RIGHTARG = "cid",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("cid", "cid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("cid", "cid") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "tideq",
    LEFTARG = "tid",
    RIGHTARG = "tid",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("tid", "tid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("tid", "tid") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "int8eq",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (bigint, bigint) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "int84eq",
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (bigint, integer) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "box_eq",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("box", "box") IS 'equal by area';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "int24eq",
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (smallint, integer) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "int42eq",
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (integer, smallint) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "oideq",
    LEFTARG = "oid",
    RIGHTARG = "oid",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("oid", "oid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("oid", "oid") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "float4eq",
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (real, real) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "oidvectoreq",
    LEFTARG = "oidvector",
    RIGHTARG = "oidvector",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("oidvector", "oidvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("oidvector", "oidvector") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "float8eq",
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (double precision, double precision) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "path_n_eq",
    LEFTARG = "path",
    RIGHTARG = "path",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("path", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("path", "path") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "cash_eq",
    LEFTARG = "money",
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("money", "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("money", "money") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "aclitemeq",
    LEFTARG = "aclitem",
    RIGHTARG = "aclitem",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("aclitem", "aclitem") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("aclitem", "aclitem") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "bpchareq",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (character, character) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "array_eq",
    LEFTARG = "anyarray",
    RIGHTARG = "anyarray",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("anyarray", "anyarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("anyarray", "anyarray") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "date_eq",
    LEFTARG = "date",
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("date", "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("date", "date") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "time_eq",
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (time without time zone, time without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (time without time zone, time without time zone) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "float48eq",
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (real, double precision) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "float84eq",
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (double precision, real) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "network_eq",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("inet", "inet") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "macaddr_eq",
    LEFTARG = "macaddr",
    RIGHTARG = "macaddr",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("macaddr", "macaddr") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("macaddr", "macaddr") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "timestamptz_eq",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (timestamp with time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (timestamp with time zone, timestamp with time zone) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "interval_eq",
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (interval, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (interval, interval) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "circle_eq",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("circle", "circle") IS 'equal by area';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "lseg_eq",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("lseg", "lseg") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "timetz_eq",
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (time with time zone, time with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (time with time zone, time with time zone) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "line_eq",
    LEFTARG = "line",
    RIGHTARG = "line",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("line", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("line", "line") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "numeric_eq",
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (numeric, numeric) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "biteq",
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (bit, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (bit, bit) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "varbiteq",
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (bit varying, bit varying) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (bit varying, bit varying) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "int28eq",
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (smallint, bigint) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "int82eq",
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (bigint, smallint) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "byteaeq",
    LEFTARG = "bytea",
    RIGHTARG = "bytea",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("bytea", "bytea") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("bytea", "bytea") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "timestamp_eq",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (timestamp without time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (timestamp without time zone, timestamp without time zone) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "date_eq_timestamp",
    LEFTARG = "date",
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("date", timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("date", timestamp without time zone) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "date_eq_timestamptz",
    LEFTARG = "date",
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("date", timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("date", timestamp with time zone) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "timestamp_eq_date",
    LEFTARG = timestamp without time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (timestamp without time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (timestamp without time zone, "date") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "timestamptz_eq_date",
    LEFTARG = timestamp with time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (timestamp with time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (timestamp with time zone, "date") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "timestamp_eq_timestamptz",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (timestamp without time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (timestamp without time zone, timestamp with time zone) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "timestamptz_eq_timestamp",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= (timestamp with time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= (timestamp with time zone, timestamp without time zone) IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "multirange_eq",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("anymultirange", "anymultirange") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "uuid_eq",
    LEFTARG = "uuid",
    RIGHTARG = "uuid",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("uuid", "uuid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("uuid", "uuid") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "record_eq",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("record", "record") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "pg_lsn_eq",
    LEFTARG = "pg_lsn",
    RIGHTARG = "pg_lsn",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("pg_lsn", "pg_lsn") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("pg_lsn", "pg_lsn") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "jsonb_eq",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonb",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("jsonb", "jsonb") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("jsonb", "jsonb") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "macaddr8_eq",
    LEFTARG = "macaddr8",
    RIGHTARG = "macaddr8",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("macaddr8", "macaddr8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("macaddr8", "macaddr8") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "enum_eq",
    LEFTARG = "anyenum",
    RIGHTARG = "anyenum",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("anyenum", "anyenum") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("anyenum", "anyenum") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "tsvector_eq",
    LEFTARG = "tsvector",
    RIGHTARG = "tsvector",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("tsvector", "tsvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("tsvector", "tsvector") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "tsquery_eq",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("tsquery", "tsquery") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "range_eq",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("anyrange", "anyrange") IS 'equal';



CREATE OPERATOR "pg_catalog".= (
    FUNCTION = "xid8eq",
    LEFTARG = "xid8",
    RIGHTARG = "xid8",
    COMMUTATOR = OPERATOR("pg_catalog".=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    MERGES,
    HASHES,
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".= ("xid8", "xid8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".= ("xid8", "xid8") IS 'equal';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "boolgt",
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (boolean, boolean) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (boolean, boolean) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "int48gt",
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (integer, bigint) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "namegttext",
    LEFTARG = "name",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("name", "text") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "textgtname",
    LEFTARG = "text",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("text", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("text", "name") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "int8gt",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (bigint, bigint) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "int84gt",
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (bigint, integer) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "box_gt",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".> ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("box", "box") IS 'greater than by area';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "int2gt",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (smallint, smallint) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "int4gt",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (integer, integer) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "int24gt",
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (smallint, integer) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "int42gt",
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (integer, smallint) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "oidgt",
    LEFTARG = "oid",
    RIGHTARG = "oid",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("oid", "oid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("oid", "oid") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "float4gt",
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (real, real) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "chargt",
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("char", "char") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("char", "char") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "oidvectorgt",
    LEFTARG = "oidvector",
    RIGHTARG = "oidvector",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("oidvector", "oidvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("oidvector", "oidvector") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "namegt",
    LEFTARG = "name",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("name", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("name", "name") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "text_gt",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("text", "text") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "float8gt",
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (double precision, double precision) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "path_n_gt",
    LEFTARG = "path",
    RIGHTARG = "path",
    COMMUTATOR = OPERATOR("pg_catalog".<)
);


ALTER OPERATOR "pg_catalog".> ("path", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("path", "path") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "cash_gt",
    LEFTARG = "money",
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("money", "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("money", "money") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "bpchargt",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (character, character) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "array_gt",
    LEFTARG = "anyarray",
    RIGHTARG = "anyarray",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("anyarray", "anyarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("anyarray", "anyarray") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "date_gt",
    LEFTARG = "date",
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("date", "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("date", "date") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "time_gt",
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (time without time zone, time without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (time without time zone, time without time zone) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "float48gt",
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (real, double precision) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "float84gt",
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (double precision, real) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "network_gt",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("inet", "inet") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "macaddr_gt",
    LEFTARG = "macaddr",
    RIGHTARG = "macaddr",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("macaddr", "macaddr") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("macaddr", "macaddr") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "timestamptz_gt",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (timestamp with time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (timestamp with time zone, timestamp with time zone) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "interval_gt",
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (interval, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (interval, interval) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "circle_gt",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".> ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("circle", "circle") IS 'greater than by area';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "timetz_gt",
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (time with time zone, time with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (time with time zone, time with time zone) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "lseg_gt",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=)
);


ALTER OPERATOR "pg_catalog".> ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("lseg", "lseg") IS 'greater than by length';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "numeric_gt",
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (numeric, numeric) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "bitgt",
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (bit, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (bit, bit) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "varbitgt",
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (bit varying, bit varying) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (bit varying, bit varying) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "int28gt",
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (smallint, bigint) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "int82gt",
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (bigint, smallint) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "byteagt",
    LEFTARG = "bytea",
    RIGHTARG = "bytea",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("bytea", "bytea") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("bytea", "bytea") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "timestamp_gt",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (timestamp without time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (timestamp without time zone, timestamp without time zone) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "date_gt_timestamp",
    LEFTARG = "date",
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("date", timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("date", timestamp without time zone) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "date_gt_timestamptz",
    LEFTARG = "date",
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("date", timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("date", timestamp with time zone) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "timestamp_gt_date",
    LEFTARG = timestamp without time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (timestamp without time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (timestamp without time zone, "date") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "timestamptz_gt_date",
    LEFTARG = timestamp with time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (timestamp with time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (timestamp with time zone, "date") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "timestamp_gt_timestamptz",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (timestamp without time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (timestamp without time zone, timestamp with time zone) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "timestamptz_gt_timestamp",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> (timestamp with time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> (timestamp with time zone, timestamp without time zone) IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "tidgt",
    LEFTARG = "tid",
    RIGHTARG = "tid",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("tid", "tid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("tid", "tid") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "multirange_gt",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "multirangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("anymultirange", "anymultirange") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "uuid_gt",
    LEFTARG = "uuid",
    RIGHTARG = "uuid",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("uuid", "uuid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("uuid", "uuid") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "record_gt",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("record", "record") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "pg_lsn_gt",
    LEFTARG = "pg_lsn",
    RIGHTARG = "pg_lsn",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("pg_lsn", "pg_lsn") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("pg_lsn", "pg_lsn") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "jsonb_gt",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonb",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("jsonb", "jsonb") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("jsonb", "jsonb") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "macaddr8_gt",
    LEFTARG = "macaddr8",
    RIGHTARG = "macaddr8",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("macaddr8", "macaddr8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("macaddr8", "macaddr8") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "enum_gt",
    LEFTARG = "anyenum",
    RIGHTARG = "anyenum",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("anyenum", "anyenum") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("anyenum", "anyenum") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "tsvector_gt",
    LEFTARG = "tsvector",
    RIGHTARG = "tsvector",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("tsvector", "tsvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("tsvector", "tsvector") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "tsquery_gt",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("tsquery", "tsquery") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "range_gt",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "rangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("anyrange", "anyrange") IS 'greater than';



CREATE OPERATOR "pg_catalog".> (
    FUNCTION = "xid8gt",
    LEFTARG = "xid8",
    RIGHTARG = "xid8",
    COMMUTATOR = OPERATOR("pg_catalog".<),
    NEGATOR = OPERATOR("pg_catalog".<=),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".> ("xid8", "xid8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".> ("xid8", "xid8") IS 'greater than';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "int48ge",
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (integer, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (integer, bigint) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "namegetext",
    LEFTARG = "name",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("name", "text") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "textgename",
    LEFTARG = "text",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("text", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("text", "name") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "int8ge",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (bigint, bigint) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "int84ge",
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (bigint, integer) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "box_ge",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("box", "box") IS 'greater than or equal by area';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "int2ge",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (smallint, smallint) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "int4ge",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (integer, integer) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "int24ge",
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (smallint, integer) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "int42ge",
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (integer, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (integer, smallint) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "oidge",
    LEFTARG = "oid",
    RIGHTARG = "oid",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("oid", "oid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("oid", "oid") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "float4ge",
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (real, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (real, real) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "charge",
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("char", "char") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("char", "char") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "oidvectorge",
    LEFTARG = "oidvector",
    RIGHTARG = "oidvector",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("oidvector", "oidvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("oidvector", "oidvector") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "namege",
    LEFTARG = "name",
    RIGHTARG = "name",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("name", "name") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("name", "name") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "text_ge",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("text", "text") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "float8ge",
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (double precision, double precision) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "path_n_ge",
    LEFTARG = "path",
    RIGHTARG = "path",
    COMMUTATOR = OPERATOR("pg_catalog".<=)
);


ALTER OPERATOR "pg_catalog".>= ("path", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("path", "path") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "cash_ge",
    LEFTARG = "money",
    RIGHTARG = "money",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("money", "money") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("money", "money") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "bpcharge",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (character, character) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "array_ge",
    LEFTARG = "anyarray",
    RIGHTARG = "anyarray",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("anyarray", "anyarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("anyarray", "anyarray") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "date_ge",
    LEFTARG = "date",
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("date", "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("date", "date") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "time_ge",
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (time without time zone, time without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (time without time zone, time without time zone) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "float48ge",
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (real, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (real, double precision) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "float84ge",
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (double precision, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (double precision, real) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "network_ge",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("inet", "inet") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "macaddr_ge",
    LEFTARG = "macaddr",
    RIGHTARG = "macaddr",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("macaddr", "macaddr") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("macaddr", "macaddr") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "timestamptz_ge",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (timestamp with time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (timestamp with time zone, timestamp with time zone) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "interval_ge",
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (interval, interval) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (interval, interval) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "circle_ge",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("circle", "circle") IS 'greater than or equal by area';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "timetz_ge",
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (time with time zone, time with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (time with time zone, time with time zone) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "lseg_ge",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<)
);


ALTER OPERATOR "pg_catalog".>= ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("lseg", "lseg") IS 'greater than or equal by length';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "boolge",
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (boolean, boolean) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (boolean, boolean) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "numeric_ge",
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (numeric, numeric) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "bitge",
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (bit, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (bit, bit) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "varbitge",
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (bit varying, bit varying) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (bit varying, bit varying) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "int28ge",
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (smallint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (smallint, bigint) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "int82ge",
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (bigint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (bigint, smallint) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "byteage",
    LEFTARG = "bytea",
    RIGHTARG = "bytea",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("bytea", "bytea") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("bytea", "bytea") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "timestamp_ge",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (timestamp without time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (timestamp without time zone, timestamp without time zone) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "date_ge_timestamp",
    LEFTARG = "date",
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("date", timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("date", timestamp without time zone) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "date_ge_timestamptz",
    LEFTARG = "date",
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("date", timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("date", timestamp with time zone) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "timestamp_ge_date",
    LEFTARG = timestamp without time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (timestamp without time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (timestamp without time zone, "date") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "timestamptz_ge_date",
    LEFTARG = timestamp with time zone,
    RIGHTARG = "date",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (timestamp with time zone, "date") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (timestamp with time zone, "date") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "timestamp_ge_timestamptz",
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (timestamp without time zone, timestamp with time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (timestamp without time zone, timestamp with time zone) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "timestamptz_ge_timestamp",
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= (timestamp with time zone, timestamp without time zone) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= (timestamp with time zone, timestamp without time zone) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "tidge",
    LEFTARG = "tid",
    RIGHTARG = "tid",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("tid", "tid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("tid", "tid") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "multirange_ge",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "multirangesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("anymultirange", "anymultirange") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "uuid_ge",
    LEFTARG = "uuid",
    RIGHTARG = "uuid",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("uuid", "uuid") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("uuid", "uuid") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "record_ge",
    LEFTARG = "record",
    RIGHTARG = "record",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("record", "record") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("record", "record") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "pg_lsn_ge",
    LEFTARG = "pg_lsn",
    RIGHTARG = "pg_lsn",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("pg_lsn", "pg_lsn") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("pg_lsn", "pg_lsn") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "jsonb_ge",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonb",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("jsonb", "jsonb") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("jsonb", "jsonb") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "macaddr8_ge",
    LEFTARG = "macaddr8",
    RIGHTARG = "macaddr8",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("macaddr8", "macaddr8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("macaddr8", "macaddr8") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "enum_ge",
    LEFTARG = "anyenum",
    RIGHTARG = "anyenum",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("anyenum", "anyenum") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("anyenum", "anyenum") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "tsvector_ge",
    LEFTARG = "tsvector",
    RIGHTARG = "tsvector",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("tsvector", "tsvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("tsvector", "tsvector") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "tsquery_ge",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("tsquery", "tsquery") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "range_ge",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "rangesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("anyrange", "anyrange") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>= (
    FUNCTION = "xid8ge",
    LEFTARG = "xid8",
    RIGHTARG = "xid8",
    COMMUTATOR = OPERATOR("pg_catalog".<=),
    NEGATOR = OPERATOR("pg_catalog".<),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".>= ("xid8", "xid8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>= ("xid8", "xid8") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "poly_right",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".>> ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> ("polygon", "polygon") IS 'is right of';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "box_right",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".>> ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> ("box", "box") IS 'is right of';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "point_right",
    LEFTARG = "point",
    RIGHTARG = "point",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".>> ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> ("point", "point") IS 'is right of';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "network_sup",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".<<),
    RESTRICT = "networksel",
    JOIN = "networkjoinsel"
);


ALTER OPERATOR "pg_catalog".>> ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> ("inet", "inet") IS 'is supernet';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "circle_right",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".>> ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> ("circle", "circle") IS 'is right of';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "bitshiftright",
    LEFTARG = bit,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".>> (bit, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> (bit, integer) IS 'bitwise shift right';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "int2shr",
    LEFTARG = smallint,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".>> (smallint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> (smallint, integer) IS 'bitwise shift right';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "int4shr",
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".>> (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> (integer, integer) IS 'bitwise shift right';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "int8shr",
    LEFTARG = bigint,
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".>> (bigint, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> (bigint, integer) IS 'bitwise shift right';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "range_after",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".<<),
    RESTRICT = "rangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".>> ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> ("anyrange", "anyrange") IS 'is right of';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "range_after_multirange",
    LEFTARG = "anyrange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".<<),
    RESTRICT = "multirangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".>> ("anyrange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> ("anyrange", "anymultirange") IS 'is right of';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "multirange_after_range",
    LEFTARG = "anymultirange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".<<),
    RESTRICT = "multirangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".>> ("anymultirange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> ("anymultirange", "anyrange") IS 'is right of';



CREATE OPERATOR "pg_catalog".>> (
    FUNCTION = "multirange_after_multirange",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".<<),
    RESTRICT = "multirangesel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".>> ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>> ("anymultirange", "anymultirange") IS 'is right of';



CREATE OPERATOR "pg_catalog".>>= (
    FUNCTION = "network_supeq",
    LEFTARG = "inet",
    RIGHTARG = "inet",
    COMMUTATOR = OPERATOR("pg_catalog".<<=),
    RESTRICT = "networksel",
    JOIN = "networkjoinsel"
);


ALTER OPERATOR "pg_catalog".>>= ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>>= ("inet", "inet") IS 'is supernet or equal';



CREATE OPERATOR "pg_catalog".>^ (
    FUNCTION = "point_above",
    LEFTARG = "point",
    RIGHTARG = "point",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".>^ ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>^ ("point", "point") IS 'deprecated, use |>> instead';



CREATE OPERATOR "pg_catalog".>^ (
    FUNCTION = "box_above_eq",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".>^ ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".>^ ("box", "box") IS 'is above (allows touching)';



CREATE OPERATOR "pg_catalog".? (
    FUNCTION = "jsonb_exists",
    LEFTARG = "jsonb",
    RIGHTARG = "text",
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".? ("jsonb", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".? ("jsonb", "text") IS 'key exists';



CREATE OPERATOR "pg_catalog".?# (
    FUNCTION = "path_inter",
    LEFTARG = "path",
    RIGHTARG = "path"
);


ALTER OPERATOR "pg_catalog".?# ("path", "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?# ("path", "path") IS 'intersect';



CREATE OPERATOR "pg_catalog".?# (
    FUNCTION = "box_overlap",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "areasel",
    JOIN = "areajoinsel"
);


ALTER OPERATOR "pg_catalog".?# ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?# ("box", "box") IS 'deprecated, use && instead';



CREATE OPERATOR "pg_catalog".?# (
    FUNCTION = "lseg_intersect",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".?#)
);


ALTER OPERATOR "pg_catalog".?# ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?# ("lseg", "lseg") IS 'intersect';



CREATE OPERATOR "pg_catalog".?# (
    FUNCTION = "inter_sl",
    LEFTARG = "lseg",
    RIGHTARG = "line"
);


ALTER OPERATOR "pg_catalog".?# ("lseg", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?# ("lseg", "line") IS 'intersect';



CREATE OPERATOR "pg_catalog".?# (
    FUNCTION = "inter_sb",
    LEFTARG = "lseg",
    RIGHTARG = "box"
);


ALTER OPERATOR "pg_catalog".?# ("lseg", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?# ("lseg", "box") IS 'intersect';



CREATE OPERATOR "pg_catalog".?# (
    FUNCTION = "inter_lb",
    LEFTARG = "line",
    RIGHTARG = "box"
);


ALTER OPERATOR "pg_catalog".?# ("line", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?# ("line", "box") IS 'intersect';



CREATE OPERATOR "pg_catalog".?# (
    FUNCTION = "line_intersect",
    LEFTARG = "line",
    RIGHTARG = "line",
    COMMUTATOR = OPERATOR("pg_catalog".?#)
);


ALTER OPERATOR "pg_catalog".?# ("line", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?# ("line", "line") IS 'intersect';



CREATE OPERATOR "pg_catalog".?& (
    FUNCTION = "jsonb_exists_all",
    LEFTARG = "jsonb",
    RIGHTARG = "text"[],
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".?& ("jsonb", "text"[]) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?& ("jsonb", "text"[]) IS 'all keys exist';



CREATE OPERATOR "pg_catalog".?- (
    FUNCTION = "lseg_horizontal",
    RIGHTARG = "lseg"
);


ALTER OPERATOR "pg_catalog".?- (NONE, "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?- (NONE, "lseg") IS 'horizontal';



CREATE OPERATOR "pg_catalog".?- (
    FUNCTION = "line_horizontal",
    RIGHTARG = "line"
);


ALTER OPERATOR "pg_catalog".?- (NONE, "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?- (NONE, "line") IS 'horizontal';



CREATE OPERATOR "pg_catalog".?- (
    FUNCTION = "point_horiz",
    LEFTARG = "point",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".?-)
);


ALTER OPERATOR "pg_catalog".?- ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?- ("point", "point") IS 'horizontally aligned';



CREATE OPERATOR "pg_catalog".?-| (
    FUNCTION = "lseg_perp",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".?-|)
);


ALTER OPERATOR "pg_catalog".?-| ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?-| ("lseg", "lseg") IS 'perpendicular';



CREATE OPERATOR "pg_catalog".?-| (
    FUNCTION = "line_perp",
    LEFTARG = "line",
    RIGHTARG = "line",
    COMMUTATOR = OPERATOR("pg_catalog".?-|)
);


ALTER OPERATOR "pg_catalog".?-| ("line", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?-| ("line", "line") IS 'perpendicular';



CREATE OPERATOR "pg_catalog".?| (
    FUNCTION = "lseg_vertical",
    RIGHTARG = "lseg"
);


ALTER OPERATOR "pg_catalog".?| (NONE, "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?| (NONE, "lseg") IS 'vertical';



CREATE OPERATOR "pg_catalog".?| (
    FUNCTION = "line_vertical",
    RIGHTARG = "line"
);


ALTER OPERATOR "pg_catalog".?| (NONE, "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?| (NONE, "line") IS 'vertical';



CREATE OPERATOR "pg_catalog".?| (
    FUNCTION = "point_vert",
    LEFTARG = "point",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".?|)
);


ALTER OPERATOR "pg_catalog".?| ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?| ("point", "point") IS 'vertically aligned';



CREATE OPERATOR "pg_catalog".?| (
    FUNCTION = "jsonb_exists_any",
    LEFTARG = "jsonb",
    RIGHTARG = "text"[],
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".?| ("jsonb", "text"[]) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?| ("jsonb", "text"[]) IS 'any key exists';



CREATE OPERATOR "pg_catalog".?|| (
    FUNCTION = "lseg_parallel",
    LEFTARG = "lseg",
    RIGHTARG = "lseg",
    COMMUTATOR = OPERATOR("pg_catalog".?||)
);


ALTER OPERATOR "pg_catalog".?|| ("lseg", "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?|| ("lseg", "lseg") IS 'parallel';



CREATE OPERATOR "pg_catalog".?|| (
    FUNCTION = "line_parallel",
    LEFTARG = "line",
    RIGHTARG = "line",
    COMMUTATOR = OPERATOR("pg_catalog".?||)
);


ALTER OPERATOR "pg_catalog".?|| ("line", "line") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".?|| ("line", "line") IS 'parallel';



CREATE OPERATOR "pg_catalog".@ (
    FUNCTION = "int8abs",
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog".@ (NONE, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@ (NONE, bigint) IS 'absolute value';



CREATE OPERATOR "pg_catalog".@ (
    FUNCTION = "float4abs",
    RIGHTARG = real
);


ALTER OPERATOR "pg_catalog".@ (NONE, real) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@ (NONE, real) IS 'absolute value';



CREATE OPERATOR "pg_catalog".@ (
    FUNCTION = "float8abs",
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog".@ (NONE, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@ (NONE, double precision) IS 'absolute value';



CREATE OPERATOR "pg_catalog".@ (
    FUNCTION = "int2abs",
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog".@ (NONE, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@ (NONE, smallint) IS 'absolute value';



CREATE OPERATOR "pg_catalog".@ (
    FUNCTION = "int4abs",
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".@ (NONE, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@ (NONE, integer) IS 'absolute value';



CREATE OPERATOR "pg_catalog".@ (
    FUNCTION = "numeric_abs",
    RIGHTARG = numeric
);


ALTER OPERATOR "pg_catalog".@ (NONE, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@ (NONE, numeric) IS 'absolute value';



CREATE OPERATOR "pg_catalog".@-@ (
    FUNCTION = "path_length",
    RIGHTARG = "path"
);


ALTER OPERATOR "pg_catalog".@-@ (NONE, "path") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@-@ (NONE, "path") IS 'sum of path segment lengths';



CREATE OPERATOR "pg_catalog".@-@ (
    FUNCTION = "lseg_length",
    RIGHTARG = "lseg"
);


ALTER OPERATOR "pg_catalog".@-@ (NONE, "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@-@ (NONE, "lseg") IS 'distance between endpoints';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "box_contain_pt",
    LEFTARG = "box",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("box", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("box", "point") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "poly_contain",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("polygon", "polygon") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "box_contain",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("box", "box") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "path_contain_pt",
    LEFTARG = "path",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<@)
);


ALTER OPERATOR "pg_catalog".@> ("path", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("path", "point") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "poly_contain_pt",
    LEFTARG = "polygon",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("polygon", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("polygon", "point") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "circle_contain_pt",
    LEFTARG = "circle",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("circle", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("circle", "point") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "aclcontains",
    LEFTARG = "aclitem"[],
    RIGHTARG = "aclitem"
);


ALTER OPERATOR "pg_catalog".@> ("aclitem"[], "aclitem") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("aclitem"[], "aclitem") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "circle_contain",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "contsel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("circle", "circle") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "arraycontains",
    LEFTARG = "anyarray",
    RIGHTARG = "anyarray",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "arraycontsel",
    JOIN = "arraycontjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("anyarray", "anyarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("anyarray", "anyarray") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "multirange_contains_elem",
    LEFTARG = "anymultirange",
    RIGHTARG = "anyelement",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "multirangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("anymultirange", "anyelement") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("anymultirange", "anyelement") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "multirange_contains_range",
    LEFTARG = "anymultirange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "multirangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("anymultirange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("anymultirange", "anyrange") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "multirange_contains_multirange",
    LEFTARG = "anymultirange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "multirangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("anymultirange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("anymultirange", "anymultirange") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "jsonb_contains",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonb",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("jsonb", "jsonb") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("jsonb", "jsonb") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "tsq_mcontains",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("tsquery", "tsquery") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "range_contains_elem",
    LEFTARG = "anyrange",
    RIGHTARG = "anyelement",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "rangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("anyrange", "anyelement") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("anyrange", "anyelement") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "range_contains",
    LEFTARG = "anyrange",
    RIGHTARG = "anyrange",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "rangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("anyrange", "anyrange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("anyrange", "anyrange") IS 'contains';



CREATE OPERATOR "pg_catalog".@> (
    FUNCTION = "range_contains_multirange",
    LEFTARG = "anyrange",
    RIGHTARG = "anymultirange",
    COMMUTATOR = OPERATOR("pg_catalog".<@),
    RESTRICT = "multirangesel",
    JOIN = "contjoinsel"
);


ALTER OPERATOR "pg_catalog".@> ("anyrange", "anymultirange") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@> ("anyrange", "anymultirange") IS 'contains';



CREATE OPERATOR "pg_catalog".@? (
    FUNCTION = "jsonb_path_exists_opr",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonpath",
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".@? ("jsonb", "jsonpath") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@? ("jsonb", "jsonpath") IS 'jsonpath exists';



CREATE OPERATOR "pg_catalog".@@ (
    FUNCTION = "box_center",
    RIGHTARG = "box"
);


ALTER OPERATOR "pg_catalog".@@ (NONE, "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@ (NONE, "box") IS 'center of';



CREATE OPERATOR "pg_catalog".@@ (
    FUNCTION = "lseg_center",
    RIGHTARG = "lseg"
);


ALTER OPERATOR "pg_catalog".@@ (NONE, "lseg") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@ (NONE, "lseg") IS 'center of';



CREATE OPERATOR "pg_catalog".@@ (
    FUNCTION = "poly_center",
    RIGHTARG = "polygon"
);


ALTER OPERATOR "pg_catalog".@@ (NONE, "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@ (NONE, "polygon") IS 'center of';



CREATE OPERATOR "pg_catalog".@@ (
    FUNCTION = "circle_center",
    RIGHTARG = "circle"
);


ALTER OPERATOR "pg_catalog".@@ (NONE, "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@ (NONE, "circle") IS 'center of';



CREATE OPERATOR "pg_catalog".@@ (
    FUNCTION = "ts_match_vq",
    LEFTARG = "tsvector",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".@@),
    RESTRICT = "tsmatchsel",
    JOIN = "tsmatchjoinsel"
);


ALTER OPERATOR "pg_catalog".@@ ("tsvector", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@ ("tsvector", "tsquery") IS 'text search match';



CREATE OPERATOR "pg_catalog".@@ (
    FUNCTION = "ts_match_qv",
    LEFTARG = "tsquery",
    RIGHTARG = "tsvector",
    COMMUTATOR = OPERATOR("pg_catalog".@@),
    RESTRICT = "tsmatchsel",
    JOIN = "tsmatchjoinsel"
);


ALTER OPERATOR "pg_catalog".@@ ("tsquery", "tsvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@ ("tsquery", "tsvector") IS 'text search match';



CREATE OPERATOR "pg_catalog".@@ (
    FUNCTION = "ts_match_tt",
    LEFTARG = "text",
    RIGHTARG = "text",
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".@@ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@ ("text", "text") IS 'text search match';



CREATE OPERATOR "pg_catalog".@@ (
    FUNCTION = "ts_match_tq",
    LEFTARG = "text",
    RIGHTARG = "tsquery",
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".@@ ("text", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@ ("text", "tsquery") IS 'text search match';



CREATE OPERATOR "pg_catalog".@@ (
    FUNCTION = "jsonb_path_match_opr",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonpath",
    RESTRICT = "matchingsel",
    JOIN = "matchingjoinsel"
);


ALTER OPERATOR "pg_catalog".@@ ("jsonb", "jsonpath") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@ ("jsonb", "jsonpath") IS 'jsonpath match';



CREATE OPERATOR "pg_catalog".@@@ (
    FUNCTION = "ts_match_vq",
    LEFTARG = "tsvector",
    RIGHTARG = "tsquery",
    COMMUTATOR = OPERATOR("pg_catalog".@@@),
    RESTRICT = "tsmatchsel",
    JOIN = "tsmatchjoinsel"
);


ALTER OPERATOR "pg_catalog".@@@ ("tsvector", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@@ ("tsvector", "tsquery") IS 'deprecated, use @@ instead';



CREATE OPERATOR "pg_catalog".@@@ (
    FUNCTION = "ts_match_qv",
    LEFTARG = "tsquery",
    RIGHTARG = "tsvector",
    COMMUTATOR = OPERATOR("pg_catalog".@@@),
    RESTRICT = "tsmatchsel",
    JOIN = "tsmatchjoinsel"
);


ALTER OPERATOR "pg_catalog".@@@ ("tsquery", "tsvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".@@@ ("tsquery", "tsvector") IS 'deprecated, use @@ instead';



CREATE OPERATOR "pg_catalog".^ (
    FUNCTION = "dpow",
    LEFTARG = double precision,
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog".^ (double precision, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".^ (double precision, double precision) IS 'exponentiation';



CREATE OPERATOR "pg_catalog".^ (
    FUNCTION = "numeric_power",
    LEFTARG = numeric,
    RIGHTARG = numeric
);


ALTER OPERATOR "pg_catalog".^ (numeric, numeric) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".^ (numeric, numeric) IS 'exponentiation';



CREATE OPERATOR "pg_catalog".^@ (
    FUNCTION = "starts_with",
    LEFTARG = "text",
    RIGHTARG = "text",
    RESTRICT = "prefixsel",
    JOIN = "prefixjoinsel"
);


ALTER OPERATOR "pg_catalog".^@ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".^@ ("text", "text") IS 'starts with';



CREATE OPERATOR "pg_catalog".| (
    FUNCTION = "bitor",
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR("pg_catalog".|)
);


ALTER OPERATOR "pg_catalog".| (bit, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".| (bit, bit) IS 'bitwise or';



CREATE OPERATOR "pg_catalog".| (
    FUNCTION = "int2or",
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR("pg_catalog".|)
);


ALTER OPERATOR "pg_catalog".| (smallint, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".| (smallint, smallint) IS 'bitwise or';



CREATE OPERATOR "pg_catalog".| (
    FUNCTION = "int4or",
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR("pg_catalog".|)
);


ALTER OPERATOR "pg_catalog".| (integer, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".| (integer, integer) IS 'bitwise or';



CREATE OPERATOR "pg_catalog".| (
    FUNCTION = "int8or",
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR("pg_catalog".|)
);


ALTER OPERATOR "pg_catalog".| (bigint, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".| (bigint, bigint) IS 'bitwise or';



CREATE OPERATOR "pg_catalog".| (
    FUNCTION = "inetor",
    LEFTARG = "inet",
    RIGHTARG = "inet"
);


ALTER OPERATOR "pg_catalog".| ("inet", "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".| ("inet", "inet") IS 'bitwise or';



CREATE OPERATOR "pg_catalog".| (
    FUNCTION = "macaddr_or",
    LEFTARG = "macaddr",
    RIGHTARG = "macaddr"
);


ALTER OPERATOR "pg_catalog".| ("macaddr", "macaddr") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".| ("macaddr", "macaddr") IS 'bitwise or';



CREATE OPERATOR "pg_catalog".| (
    FUNCTION = "macaddr8_or",
    LEFTARG = "macaddr8",
    RIGHTARG = "macaddr8"
);


ALTER OPERATOR "pg_catalog".| ("macaddr8", "macaddr8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".| ("macaddr8", "macaddr8") IS 'bitwise or';



CREATE OPERATOR "pg_catalog".|&> (
    FUNCTION = "box_overabove",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".|&> ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|&> ("box", "box") IS 'overlaps or is above';



CREATE OPERATOR "pg_catalog".|&> (
    FUNCTION = "poly_overabove",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".|&> ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|&> ("polygon", "polygon") IS 'overlaps or is above';



CREATE OPERATOR "pg_catalog".|&> (
    FUNCTION = "circle_overabove",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".|&> ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|&> ("circle", "circle") IS 'overlaps or is above';



CREATE OPERATOR "pg_catalog".|/ (
    FUNCTION = "dsqrt",
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog".|/ (NONE, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|/ (NONE, double precision) IS 'square root';



CREATE OPERATOR "pg_catalog".|>> (
    FUNCTION = "circle_above",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".|>> ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|>> ("circle", "circle") IS 'is above';



CREATE OPERATOR "pg_catalog".|>> (
    FUNCTION = "box_above",
    LEFTARG = "box",
    RIGHTARG = "box",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".|>> ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|>> ("box", "box") IS 'is above';



CREATE OPERATOR "pg_catalog".|>> (
    FUNCTION = "poly_above",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".|>> ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|>> ("polygon", "polygon") IS 'is above';



CREATE OPERATOR "pg_catalog".|>> (
    FUNCTION = "point_above",
    LEFTARG = "point",
    RIGHTARG = "point",
    RESTRICT = "positionsel",
    JOIN = "positionjoinsel"
);


ALTER OPERATOR "pg_catalog".|>> ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|>> ("point", "point") IS 'is above';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "array_append",
    LEFTARG = "anycompatiblearray",
    RIGHTARG = "anycompatible"
);


ALTER OPERATOR "pg_catalog".|| ("anycompatiblearray", "anycompatible") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("anycompatiblearray", "anycompatible") IS 'append element onto end of array';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "array_prepend",
    LEFTARG = "anycompatible",
    RIGHTARG = "anycompatiblearray"
);


ALTER OPERATOR "pg_catalog".|| ("anycompatible", "anycompatiblearray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("anycompatible", "anycompatiblearray") IS 'prepend element onto front of array';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "array_cat",
    LEFTARG = "anycompatiblearray",
    RIGHTARG = "anycompatiblearray"
);


ALTER OPERATOR "pg_catalog".|| ("anycompatiblearray", "anycompatiblearray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("anycompatiblearray", "anycompatiblearray") IS 'concatenate';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "textcat",
    LEFTARG = "text",
    RIGHTARG = "text"
);


ALTER OPERATOR "pg_catalog".|| ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("text", "text") IS 'concatenate';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "bitcat",
    LEFTARG = bit varying,
    RIGHTARG = bit varying
);


ALTER OPERATOR "pg_catalog".|| (bit varying, bit varying) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| (bit varying, bit varying) IS 'concatenate';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "byteacat",
    LEFTARG = "bytea",
    RIGHTARG = "bytea"
);


ALTER OPERATOR "pg_catalog".|| ("bytea", "bytea") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("bytea", "bytea") IS 'concatenate';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "textanycat",
    LEFTARG = "text",
    RIGHTARG = "anynonarray"
);


ALTER OPERATOR "pg_catalog".|| ("text", "anynonarray") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("text", "anynonarray") IS 'concatenate';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "anytextcat",
    LEFTARG = "anynonarray",
    RIGHTARG = "text"
);


ALTER OPERATOR "pg_catalog".|| ("anynonarray", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("anynonarray", "text") IS 'concatenate';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "jsonb_concat",
    LEFTARG = "jsonb",
    RIGHTARG = "jsonb"
);


ALTER OPERATOR "pg_catalog".|| ("jsonb", "jsonb") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("jsonb", "jsonb") IS 'concatenate';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "tsvector_concat",
    LEFTARG = "tsvector",
    RIGHTARG = "tsvector"
);


ALTER OPERATOR "pg_catalog".|| ("tsvector", "tsvector") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("tsvector", "tsvector") IS 'concatenate';



CREATE OPERATOR "pg_catalog".|| (
    FUNCTION = "tsquery_or",
    LEFTARG = "tsquery",
    RIGHTARG = "tsquery"
);


ALTER OPERATOR "pg_catalog".|| ("tsquery", "tsquery") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".|| ("tsquery", "tsquery") IS 'OR-concatenate';



CREATE OPERATOR "pg_catalog".||/ (
    FUNCTION = "dcbrt",
    RIGHTARG = double precision
);


ALTER OPERATOR "pg_catalog".||/ (NONE, double precision) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".||/ (NONE, double precision) IS 'cube root';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "bitnot",
    RIGHTARG = bit
);


ALTER OPERATOR "pg_catalog".~ (NONE, bit) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ (NONE, bit) IS 'bitwise not';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "int2not",
    RIGHTARG = smallint
);


ALTER OPERATOR "pg_catalog".~ (NONE, smallint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ (NONE, smallint) IS 'bitwise not';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "int4not",
    RIGHTARG = integer
);


ALTER OPERATOR "pg_catalog".~ (NONE, integer) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ (NONE, integer) IS 'bitwise not';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "int8not",
    RIGHTARG = bigint
);


ALTER OPERATOR "pg_catalog".~ (NONE, bigint) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ (NONE, bigint) IS 'bitwise not';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "inetnot",
    RIGHTARG = "inet"
);


ALTER OPERATOR "pg_catalog".~ (NONE, "inet") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ (NONE, "inet") IS 'bitwise not';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "macaddr_not",
    RIGHTARG = "macaddr"
);


ALTER OPERATOR "pg_catalog".~ (NONE, "macaddr") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ (NONE, "macaddr") IS 'bitwise not';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "macaddr8_not",
    RIGHTARG = "macaddr8"
);


ALTER OPERATOR "pg_catalog".~ (NONE, "macaddr8") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ (NONE, "macaddr8") IS 'bitwise not';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "nameregexeq",
    LEFTARG = "name",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~),
    RESTRICT = "regexeqsel",
    JOIN = "regexeqjoinsel"
);


ALTER OPERATOR "pg_catalog".~ ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ ("name", "text") IS 'matches regular expression, case-sensitive';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "textregexeq",
    LEFTARG = "text",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~),
    RESTRICT = "regexeqsel",
    JOIN = "regexeqjoinsel"
);


ALTER OPERATOR "pg_catalog".~ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ ("text", "text") IS 'matches regular expression, case-sensitive';



CREATE OPERATOR "pg_catalog".~ (
    FUNCTION = "bpcharregexeq",
    LEFTARG = character,
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~),
    RESTRICT = "regexeqsel",
    JOIN = "regexeqjoinsel"
);


ALTER OPERATOR "pg_catalog".~ (character, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~ (character, "text") IS 'matches regular expression, case-sensitive';



CREATE OPERATOR "pg_catalog".~* (
    FUNCTION = "nameicregexeq",
    LEFTARG = "name",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~*),
    RESTRICT = "icregexeqsel",
    JOIN = "icregexeqjoinsel"
);


ALTER OPERATOR "pg_catalog".~* ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~* ("name", "text") IS 'matches regular expression, case-insensitive';



CREATE OPERATOR "pg_catalog".~* (
    FUNCTION = "texticregexeq",
    LEFTARG = "text",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~*),
    RESTRICT = "icregexeqsel",
    JOIN = "icregexeqjoinsel"
);


ALTER OPERATOR "pg_catalog".~* ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~* ("text", "text") IS 'matches regular expression, case-insensitive';



CREATE OPERATOR "pg_catalog".~* (
    FUNCTION = "bpcharicregexeq",
    LEFTARG = character,
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~*),
    RESTRICT = "icregexeqsel",
    JOIN = "icregexeqjoinsel"
);


ALTER OPERATOR "pg_catalog".~* (character, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~* (character, "text") IS 'matches regular expression, case-insensitive';



CREATE OPERATOR "pg_catalog".~<=~ (
    FUNCTION = "text_pattern_le",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".~>=~),
    NEGATOR = OPERATOR("pg_catalog".~>~),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".~<=~ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~<=~ ("text", "text") IS 'less than or equal';



CREATE OPERATOR "pg_catalog".~<=~ (
    FUNCTION = "bpchar_pattern_le",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".~>=~),
    NEGATOR = OPERATOR("pg_catalog".~>~),
    RESTRICT = "scalarlesel",
    JOIN = "scalarlejoinsel"
);


ALTER OPERATOR "pg_catalog".~<=~ (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~<=~ (character, character) IS 'less than or equal';



CREATE OPERATOR "pg_catalog".~<~ (
    FUNCTION = "text_pattern_lt",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".~>~),
    NEGATOR = OPERATOR("pg_catalog".~>=~),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".~<~ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~<~ ("text", "text") IS 'less than';



CREATE OPERATOR "pg_catalog".~<~ (
    FUNCTION = "bpchar_pattern_lt",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".~>~),
    NEGATOR = OPERATOR("pg_catalog".~>=~),
    RESTRICT = "scalarltsel",
    JOIN = "scalarltjoinsel"
);


ALTER OPERATOR "pg_catalog".~<~ (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~<~ (character, character) IS 'less than';



CREATE OPERATOR "pg_catalog".~= (
    FUNCTION = "poly_same",
    LEFTARG = "polygon",
    RIGHTARG = "polygon",
    COMMUTATOR = OPERATOR("pg_catalog".~=),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".~= ("polygon", "polygon") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~= ("polygon", "polygon") IS 'same as';



CREATE OPERATOR "pg_catalog".~= (
    FUNCTION = "box_same",
    LEFTARG = "box",
    RIGHTARG = "box",
    COMMUTATOR = OPERATOR("pg_catalog".~=),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".~= ("box", "box") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~= ("box", "box") IS 'same as';



CREATE OPERATOR "pg_catalog".~= (
    FUNCTION = "point_eq",
    LEFTARG = "point",
    RIGHTARG = "point",
    COMMUTATOR = OPERATOR("pg_catalog".~=),
    NEGATOR = OPERATOR("pg_catalog".<>),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".~= ("point", "point") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~= ("point", "point") IS 'same as';



CREATE OPERATOR "pg_catalog".~= (
    FUNCTION = "circle_same",
    LEFTARG = "circle",
    RIGHTARG = "circle",
    COMMUTATOR = OPERATOR("pg_catalog".~=),
    RESTRICT = "eqsel",
    JOIN = "eqjoinsel"
);


ALTER OPERATOR "pg_catalog".~= ("circle", "circle") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~= ("circle", "circle") IS 'same as';



CREATE OPERATOR "pg_catalog".~>=~ (
    FUNCTION = "text_pattern_ge",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".~<=~),
    NEGATOR = OPERATOR("pg_catalog".~<~),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".~>=~ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~>=~ ("text", "text") IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".~>=~ (
    FUNCTION = "bpchar_pattern_ge",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".~<=~),
    NEGATOR = OPERATOR("pg_catalog".~<~),
    RESTRICT = "scalargesel",
    JOIN = "scalargejoinsel"
);


ALTER OPERATOR "pg_catalog".~>=~ (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~>=~ (character, character) IS 'greater than or equal';



CREATE OPERATOR "pg_catalog".~>~ (
    FUNCTION = "text_pattern_gt",
    LEFTARG = "text",
    RIGHTARG = "text",
    COMMUTATOR = OPERATOR("pg_catalog".~<~),
    NEGATOR = OPERATOR("pg_catalog".~<=~),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".~>~ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~>~ ("text", "text") IS 'greater than';



CREATE OPERATOR "pg_catalog".~>~ (
    FUNCTION = "bpchar_pattern_gt",
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR("pg_catalog".~<~),
    NEGATOR = OPERATOR("pg_catalog".~<=~),
    RESTRICT = "scalargtsel",
    JOIN = "scalargtjoinsel"
);


ALTER OPERATOR "pg_catalog".~>~ (character, character) OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~>~ (character, character) IS 'greater than';



CREATE OPERATOR "pg_catalog".~~ (
    FUNCTION = "namelike",
    LEFTARG = "name",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~~),
    RESTRICT = "likesel",
    JOIN = "likejoinsel"
);


ALTER OPERATOR "pg_catalog".~~ ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~~ ("name", "text") IS 'matches LIKE expression';



CREATE OPERATOR "pg_catalog".~~ (
    FUNCTION = "textlike",
    LEFTARG = "text",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~~),
    RESTRICT = "likesel",
    JOIN = "likejoinsel"
);


ALTER OPERATOR "pg_catalog".~~ ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~~ ("text", "text") IS 'matches LIKE expression';



CREATE OPERATOR "pg_catalog".~~ (
    FUNCTION = "bpcharlike",
    LEFTARG = character,
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~~),
    RESTRICT = "likesel",
    JOIN = "likejoinsel"
);


ALTER OPERATOR "pg_catalog".~~ (character, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~~ (character, "text") IS 'matches LIKE expression';



CREATE OPERATOR "pg_catalog".~~ (
    FUNCTION = "bytealike",
    LEFTARG = "bytea",
    RIGHTARG = "bytea",
    NEGATOR = OPERATOR("pg_catalog".!~~),
    RESTRICT = "likesel",
    JOIN = "likejoinsel"
);


ALTER OPERATOR "pg_catalog".~~ ("bytea", "bytea") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~~ ("bytea", "bytea") IS 'matches LIKE expression';



CREATE OPERATOR "pg_catalog".~~* (
    FUNCTION = "nameiclike",
    LEFTARG = "name",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~~*),
    RESTRICT = "iclikesel",
    JOIN = "iclikejoinsel"
);


ALTER OPERATOR "pg_catalog".~~* ("name", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~~* ("name", "text") IS 'matches LIKE expression, case-insensitive';



CREATE OPERATOR "pg_catalog".~~* (
    FUNCTION = "texticlike",
    LEFTARG = "text",
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~~*),
    RESTRICT = "iclikesel",
    JOIN = "iclikejoinsel"
);


ALTER OPERATOR "pg_catalog".~~* ("text", "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~~* ("text", "text") IS 'matches LIKE expression, case-insensitive';



CREATE OPERATOR "pg_catalog".~~* (
    FUNCTION = "bpchariclike",
    LEFTARG = character,
    RIGHTARG = "text",
    NEGATOR = OPERATOR("pg_catalog".!~~*),
    RESTRICT = "iclikesel",
    JOIN = "iclikejoinsel"
);


ALTER OPERATOR "pg_catalog".~~* (character, "text") OWNER TO "supabase_admin";


COMMENT ON OPERATOR "pg_catalog".~~* (character, "text") IS 'matches LIKE expression, case-insensitive';



CREATE OPERATOR FAMILY "pg_catalog"."aclitem_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."aclitem_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."aclitem_ops"
    DEFAULT FOR TYPE "aclitem" USING "hash" FAMILY "pg_catalog"."aclitem_ops" AS
    STORAGE "aclitem";


ALTER OPERATOR CLASS "pg_catalog"."aclitem_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."array_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."array_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."array_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."array_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."array_ops" USING "gin";


ALTER OPERATOR FAMILY "pg_catalog"."array_ops" USING "gin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."array_ops"
    DEFAULT FOR TYPE "anyarray" USING "btree" FAMILY "pg_catalog"."array_ops" AS
    STORAGE "anyarray";


ALTER OPERATOR CLASS "pg_catalog"."array_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."array_ops"
    DEFAULT FOR TYPE "anyarray" USING "hash" FAMILY "pg_catalog"."array_ops" AS
    STORAGE "anyarray";


ALTER OPERATOR CLASS "pg_catalog"."array_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."array_ops"
    DEFAULT FOR TYPE "anyarray" USING "gin" FAMILY "pg_catalog"."array_ops" AS
    STORAGE "anyelement";


ALTER OPERATOR CLASS "pg_catalog"."array_ops" USING "gin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bit_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."bit_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bit_minmax_ops"
    DEFAULT FOR TYPE bit USING "brin" FAMILY "pg_catalog"."bit_minmax_ops" AS
    STORAGE bit;


ALTER OPERATOR CLASS "pg_catalog"."bit_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bit_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."bit_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bit_ops"
    DEFAULT FOR TYPE bit USING "btree" FAMILY "pg_catalog"."bit_ops" AS
    STORAGE bit;


ALTER OPERATOR CLASS "pg_catalog"."bit_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bool_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."bool_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bool_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."bool_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bool_ops"
    DEFAULT FOR TYPE boolean USING "btree" FAMILY "pg_catalog"."bool_ops" AS
    STORAGE boolean;


ALTER OPERATOR CLASS "pg_catalog"."bool_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bool_ops"
    DEFAULT FOR TYPE boolean USING "hash" FAMILY "pg_catalog"."bool_ops" AS
    STORAGE boolean;


ALTER OPERATOR CLASS "pg_catalog"."bool_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."box_inclusion_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."box_inclusion_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."box_inclusion_ops"
    DEFAULT FOR TYPE "box" USING "brin" FAMILY "pg_catalog"."box_inclusion_ops" AS
    STORAGE "box";


ALTER OPERATOR CLASS "pg_catalog"."box_inclusion_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."box_ops" USING "gist";


ALTER OPERATOR FAMILY "pg_catalog"."box_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."box_ops" USING "spgist";


ALTER OPERATOR FAMILY "pg_catalog"."box_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."box_ops"
    DEFAULT FOR TYPE "box" USING "gist" FAMILY "pg_catalog"."box_ops" AS
    STORAGE "box";


ALTER OPERATOR CLASS "pg_catalog"."box_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."box_ops"
    DEFAULT FOR TYPE "box" USING "spgist" FAMILY "pg_catalog"."box_ops" AS
    STORAGE "box";


ALTER OPERATOR CLASS "pg_catalog"."box_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bpchar_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."bpchar_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bpchar_bloom_ops"
    FOR TYPE character USING "brin" FAMILY "pg_catalog"."bpchar_bloom_ops" AS
    STORAGE character;


ALTER OPERATOR CLASS "pg_catalog"."bpchar_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bpchar_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."bpchar_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bpchar_minmax_ops"
    DEFAULT FOR TYPE character USING "brin" FAMILY "pg_catalog"."bpchar_minmax_ops" AS
    STORAGE character;


ALTER OPERATOR CLASS "pg_catalog"."bpchar_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bpchar_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."bpchar_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bpchar_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."bpchar_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bpchar_ops"
    DEFAULT FOR TYPE character USING "btree" FAMILY "pg_catalog"."bpchar_ops" AS
    STORAGE character;


ALTER OPERATOR CLASS "pg_catalog"."bpchar_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bpchar_ops"
    DEFAULT FOR TYPE character USING "hash" FAMILY "pg_catalog"."bpchar_ops" AS
    STORAGE character;


ALTER OPERATOR CLASS "pg_catalog"."bpchar_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bpchar_pattern_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."bpchar_pattern_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bpchar_pattern_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."bpchar_pattern_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bpchar_pattern_ops"
    FOR TYPE character USING "btree" FAMILY "pg_catalog"."bpchar_pattern_ops" AS
    STORAGE character;


ALTER OPERATOR CLASS "pg_catalog"."bpchar_pattern_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bpchar_pattern_ops"
    FOR TYPE character USING "hash" FAMILY "pg_catalog"."bpchar_pattern_ops" AS
    STORAGE character;


ALTER OPERATOR CLASS "pg_catalog"."bpchar_pattern_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bytea_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."bytea_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bytea_bloom_ops"
    FOR TYPE "bytea" USING "brin" FAMILY "pg_catalog"."bytea_bloom_ops" AS
    STORAGE "bytea";


ALTER OPERATOR CLASS "pg_catalog"."bytea_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bytea_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."bytea_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bytea_minmax_ops"
    DEFAULT FOR TYPE "bytea" USING "brin" FAMILY "pg_catalog"."bytea_minmax_ops" AS
    STORAGE "bytea";


ALTER OPERATOR CLASS "pg_catalog"."bytea_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bytea_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."bytea_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."bytea_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."bytea_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bytea_ops"
    DEFAULT FOR TYPE "bytea" USING "btree" FAMILY "pg_catalog"."bytea_ops" AS
    STORAGE "bytea";


ALTER OPERATOR CLASS "pg_catalog"."bytea_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."bytea_ops"
    DEFAULT FOR TYPE "bytea" USING "hash" FAMILY "pg_catalog"."bytea_ops" AS
    STORAGE "bytea";


ALTER OPERATOR CLASS "pg_catalog"."bytea_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."char_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."char_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."char_bloom_ops"
    FOR TYPE "char" USING "brin" FAMILY "pg_catalog"."char_bloom_ops" AS
    STORAGE "char";


ALTER OPERATOR CLASS "pg_catalog"."char_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."char_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."char_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."char_minmax_ops"
    DEFAULT FOR TYPE "char" USING "brin" FAMILY "pg_catalog"."char_minmax_ops" AS
    STORAGE "char";


ALTER OPERATOR CLASS "pg_catalog"."char_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."char_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."char_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."char_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."char_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."char_ops"
    DEFAULT FOR TYPE "char" USING "btree" FAMILY "pg_catalog"."char_ops" AS
    STORAGE "char";


ALTER OPERATOR CLASS "pg_catalog"."char_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."char_ops"
    DEFAULT FOR TYPE "char" USING "hash" FAMILY "pg_catalog"."char_ops" AS
    STORAGE "char";


ALTER OPERATOR CLASS "pg_catalog"."char_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."cid_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."cid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."cid_ops"
    DEFAULT FOR TYPE "cid" USING "hash" FAMILY "pg_catalog"."cid_ops" AS
    STORAGE "cid";


ALTER OPERATOR CLASS "pg_catalog"."cid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."cidr_ops"
    FOR TYPE "inet" USING "btree" FAMILY "pg_catalog"."network_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."cidr_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."cidr_ops"
    FOR TYPE "inet" USING "hash" FAMILY "pg_catalog"."network_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."cidr_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."circle_ops" USING "gist";


ALTER OPERATOR FAMILY "pg_catalog"."circle_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."circle_ops"
    DEFAULT FOR TYPE "circle" USING "gist" FAMILY "pg_catalog"."circle_ops" AS
    STORAGE "box";


ALTER OPERATOR CLASS "pg_catalog"."circle_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."date_bloom_ops"
    FOR TYPE "date" USING "brin" FAMILY "pg_catalog"."datetime_bloom_ops" AS
    STORAGE "date";


ALTER OPERATOR CLASS "pg_catalog"."date_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."date_minmax_multi_ops"
    FOR TYPE "date" USING "brin" FAMILY "pg_catalog"."datetime_minmax_multi_ops" AS
    STORAGE "date";


ALTER OPERATOR CLASS "pg_catalog"."date_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."date_minmax_ops"
    DEFAULT FOR TYPE "date" USING "brin" FAMILY "pg_catalog"."datetime_minmax_ops" AS
    STORAGE "date";


ALTER OPERATOR CLASS "pg_catalog"."date_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."date_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."date_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."date_ops"
    DEFAULT FOR TYPE "date" USING "btree" FAMILY "pg_catalog"."datetime_ops" AS
    STORAGE "date";


ALTER OPERATOR CLASS "pg_catalog"."date_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."date_ops"
    DEFAULT FOR TYPE "date" USING "hash" FAMILY "pg_catalog"."date_ops" AS
    STORAGE "date";


ALTER OPERATOR CLASS "pg_catalog"."date_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."datetime_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."datetime_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."datetime_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."datetime_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."datetime_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."datetime_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."datetime_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."datetime_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."enum_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."enum_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."enum_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."enum_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."enum_ops"
    DEFAULT FOR TYPE "anyenum" USING "btree" FAMILY "pg_catalog"."enum_ops" AS
    STORAGE "anyenum";


ALTER OPERATOR CLASS "pg_catalog"."enum_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."enum_ops"
    DEFAULT FOR TYPE "anyenum" USING "hash" FAMILY "pg_catalog"."enum_ops" AS
    STORAGE "anyenum";


ALTER OPERATOR CLASS "pg_catalog"."enum_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float4_bloom_ops"
    FOR TYPE real USING "brin" FAMILY "pg_catalog"."float_bloom_ops" AS
    STORAGE real;


ALTER OPERATOR CLASS "pg_catalog"."float4_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float4_minmax_multi_ops"
    FOR TYPE real USING "brin" FAMILY "pg_catalog"."float_minmax_multi_ops" AS
    STORAGE real;


ALTER OPERATOR CLASS "pg_catalog"."float4_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float4_minmax_ops"
    DEFAULT FOR TYPE real USING "brin" FAMILY "pg_catalog"."float_minmax_ops" AS
    STORAGE real;


ALTER OPERATOR CLASS "pg_catalog"."float4_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float4_ops"
    DEFAULT FOR TYPE real USING "btree" FAMILY "pg_catalog"."float_ops" AS
    STORAGE real;


ALTER OPERATOR CLASS "pg_catalog"."float4_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float4_ops"
    DEFAULT FOR TYPE real USING "hash" FAMILY "pg_catalog"."float_ops" AS
    STORAGE real;


ALTER OPERATOR CLASS "pg_catalog"."float4_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float8_bloom_ops"
    FOR TYPE double precision USING "brin" FAMILY "pg_catalog"."float_bloom_ops" AS
    STORAGE double precision;


ALTER OPERATOR CLASS "pg_catalog"."float8_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float8_minmax_multi_ops"
    FOR TYPE double precision USING "brin" FAMILY "pg_catalog"."float_minmax_multi_ops" AS
    STORAGE double precision;


ALTER OPERATOR CLASS "pg_catalog"."float8_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float8_minmax_ops"
    DEFAULT FOR TYPE double precision USING "brin" FAMILY "pg_catalog"."float_minmax_ops" AS
    STORAGE double precision;


ALTER OPERATOR CLASS "pg_catalog"."float8_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float8_ops"
    DEFAULT FOR TYPE double precision USING "btree" FAMILY "pg_catalog"."float_ops" AS
    STORAGE double precision;


ALTER OPERATOR CLASS "pg_catalog"."float8_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."float8_ops"
    DEFAULT FOR TYPE double precision USING "hash" FAMILY "pg_catalog"."float_ops" AS
    STORAGE double precision;


ALTER OPERATOR CLASS "pg_catalog"."float8_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."float_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."float_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."float_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."float_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."float_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."float_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."float_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."float_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."float_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."float_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."inet_bloom_ops"
    FOR TYPE "inet" USING "brin" FAMILY "pg_catalog"."network_bloom_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."inet_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."inet_inclusion_ops"
    DEFAULT FOR TYPE "inet" USING "brin" FAMILY "pg_catalog"."network_inclusion_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."inet_inclusion_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."inet_minmax_multi_ops"
    FOR TYPE "inet" USING "brin" FAMILY "pg_catalog"."network_minmax_multi_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."inet_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."inet_minmax_ops"
    FOR TYPE "inet" USING "brin" FAMILY "pg_catalog"."network_minmax_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."inet_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."inet_ops"
    DEFAULT FOR TYPE "inet" USING "btree" FAMILY "pg_catalog"."network_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."inet_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."inet_ops"
    DEFAULT FOR TYPE "inet" USING "hash" FAMILY "pg_catalog"."network_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."inet_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."inet_ops"
    FOR TYPE "inet" USING "gist" FAMILY "pg_catalog"."network_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."inet_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."inet_ops"
    DEFAULT FOR TYPE "inet" USING "spgist" FAMILY "pg_catalog"."network_ops" AS
    STORAGE "inet";


ALTER OPERATOR CLASS "pg_catalog"."inet_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int2_bloom_ops"
    FOR TYPE smallint USING "brin" FAMILY "pg_catalog"."integer_bloom_ops" AS
    STORAGE smallint;


ALTER OPERATOR CLASS "pg_catalog"."int2_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int2_minmax_multi_ops"
    FOR TYPE smallint USING "brin" FAMILY "pg_catalog"."integer_minmax_multi_ops" AS
    STORAGE smallint;


ALTER OPERATOR CLASS "pg_catalog"."int2_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int2_minmax_ops"
    DEFAULT FOR TYPE smallint USING "brin" FAMILY "pg_catalog"."integer_minmax_ops" AS
    STORAGE smallint;


ALTER OPERATOR CLASS "pg_catalog"."int2_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int2_ops"
    DEFAULT FOR TYPE smallint USING "btree" FAMILY "pg_catalog"."integer_ops" AS
    STORAGE smallint;


ALTER OPERATOR CLASS "pg_catalog"."int2_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int2_ops"
    DEFAULT FOR TYPE smallint USING "hash" FAMILY "pg_catalog"."integer_ops" AS
    STORAGE smallint;


ALTER OPERATOR CLASS "pg_catalog"."int2_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int4_bloom_ops"
    FOR TYPE integer USING "brin" FAMILY "pg_catalog"."integer_bloom_ops" AS
    STORAGE integer;


ALTER OPERATOR CLASS "pg_catalog"."int4_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int4_minmax_multi_ops"
    FOR TYPE integer USING "brin" FAMILY "pg_catalog"."integer_minmax_multi_ops" AS
    STORAGE integer;


ALTER OPERATOR CLASS "pg_catalog"."int4_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int4_minmax_ops"
    DEFAULT FOR TYPE integer USING "brin" FAMILY "pg_catalog"."integer_minmax_ops" AS
    STORAGE integer;


ALTER OPERATOR CLASS "pg_catalog"."int4_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int4_ops"
    DEFAULT FOR TYPE integer USING "btree" FAMILY "pg_catalog"."integer_ops" AS
    STORAGE integer;


ALTER OPERATOR CLASS "pg_catalog"."int4_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int4_ops"
    DEFAULT FOR TYPE integer USING "hash" FAMILY "pg_catalog"."integer_ops" AS
    STORAGE integer;


ALTER OPERATOR CLASS "pg_catalog"."int4_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int8_bloom_ops"
    FOR TYPE bigint USING "brin" FAMILY "pg_catalog"."integer_bloom_ops" AS
    STORAGE bigint;


ALTER OPERATOR CLASS "pg_catalog"."int8_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int8_minmax_multi_ops"
    FOR TYPE bigint USING "brin" FAMILY "pg_catalog"."integer_minmax_multi_ops" AS
    STORAGE bigint;


ALTER OPERATOR CLASS "pg_catalog"."int8_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int8_minmax_ops"
    DEFAULT FOR TYPE bigint USING "brin" FAMILY "pg_catalog"."integer_minmax_ops" AS
    STORAGE bigint;


ALTER OPERATOR CLASS "pg_catalog"."int8_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int8_ops"
    DEFAULT FOR TYPE bigint USING "btree" FAMILY "pg_catalog"."integer_ops" AS
    STORAGE bigint;


ALTER OPERATOR CLASS "pg_catalog"."int8_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."int8_ops"
    DEFAULT FOR TYPE bigint USING "hash" FAMILY "pg_catalog"."integer_ops" AS
    STORAGE bigint;


ALTER OPERATOR CLASS "pg_catalog"."int8_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."integer_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."integer_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."integer_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."integer_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."integer_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."integer_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."integer_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."integer_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."integer_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."integer_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."interval_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."interval_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."interval_bloom_ops"
    FOR TYPE interval USING "brin" FAMILY "pg_catalog"."interval_bloom_ops" AS
    STORAGE interval;


ALTER OPERATOR CLASS "pg_catalog"."interval_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."interval_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."interval_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."interval_minmax_multi_ops"
    FOR TYPE interval USING "brin" FAMILY "pg_catalog"."interval_minmax_multi_ops" AS
    STORAGE interval;


ALTER OPERATOR CLASS "pg_catalog"."interval_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."interval_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."interval_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."interval_minmax_ops"
    DEFAULT FOR TYPE interval USING "brin" FAMILY "pg_catalog"."interval_minmax_ops" AS
    STORAGE interval;


ALTER OPERATOR CLASS "pg_catalog"."interval_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."interval_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."interval_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."interval_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."interval_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."interval_ops"
    DEFAULT FOR TYPE interval USING "btree" FAMILY "pg_catalog"."interval_ops" AS
    STORAGE interval;


ALTER OPERATOR CLASS "pg_catalog"."interval_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."interval_ops"
    DEFAULT FOR TYPE interval USING "hash" FAMILY "pg_catalog"."interval_ops" AS
    STORAGE interval;


ALTER OPERATOR CLASS "pg_catalog"."interval_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."jsonb_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."jsonb_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."jsonb_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."jsonb_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."jsonb_ops" USING "gin";


ALTER OPERATOR FAMILY "pg_catalog"."jsonb_ops" USING "gin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."jsonb_ops"
    DEFAULT FOR TYPE "jsonb" USING "btree" FAMILY "pg_catalog"."jsonb_ops" AS
    STORAGE "jsonb";


ALTER OPERATOR CLASS "pg_catalog"."jsonb_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."jsonb_ops"
    DEFAULT FOR TYPE "jsonb" USING "hash" FAMILY "pg_catalog"."jsonb_ops" AS
    STORAGE "jsonb";


ALTER OPERATOR CLASS "pg_catalog"."jsonb_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."jsonb_ops"
    DEFAULT FOR TYPE "jsonb" USING "gin" FAMILY "pg_catalog"."jsonb_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."jsonb_ops" USING "gin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."jsonb_path_ops" USING "gin";


ALTER OPERATOR FAMILY "pg_catalog"."jsonb_path_ops" USING "gin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."jsonb_path_ops"
    FOR TYPE "jsonb" USING "gin" FAMILY "pg_catalog"."jsonb_path_ops" AS
    STORAGE integer;


ALTER OPERATOR CLASS "pg_catalog"."jsonb_path_ops" USING "gin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."kd_point_ops" USING "spgist";


ALTER OPERATOR FAMILY "pg_catalog"."kd_point_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."kd_point_ops"
    FOR TYPE "point" USING "spgist" FAMILY "pg_catalog"."kd_point_ops" AS
    STORAGE "point";


ALTER OPERATOR CLASS "pg_catalog"."kd_point_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr8_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr8_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr8_bloom_ops"
    FOR TYPE "macaddr8" USING "brin" FAMILY "pg_catalog"."macaddr8_bloom_ops" AS
    STORAGE "macaddr8";


ALTER OPERATOR CLASS "pg_catalog"."macaddr8_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr8_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr8_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr8_minmax_multi_ops"
    FOR TYPE "macaddr8" USING "brin" FAMILY "pg_catalog"."macaddr8_minmax_multi_ops" AS
    STORAGE "macaddr8";


ALTER OPERATOR CLASS "pg_catalog"."macaddr8_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr8_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr8_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr8_minmax_ops"
    DEFAULT FOR TYPE "macaddr8" USING "brin" FAMILY "pg_catalog"."macaddr8_minmax_ops" AS
    STORAGE "macaddr8";


ALTER OPERATOR CLASS "pg_catalog"."macaddr8_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr8_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr8_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr8_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr8_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr8_ops"
    DEFAULT FOR TYPE "macaddr8" USING "btree" FAMILY "pg_catalog"."macaddr8_ops" AS
    STORAGE "macaddr8";


ALTER OPERATOR CLASS "pg_catalog"."macaddr8_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr8_ops"
    DEFAULT FOR TYPE "macaddr8" USING "hash" FAMILY "pg_catalog"."macaddr8_ops" AS
    STORAGE "macaddr8";


ALTER OPERATOR CLASS "pg_catalog"."macaddr8_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr_bloom_ops"
    FOR TYPE "macaddr" USING "brin" FAMILY "pg_catalog"."macaddr_bloom_ops" AS
    STORAGE "macaddr";


ALTER OPERATOR CLASS "pg_catalog"."macaddr_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr_minmax_multi_ops"
    FOR TYPE "macaddr" USING "brin" FAMILY "pg_catalog"."macaddr_minmax_multi_ops" AS
    STORAGE "macaddr";


ALTER OPERATOR CLASS "pg_catalog"."macaddr_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr_minmax_ops"
    DEFAULT FOR TYPE "macaddr" USING "brin" FAMILY "pg_catalog"."macaddr_minmax_ops" AS
    STORAGE "macaddr";


ALTER OPERATOR CLASS "pg_catalog"."macaddr_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."macaddr_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."macaddr_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr_ops"
    DEFAULT FOR TYPE "macaddr" USING "btree" FAMILY "pg_catalog"."macaddr_ops" AS
    STORAGE "macaddr";


ALTER OPERATOR CLASS "pg_catalog"."macaddr_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."macaddr_ops"
    DEFAULT FOR TYPE "macaddr" USING "hash" FAMILY "pg_catalog"."macaddr_ops" AS
    STORAGE "macaddr";


ALTER OPERATOR CLASS "pg_catalog"."macaddr_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."money_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."money_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."money_ops"
    DEFAULT FOR TYPE "money" USING "btree" FAMILY "pg_catalog"."money_ops" AS
    STORAGE "money";


ALTER OPERATOR CLASS "pg_catalog"."money_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."multirange_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."multirange_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."multirange_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."multirange_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."multirange_ops" USING "gist";


ALTER OPERATOR FAMILY "pg_catalog"."multirange_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."multirange_ops"
    DEFAULT FOR TYPE "anymultirange" USING "btree" FAMILY "pg_catalog"."multirange_ops" AS
    STORAGE "anymultirange";


ALTER OPERATOR CLASS "pg_catalog"."multirange_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."multirange_ops"
    DEFAULT FOR TYPE "anymultirange" USING "hash" FAMILY "pg_catalog"."multirange_ops" AS
    STORAGE "anymultirange";


ALTER OPERATOR CLASS "pg_catalog"."multirange_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."multirange_ops"
    DEFAULT FOR TYPE "anymultirange" USING "gist" FAMILY "pg_catalog"."multirange_ops" AS
    STORAGE "anyrange";


ALTER OPERATOR CLASS "pg_catalog"."multirange_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."name_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."name_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."name_bloom_ops"
    FOR TYPE "name" USING "brin" FAMILY "pg_catalog"."name_bloom_ops" AS
    STORAGE "name";


ALTER OPERATOR CLASS "pg_catalog"."name_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."name_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."name_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."name_minmax_ops"
    DEFAULT FOR TYPE "name" USING "brin" FAMILY "pg_catalog"."name_minmax_ops" AS
    STORAGE "name";


ALTER OPERATOR CLASS "pg_catalog"."name_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."name_ops"
    DEFAULT FOR TYPE "name" USING "btree" FAMILY "pg_catalog"."text_ops" AS
    STORAGE "cstring";


ALTER OPERATOR CLASS "pg_catalog"."name_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."name_ops"
    DEFAULT FOR TYPE "name" USING "hash" FAMILY "pg_catalog"."text_ops" AS
    STORAGE "name";


ALTER OPERATOR CLASS "pg_catalog"."name_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."network_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."network_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."network_inclusion_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."network_inclusion_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."network_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."network_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."network_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."network_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."network_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."network_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."network_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."network_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."network_ops" USING "gist";


ALTER OPERATOR FAMILY "pg_catalog"."network_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."network_ops" USING "spgist";


ALTER OPERATOR FAMILY "pg_catalog"."network_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."numeric_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."numeric_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."numeric_bloom_ops"
    FOR TYPE numeric USING "brin" FAMILY "pg_catalog"."numeric_bloom_ops" AS
    STORAGE numeric;


ALTER OPERATOR CLASS "pg_catalog"."numeric_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."numeric_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."numeric_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."numeric_minmax_multi_ops"
    FOR TYPE numeric USING "brin" FAMILY "pg_catalog"."numeric_minmax_multi_ops" AS
    STORAGE numeric;


ALTER OPERATOR CLASS "pg_catalog"."numeric_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."numeric_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."numeric_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."numeric_minmax_ops"
    DEFAULT FOR TYPE numeric USING "brin" FAMILY "pg_catalog"."numeric_minmax_ops" AS
    STORAGE numeric;


ALTER OPERATOR CLASS "pg_catalog"."numeric_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."numeric_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."numeric_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."numeric_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."numeric_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."numeric_ops"
    DEFAULT FOR TYPE numeric USING "btree" FAMILY "pg_catalog"."numeric_ops" AS
    STORAGE numeric;


ALTER OPERATOR CLASS "pg_catalog"."numeric_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."numeric_ops"
    DEFAULT FOR TYPE numeric USING "hash" FAMILY "pg_catalog"."numeric_ops" AS
    STORAGE numeric;


ALTER OPERATOR CLASS "pg_catalog"."numeric_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."oid_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."oid_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."oid_bloom_ops"
    FOR TYPE "oid" USING "brin" FAMILY "pg_catalog"."oid_bloom_ops" AS
    STORAGE "oid";


ALTER OPERATOR CLASS "pg_catalog"."oid_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."oid_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."oid_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."oid_minmax_multi_ops"
    FOR TYPE "oid" USING "brin" FAMILY "pg_catalog"."oid_minmax_multi_ops" AS
    STORAGE "oid";


ALTER OPERATOR CLASS "pg_catalog"."oid_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."oid_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."oid_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."oid_minmax_ops"
    DEFAULT FOR TYPE "oid" USING "brin" FAMILY "pg_catalog"."oid_minmax_ops" AS
    STORAGE "oid";


ALTER OPERATOR CLASS "pg_catalog"."oid_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."oid_ops"
    DEFAULT FOR TYPE "oid" USING "btree" FAMILY "pg_catalog"."oid_ops" AS
    STORAGE "oid";


ALTER OPERATOR CLASS "pg_catalog"."oid_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."oid_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."oid_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."oid_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."oid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."oid_ops"
    DEFAULT FOR TYPE "oid" USING "hash" FAMILY "pg_catalog"."oid_ops" AS
    STORAGE "oid";


ALTER OPERATOR CLASS "pg_catalog"."oid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."oidvector_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."oidvector_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."oidvector_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."oidvector_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."oidvector_ops"
    DEFAULT FOR TYPE "oidvector" USING "btree" FAMILY "pg_catalog"."oidvector_ops" AS
    STORAGE "oidvector";


ALTER OPERATOR CLASS "pg_catalog"."oidvector_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."oidvector_ops"
    DEFAULT FOR TYPE "oidvector" USING "hash" FAMILY "pg_catalog"."oidvector_ops" AS
    STORAGE "oidvector";


ALTER OPERATOR CLASS "pg_catalog"."oidvector_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."pg_lsn_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."pg_lsn_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."pg_lsn_bloom_ops"
    FOR TYPE "pg_lsn" USING "brin" FAMILY "pg_catalog"."pg_lsn_bloom_ops" AS
    STORAGE "pg_lsn";


ALTER OPERATOR CLASS "pg_catalog"."pg_lsn_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."pg_lsn_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."pg_lsn_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."pg_lsn_minmax_multi_ops"
    FOR TYPE "pg_lsn" USING "brin" FAMILY "pg_catalog"."pg_lsn_minmax_multi_ops" AS
    STORAGE "pg_lsn";


ALTER OPERATOR CLASS "pg_catalog"."pg_lsn_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."pg_lsn_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."pg_lsn_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."pg_lsn_minmax_ops"
    DEFAULT FOR TYPE "pg_lsn" USING "brin" FAMILY "pg_catalog"."pg_lsn_minmax_ops" AS
    STORAGE "pg_lsn";


ALTER OPERATOR CLASS "pg_catalog"."pg_lsn_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."pg_lsn_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."pg_lsn_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."pg_lsn_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."pg_lsn_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."pg_lsn_ops"
    DEFAULT FOR TYPE "pg_lsn" USING "btree" FAMILY "pg_catalog"."pg_lsn_ops" AS
    STORAGE "pg_lsn";


ALTER OPERATOR CLASS "pg_catalog"."pg_lsn_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."pg_lsn_ops"
    DEFAULT FOR TYPE "pg_lsn" USING "hash" FAMILY "pg_catalog"."pg_lsn_ops" AS
    STORAGE "pg_lsn";


ALTER OPERATOR CLASS "pg_catalog"."pg_lsn_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."point_ops" USING "gist";


ALTER OPERATOR FAMILY "pg_catalog"."point_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."point_ops"
    DEFAULT FOR TYPE "point" USING "gist" FAMILY "pg_catalog"."point_ops" AS
    STORAGE "box";


ALTER OPERATOR CLASS "pg_catalog"."point_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."poly_ops" USING "gist";


ALTER OPERATOR FAMILY "pg_catalog"."poly_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."poly_ops" USING "spgist";


ALTER OPERATOR FAMILY "pg_catalog"."poly_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."poly_ops"
    DEFAULT FOR TYPE "polygon" USING "gist" FAMILY "pg_catalog"."poly_ops" AS
    STORAGE "box";


ALTER OPERATOR CLASS "pg_catalog"."poly_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."poly_ops"
    DEFAULT FOR TYPE "polygon" USING "spgist" FAMILY "pg_catalog"."poly_ops" AS
    STORAGE "box";


ALTER OPERATOR CLASS "pg_catalog"."poly_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."quad_point_ops" USING "spgist";


ALTER OPERATOR FAMILY "pg_catalog"."quad_point_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."quad_point_ops"
    DEFAULT FOR TYPE "point" USING "spgist" FAMILY "pg_catalog"."quad_point_ops" AS
    STORAGE "point";


ALTER OPERATOR CLASS "pg_catalog"."quad_point_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."range_inclusion_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."range_inclusion_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."range_inclusion_ops"
    DEFAULT FOR TYPE "anyrange" USING "brin" FAMILY "pg_catalog"."range_inclusion_ops" AS
    STORAGE "anyrange";


ALTER OPERATOR CLASS "pg_catalog"."range_inclusion_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."range_ops" USING "spgist";


ALTER OPERATOR FAMILY "pg_catalog"."range_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."range_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."range_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."range_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."range_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."range_ops" USING "gist";


ALTER OPERATOR FAMILY "pg_catalog"."range_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."range_ops"
    DEFAULT FOR TYPE "anyrange" USING "btree" FAMILY "pg_catalog"."range_ops" AS
    STORAGE "anyrange";


ALTER OPERATOR CLASS "pg_catalog"."range_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."range_ops"
    DEFAULT FOR TYPE "anyrange" USING "hash" FAMILY "pg_catalog"."range_ops" AS
    STORAGE "anyrange";


ALTER OPERATOR CLASS "pg_catalog"."range_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."range_ops"
    DEFAULT FOR TYPE "anyrange" USING "gist" FAMILY "pg_catalog"."range_ops" AS
    STORAGE "anyrange";


ALTER OPERATOR CLASS "pg_catalog"."range_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."range_ops"
    DEFAULT FOR TYPE "anyrange" USING "spgist" FAMILY "pg_catalog"."range_ops" AS
    STORAGE "anyrange";


ALTER OPERATOR CLASS "pg_catalog"."range_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."record_image_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."record_image_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."record_image_ops"
    FOR TYPE "record" USING "btree" FAMILY "pg_catalog"."record_image_ops" AS
    STORAGE "record";


ALTER OPERATOR CLASS "pg_catalog"."record_image_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."record_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."record_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."record_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."record_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."record_ops"
    DEFAULT FOR TYPE "record" USING "btree" FAMILY "pg_catalog"."record_ops" AS
    STORAGE "record";


ALTER OPERATOR CLASS "pg_catalog"."record_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."record_ops"
    DEFAULT FOR TYPE "record" USING "hash" FAMILY "pg_catalog"."record_ops" AS
    STORAGE "record";


ALTER OPERATOR CLASS "pg_catalog"."record_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."text_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."text_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."text_bloom_ops"
    FOR TYPE "text" USING "brin" FAMILY "pg_catalog"."text_bloom_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."text_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."text_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."text_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."text_minmax_ops"
    DEFAULT FOR TYPE "text" USING "brin" FAMILY "pg_catalog"."text_minmax_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."text_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."text_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."text_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."text_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."text_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."text_ops"
    DEFAULT FOR TYPE "text" USING "btree" FAMILY "pg_catalog"."text_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."text_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."text_ops" USING "spgist";


ALTER OPERATOR FAMILY "pg_catalog"."text_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."text_ops"
    DEFAULT FOR TYPE "text" USING "hash" FAMILY "pg_catalog"."text_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."text_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."text_ops"
    DEFAULT FOR TYPE "text" USING "spgist" FAMILY "pg_catalog"."text_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."text_ops" USING "spgist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."text_pattern_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."text_pattern_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."text_pattern_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."text_pattern_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."text_pattern_ops"
    FOR TYPE "text" USING "btree" FAMILY "pg_catalog"."text_pattern_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."text_pattern_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."text_pattern_ops"
    FOR TYPE "text" USING "hash" FAMILY "pg_catalog"."text_pattern_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."text_pattern_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tid_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."tid_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tid_bloom_ops"
    FOR TYPE "tid" USING "brin" FAMILY "pg_catalog"."tid_bloom_ops" AS
    STORAGE "tid";


ALTER OPERATOR CLASS "pg_catalog"."tid_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tid_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."tid_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tid_minmax_multi_ops"
    FOR TYPE "tid" USING "brin" FAMILY "pg_catalog"."tid_minmax_multi_ops" AS
    STORAGE "tid";


ALTER OPERATOR CLASS "pg_catalog"."tid_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tid_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."tid_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tid_minmax_ops"
    DEFAULT FOR TYPE "tid" USING "brin" FAMILY "pg_catalog"."tid_minmax_ops" AS
    STORAGE "tid";


ALTER OPERATOR CLASS "pg_catalog"."tid_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tid_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."tid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tid_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."tid_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tid_ops"
    DEFAULT FOR TYPE "tid" USING "btree" FAMILY "pg_catalog"."tid_ops" AS
    STORAGE "tid";


ALTER OPERATOR CLASS "pg_catalog"."tid_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tid_ops"
    DEFAULT FOR TYPE "tid" USING "hash" FAMILY "pg_catalog"."tid_ops" AS
    STORAGE "tid";


ALTER OPERATOR CLASS "pg_catalog"."tid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."time_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."time_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."time_bloom_ops"
    FOR TYPE time without time zone USING "brin" FAMILY "pg_catalog"."time_bloom_ops" AS
    STORAGE time without time zone;


ALTER OPERATOR CLASS "pg_catalog"."time_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."time_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."time_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."time_minmax_multi_ops"
    FOR TYPE time without time zone USING "brin" FAMILY "pg_catalog"."time_minmax_multi_ops" AS
    STORAGE time without time zone;


ALTER OPERATOR CLASS "pg_catalog"."time_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."time_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."time_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."time_minmax_ops"
    DEFAULT FOR TYPE time without time zone USING "brin" FAMILY "pg_catalog"."time_minmax_ops" AS
    STORAGE time without time zone;


ALTER OPERATOR CLASS "pg_catalog"."time_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."time_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."time_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."time_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."time_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."time_ops"
    DEFAULT FOR TYPE time without time zone USING "btree" FAMILY "pg_catalog"."time_ops" AS
    STORAGE time without time zone;


ALTER OPERATOR CLASS "pg_catalog"."time_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."time_ops"
    DEFAULT FOR TYPE time without time zone USING "hash" FAMILY "pg_catalog"."time_ops" AS
    STORAGE time without time zone;


ALTER OPERATOR CLASS "pg_catalog"."time_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamp_bloom_ops"
    FOR TYPE timestamp without time zone USING "brin" FAMILY "pg_catalog"."datetime_bloom_ops" AS
    STORAGE timestamp without time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamp_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamp_minmax_multi_ops"
    FOR TYPE timestamp without time zone USING "brin" FAMILY "pg_catalog"."datetime_minmax_multi_ops" AS
    STORAGE timestamp without time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamp_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamp_minmax_ops"
    DEFAULT FOR TYPE timestamp without time zone USING "brin" FAMILY "pg_catalog"."datetime_minmax_ops" AS
    STORAGE timestamp without time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamp_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."timestamp_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."timestamp_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamp_ops"
    DEFAULT FOR TYPE timestamp without time zone USING "btree" FAMILY "pg_catalog"."datetime_ops" AS
    STORAGE timestamp without time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamp_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamp_ops"
    DEFAULT FOR TYPE timestamp without time zone USING "hash" FAMILY "pg_catalog"."timestamp_ops" AS
    STORAGE timestamp without time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamp_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamptz_bloom_ops"
    FOR TYPE timestamp with time zone USING "brin" FAMILY "pg_catalog"."datetime_bloom_ops" AS
    STORAGE timestamp with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamptz_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamptz_minmax_multi_ops"
    FOR TYPE timestamp with time zone USING "brin" FAMILY "pg_catalog"."datetime_minmax_multi_ops" AS
    STORAGE timestamp with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamptz_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamptz_minmax_ops"
    DEFAULT FOR TYPE timestamp with time zone USING "brin" FAMILY "pg_catalog"."datetime_minmax_ops" AS
    STORAGE timestamp with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamptz_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."timestamptz_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."timestamptz_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamptz_ops"
    DEFAULT FOR TYPE timestamp with time zone USING "btree" FAMILY "pg_catalog"."datetime_ops" AS
    STORAGE timestamp with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamptz_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timestamptz_ops"
    DEFAULT FOR TYPE timestamp with time zone USING "hash" FAMILY "pg_catalog"."timestamptz_ops" AS
    STORAGE timestamp with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timestamptz_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."timetz_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."timetz_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timetz_bloom_ops"
    FOR TYPE time with time zone USING "brin" FAMILY "pg_catalog"."timetz_bloom_ops" AS
    STORAGE time with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timetz_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."timetz_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."timetz_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timetz_minmax_multi_ops"
    FOR TYPE time with time zone USING "brin" FAMILY "pg_catalog"."timetz_minmax_multi_ops" AS
    STORAGE time with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timetz_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."timetz_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."timetz_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timetz_minmax_ops"
    DEFAULT FOR TYPE time with time zone USING "brin" FAMILY "pg_catalog"."timetz_minmax_ops" AS
    STORAGE time with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timetz_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."timetz_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."timetz_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."timetz_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."timetz_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timetz_ops"
    DEFAULT FOR TYPE time with time zone USING "btree" FAMILY "pg_catalog"."timetz_ops" AS
    STORAGE time with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timetz_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."timetz_ops"
    DEFAULT FOR TYPE time with time zone USING "hash" FAMILY "pg_catalog"."timetz_ops" AS
    STORAGE time with time zone;


ALTER OPERATOR CLASS "pg_catalog"."timetz_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tsquery_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."tsquery_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tsquery_ops" USING "gist";


ALTER OPERATOR FAMILY "pg_catalog"."tsquery_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tsquery_ops"
    DEFAULT FOR TYPE "tsquery" USING "btree" FAMILY "pg_catalog"."tsquery_ops" AS
    STORAGE "tsquery";


ALTER OPERATOR CLASS "pg_catalog"."tsquery_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tsquery_ops"
    DEFAULT FOR TYPE "tsquery" USING "gist" FAMILY "pg_catalog"."tsquery_ops" AS
    STORAGE bigint;


ALTER OPERATOR CLASS "pg_catalog"."tsquery_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tsvector_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."tsvector_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tsvector_ops" USING "gist";


ALTER OPERATOR FAMILY "pg_catalog"."tsvector_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."tsvector_ops" USING "gin";


ALTER OPERATOR FAMILY "pg_catalog"."tsvector_ops" USING "gin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tsvector_ops"
    DEFAULT FOR TYPE "tsvector" USING "btree" FAMILY "pg_catalog"."tsvector_ops" AS
    STORAGE "tsvector";


ALTER OPERATOR CLASS "pg_catalog"."tsvector_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tsvector_ops"
    DEFAULT FOR TYPE "tsvector" USING "gist" FAMILY "pg_catalog"."tsvector_ops" AS
    STORAGE "gtsvector";


ALTER OPERATOR CLASS "pg_catalog"."tsvector_ops" USING "gist" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."tsvector_ops"
    DEFAULT FOR TYPE "tsvector" USING "gin" FAMILY "pg_catalog"."tsvector_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."tsvector_ops" USING "gin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."uuid_bloom_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."uuid_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."uuid_bloom_ops"
    FOR TYPE "uuid" USING "brin" FAMILY "pg_catalog"."uuid_bloom_ops" AS
    STORAGE "uuid";


ALTER OPERATOR CLASS "pg_catalog"."uuid_bloom_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."uuid_minmax_multi_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."uuid_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."uuid_minmax_multi_ops"
    FOR TYPE "uuid" USING "brin" FAMILY "pg_catalog"."uuid_minmax_multi_ops" AS
    STORAGE "uuid";


ALTER OPERATOR CLASS "pg_catalog"."uuid_minmax_multi_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."uuid_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."uuid_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."uuid_minmax_ops"
    DEFAULT FOR TYPE "uuid" USING "brin" FAMILY "pg_catalog"."uuid_minmax_ops" AS
    STORAGE "uuid";


ALTER OPERATOR CLASS "pg_catalog"."uuid_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."uuid_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."uuid_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."uuid_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."uuid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."uuid_ops"
    DEFAULT FOR TYPE "uuid" USING "btree" FAMILY "pg_catalog"."uuid_ops" AS
    STORAGE "uuid";


ALTER OPERATOR CLASS "pg_catalog"."uuid_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."uuid_ops"
    DEFAULT FOR TYPE "uuid" USING "hash" FAMILY "pg_catalog"."uuid_ops" AS
    STORAGE "uuid";


ALTER OPERATOR CLASS "pg_catalog"."uuid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."varbit_minmax_ops" USING "brin";


ALTER OPERATOR FAMILY "pg_catalog"."varbit_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."varbit_minmax_ops"
    DEFAULT FOR TYPE bit varying USING "brin" FAMILY "pg_catalog"."varbit_minmax_ops" AS
    STORAGE bit varying;


ALTER OPERATOR CLASS "pg_catalog"."varbit_minmax_ops" USING "brin" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."varbit_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."varbit_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."varbit_ops"
    DEFAULT FOR TYPE bit varying USING "btree" FAMILY "pg_catalog"."varbit_ops" AS
    STORAGE bit varying;


ALTER OPERATOR CLASS "pg_catalog"."varbit_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."varchar_ops"
    FOR TYPE "text" USING "btree" FAMILY "pg_catalog"."text_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."varchar_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."varchar_ops"
    FOR TYPE "text" USING "hash" FAMILY "pg_catalog"."text_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."varchar_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."varchar_pattern_ops"
    FOR TYPE "text" USING "btree" FAMILY "pg_catalog"."text_pattern_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."varchar_pattern_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."varchar_pattern_ops"
    FOR TYPE "text" USING "hash" FAMILY "pg_catalog"."text_pattern_ops" AS
    STORAGE "text";


ALTER OPERATOR CLASS "pg_catalog"."varchar_pattern_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."xid8_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."xid8_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."xid8_ops" USING "btree";


ALTER OPERATOR FAMILY "pg_catalog"."xid8_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."xid8_ops"
    DEFAULT FOR TYPE "xid8" USING "hash" FAMILY "pg_catalog"."xid8_ops" AS
    STORAGE "xid8";


ALTER OPERATOR CLASS "pg_catalog"."xid8_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."xid8_ops"
    DEFAULT FOR TYPE "xid8" USING "btree" FAMILY "pg_catalog"."xid8_ops" AS
    STORAGE "xid8";


ALTER OPERATOR CLASS "pg_catalog"."xid8_ops" USING "btree" OWNER TO "supabase_admin";


CREATE OPERATOR FAMILY "pg_catalog"."xid_ops" USING "hash";


ALTER OPERATOR FAMILY "pg_catalog"."xid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE OPERATOR CLASS "pg_catalog"."xid_ops"
    DEFAULT FOR TYPE "xid" USING "hash" FAMILY "pg_catalog"."xid_ops" AS
    STORAGE "xid";


ALTER OPERATOR CLASS "pg_catalog"."xid_ops" USING "hash" OWNER TO "supabase_admin";


CREATE DEFAULT CONVERSION "pg_catalog"."big5_to_euc_tw" FOR 'BIG5' TO 'EUC_TW' FROM "big5_to_euc_tw";


ALTER CONVERSION "pg_catalog"."big5_to_euc_tw" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."big5_to_euc_tw" IS 'conversion for BIG5 to EUC_TW';



CREATE DEFAULT CONVERSION "pg_catalog"."big5_to_mic" FOR 'BIG5' TO 'MULE_INTERNAL' FROM "big5_to_mic";


ALTER CONVERSION "pg_catalog"."big5_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."big5_to_mic" IS 'conversion for BIG5 to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."big5_to_utf8" FOR 'BIG5' TO 'UTF8' FROM "big5_to_utf8";


ALTER CONVERSION "pg_catalog"."big5_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."big5_to_utf8" IS 'conversion for BIG5 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_cn_to_mic" FOR 'EUC_CN' TO 'MULE_INTERNAL' FROM "euc_cn_to_mic";


ALTER CONVERSION "pg_catalog"."euc_cn_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_cn_to_mic" IS 'conversion for EUC_CN to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_cn_to_utf8" FOR 'EUC_CN' TO 'UTF8' FROM "euc_cn_to_utf8";


ALTER CONVERSION "pg_catalog"."euc_cn_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_cn_to_utf8" IS 'conversion for EUC_CN to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_jis_2004_to_shift_jis_2004" FOR 'EUC_JIS_2004' TO 'SHIFT_JIS_2004' FROM "euc_jis_2004_to_shift_jis_2004";


ALTER CONVERSION "pg_catalog"."euc_jis_2004_to_shift_jis_2004" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_jis_2004_to_shift_jis_2004" IS 'conversion for EUC_JIS_2004 to SHIFT_JIS_2004';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_jis_2004_to_utf8" FOR 'EUC_JIS_2004' TO 'UTF8' FROM "euc_jis_2004_to_utf8";


ALTER CONVERSION "pg_catalog"."euc_jis_2004_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_jis_2004_to_utf8" IS 'conversion for EUC_JIS_2004 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_jp_to_mic" FOR 'EUC_JP' TO 'MULE_INTERNAL' FROM "euc_jp_to_mic";


ALTER CONVERSION "pg_catalog"."euc_jp_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_jp_to_mic" IS 'conversion for EUC_JP to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_jp_to_sjis" FOR 'EUC_JP' TO 'SJIS' FROM "euc_jp_to_sjis";


ALTER CONVERSION "pg_catalog"."euc_jp_to_sjis" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_jp_to_sjis" IS 'conversion for EUC_JP to SJIS';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_jp_to_utf8" FOR 'EUC_JP' TO 'UTF8' FROM "euc_jp_to_utf8";


ALTER CONVERSION "pg_catalog"."euc_jp_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_jp_to_utf8" IS 'conversion for EUC_JP to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_kr_to_mic" FOR 'EUC_KR' TO 'MULE_INTERNAL' FROM "euc_kr_to_mic";


ALTER CONVERSION "pg_catalog"."euc_kr_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_kr_to_mic" IS 'conversion for EUC_KR to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_kr_to_utf8" FOR 'EUC_KR' TO 'UTF8' FROM "euc_kr_to_utf8";


ALTER CONVERSION "pg_catalog"."euc_kr_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_kr_to_utf8" IS 'conversion for EUC_KR to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_tw_to_big5" FOR 'EUC_TW' TO 'BIG5' FROM "euc_tw_to_big5";


ALTER CONVERSION "pg_catalog"."euc_tw_to_big5" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_tw_to_big5" IS 'conversion for EUC_TW to BIG5';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_tw_to_mic" FOR 'EUC_TW' TO 'MULE_INTERNAL' FROM "euc_tw_to_mic";


ALTER CONVERSION "pg_catalog"."euc_tw_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_tw_to_mic" IS 'conversion for EUC_TW to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."euc_tw_to_utf8" FOR 'EUC_TW' TO 'UTF8' FROM "euc_tw_to_utf8";


ALTER CONVERSION "pg_catalog"."euc_tw_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."euc_tw_to_utf8" IS 'conversion for EUC_TW to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."gb18030_to_utf8" FOR 'GB18030' TO 'UTF8' FROM "gb18030_to_utf8";


ALTER CONVERSION "pg_catalog"."gb18030_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."gb18030_to_utf8" IS 'conversion for GB18030 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."gbk_to_utf8" FOR 'GBK' TO 'UTF8' FROM "gbk_to_utf8";


ALTER CONVERSION "pg_catalog"."gbk_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."gbk_to_utf8" IS 'conversion for GBK to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_10_to_utf8" FOR 'LATIN6' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_10_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_10_to_utf8" IS 'conversion for LATIN6 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_13_to_utf8" FOR 'LATIN7' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_13_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_13_to_utf8" IS 'conversion for LATIN7 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_14_to_utf8" FOR 'LATIN8' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_14_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_14_to_utf8" IS 'conversion for LATIN8 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_15_to_utf8" FOR 'LATIN9' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_15_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_15_to_utf8" IS 'conversion for LATIN9 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_16_to_utf8" FOR 'LATIN10' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_16_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_16_to_utf8" IS 'conversion for LATIN10 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_1_to_mic" FOR 'LATIN1' TO 'MULE_INTERNAL' FROM "latin1_to_mic";


ALTER CONVERSION "pg_catalog"."iso_8859_1_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_1_to_mic" IS 'conversion for LATIN1 to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_1_to_utf8" FOR 'LATIN1' TO 'UTF8' FROM "iso8859_1_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_1_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_1_to_utf8" IS 'conversion for LATIN1 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_2_to_mic" FOR 'LATIN2' TO 'MULE_INTERNAL' FROM "latin2_to_mic";


ALTER CONVERSION "pg_catalog"."iso_8859_2_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_2_to_mic" IS 'conversion for LATIN2 to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_2_to_utf8" FOR 'LATIN2' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_2_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_2_to_utf8" IS 'conversion for LATIN2 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_2_to_windows_1250" FOR 'LATIN2' TO 'WIN1250' FROM "latin2_to_win1250";


ALTER CONVERSION "pg_catalog"."iso_8859_2_to_windows_1250" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_2_to_windows_1250" IS 'conversion for LATIN2 to WIN1250';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_3_to_mic" FOR 'LATIN3' TO 'MULE_INTERNAL' FROM "latin3_to_mic";


ALTER CONVERSION "pg_catalog"."iso_8859_3_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_3_to_mic" IS 'conversion for LATIN3 to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_3_to_utf8" FOR 'LATIN3' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_3_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_3_to_utf8" IS 'conversion for LATIN3 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_4_to_mic" FOR 'LATIN4' TO 'MULE_INTERNAL' FROM "latin4_to_mic";


ALTER CONVERSION "pg_catalog"."iso_8859_4_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_4_to_mic" IS 'conversion for LATIN4 to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_4_to_utf8" FOR 'LATIN4' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_4_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_4_to_utf8" IS 'conversion for LATIN4 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_5_to_koi8_r" FOR 'ISO_8859_5' TO 'KOI8R' FROM "iso_to_koi8r";


ALTER CONVERSION "pg_catalog"."iso_8859_5_to_koi8_r" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_5_to_koi8_r" IS 'conversion for ISO-8859-5 to KOI8R';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_5_to_mic" FOR 'ISO_8859_5' TO 'MULE_INTERNAL' FROM "iso_to_mic";


ALTER CONVERSION "pg_catalog"."iso_8859_5_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_5_to_mic" IS 'conversion for ISO-8859-5 to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_5_to_utf8" FOR 'ISO_8859_5' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_5_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_5_to_utf8" IS 'conversion for ISO-8859-5 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_5_to_windows_1251" FOR 'ISO_8859_5' TO 'WIN1251' FROM "iso_to_win1251";


ALTER CONVERSION "pg_catalog"."iso_8859_5_to_windows_1251" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_5_to_windows_1251" IS 'conversion for ISO-8859-5 to WIN1251';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_5_to_windows_866" FOR 'ISO_8859_5' TO 'WIN866' FROM "iso_to_win866";


ALTER CONVERSION "pg_catalog"."iso_8859_5_to_windows_866" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_5_to_windows_866" IS 'conversion for ISO-8859-5 to WIN866';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_6_to_utf8" FOR 'ISO_8859_6' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_6_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_6_to_utf8" IS 'conversion for ISO-8859-6 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_7_to_utf8" FOR 'ISO_8859_7' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_7_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_7_to_utf8" IS 'conversion for ISO-8859-7 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_8_to_utf8" FOR 'ISO_8859_8' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_8_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_8_to_utf8" IS 'conversion for ISO-8859-8 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."iso_8859_9_to_utf8" FOR 'LATIN5' TO 'UTF8' FROM "iso8859_to_utf8";


ALTER CONVERSION "pg_catalog"."iso_8859_9_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."iso_8859_9_to_utf8" IS 'conversion for LATIN5 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."johab_to_utf8" FOR 'JOHAB' TO 'UTF8' FROM "johab_to_utf8";


ALTER CONVERSION "pg_catalog"."johab_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."johab_to_utf8" IS 'conversion for JOHAB to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."koi8_r_to_iso_8859_5" FOR 'KOI8R' TO 'ISO_8859_5' FROM "koi8r_to_iso";


ALTER CONVERSION "pg_catalog"."koi8_r_to_iso_8859_5" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."koi8_r_to_iso_8859_5" IS 'conversion for KOI8R to ISO-8859-5';



CREATE DEFAULT CONVERSION "pg_catalog"."koi8_r_to_mic" FOR 'KOI8R' TO 'MULE_INTERNAL' FROM "koi8r_to_mic";


ALTER CONVERSION "pg_catalog"."koi8_r_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."koi8_r_to_mic" IS 'conversion for KOI8R to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."koi8_r_to_utf8" FOR 'KOI8R' TO 'UTF8' FROM "koi8r_to_utf8";


ALTER CONVERSION "pg_catalog"."koi8_r_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."koi8_r_to_utf8" IS 'conversion for KOI8R to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."koi8_r_to_windows_1251" FOR 'KOI8R' TO 'WIN1251' FROM "koi8r_to_win1251";


ALTER CONVERSION "pg_catalog"."koi8_r_to_windows_1251" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."koi8_r_to_windows_1251" IS 'conversion for KOI8R to WIN1251';



CREATE DEFAULT CONVERSION "pg_catalog"."koi8_r_to_windows_866" FOR 'KOI8R' TO 'WIN866' FROM "koi8r_to_win866";


ALTER CONVERSION "pg_catalog"."koi8_r_to_windows_866" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."koi8_r_to_windows_866" IS 'conversion for KOI8R to WIN866';



CREATE DEFAULT CONVERSION "pg_catalog"."koi8_u_to_utf8" FOR 'KOI8U' TO 'UTF8' FROM "koi8u_to_utf8";


ALTER CONVERSION "pg_catalog"."koi8_u_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."koi8_u_to_utf8" IS 'conversion for KOI8U to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_big5" FOR 'MULE_INTERNAL' TO 'BIG5' FROM "mic_to_big5";


ALTER CONVERSION "pg_catalog"."mic_to_big5" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_big5" IS 'conversion for MULE_INTERNAL to BIG5';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_euc_cn" FOR 'MULE_INTERNAL' TO 'EUC_CN' FROM "mic_to_euc_cn";


ALTER CONVERSION "pg_catalog"."mic_to_euc_cn" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_euc_cn" IS 'conversion for MULE_INTERNAL to EUC_CN';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_euc_jp" FOR 'MULE_INTERNAL' TO 'EUC_JP' FROM "mic_to_euc_jp";


ALTER CONVERSION "pg_catalog"."mic_to_euc_jp" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_euc_jp" IS 'conversion for MULE_INTERNAL to EUC_JP';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_euc_kr" FOR 'MULE_INTERNAL' TO 'EUC_KR' FROM "mic_to_euc_kr";


ALTER CONVERSION "pg_catalog"."mic_to_euc_kr" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_euc_kr" IS 'conversion for MULE_INTERNAL to EUC_KR';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_euc_tw" FOR 'MULE_INTERNAL' TO 'EUC_TW' FROM "mic_to_euc_tw";


ALTER CONVERSION "pg_catalog"."mic_to_euc_tw" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_euc_tw" IS 'conversion for MULE_INTERNAL to EUC_TW';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_iso_8859_1" FOR 'MULE_INTERNAL' TO 'LATIN1' FROM "mic_to_latin1";


ALTER CONVERSION "pg_catalog"."mic_to_iso_8859_1" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_iso_8859_1" IS 'conversion for MULE_INTERNAL to LATIN1';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_iso_8859_2" FOR 'MULE_INTERNAL' TO 'LATIN2' FROM "mic_to_latin2";


ALTER CONVERSION "pg_catalog"."mic_to_iso_8859_2" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_iso_8859_2" IS 'conversion for MULE_INTERNAL to LATIN2';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_iso_8859_3" FOR 'MULE_INTERNAL' TO 'LATIN3' FROM "mic_to_latin3";


ALTER CONVERSION "pg_catalog"."mic_to_iso_8859_3" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_iso_8859_3" IS 'conversion for MULE_INTERNAL to LATIN3';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_iso_8859_4" FOR 'MULE_INTERNAL' TO 'LATIN4' FROM "mic_to_latin4";


ALTER CONVERSION "pg_catalog"."mic_to_iso_8859_4" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_iso_8859_4" IS 'conversion for MULE_INTERNAL to LATIN4';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_iso_8859_5" FOR 'MULE_INTERNAL' TO 'ISO_8859_5' FROM "mic_to_iso";


ALTER CONVERSION "pg_catalog"."mic_to_iso_8859_5" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_iso_8859_5" IS 'conversion for MULE_INTERNAL to ISO-8859-5';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_koi8_r" FOR 'MULE_INTERNAL' TO 'KOI8R' FROM "mic_to_koi8r";


ALTER CONVERSION "pg_catalog"."mic_to_koi8_r" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_koi8_r" IS 'conversion for MULE_INTERNAL to KOI8R';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_sjis" FOR 'MULE_INTERNAL' TO 'SJIS' FROM "mic_to_sjis";


ALTER CONVERSION "pg_catalog"."mic_to_sjis" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_sjis" IS 'conversion for MULE_INTERNAL to SJIS';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_windows_1250" FOR 'MULE_INTERNAL' TO 'WIN1250' FROM "mic_to_win1250";


ALTER CONVERSION "pg_catalog"."mic_to_windows_1250" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_windows_1250" IS 'conversion for MULE_INTERNAL to WIN1250';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_windows_1251" FOR 'MULE_INTERNAL' TO 'WIN1251' FROM "mic_to_win1251";


ALTER CONVERSION "pg_catalog"."mic_to_windows_1251" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_windows_1251" IS 'conversion for MULE_INTERNAL to WIN1251';



CREATE DEFAULT CONVERSION "pg_catalog"."mic_to_windows_866" FOR 'MULE_INTERNAL' TO 'WIN866' FROM "mic_to_win866";


ALTER CONVERSION "pg_catalog"."mic_to_windows_866" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."mic_to_windows_866" IS 'conversion for MULE_INTERNAL to WIN866';



CREATE DEFAULT CONVERSION "pg_catalog"."shift_jis_2004_to_euc_jis_2004" FOR 'SHIFT_JIS_2004' TO 'EUC_JIS_2004' FROM "shift_jis_2004_to_euc_jis_2004";


ALTER CONVERSION "pg_catalog"."shift_jis_2004_to_euc_jis_2004" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."shift_jis_2004_to_euc_jis_2004" IS 'conversion for SHIFT_JIS_2004 to EUC_JIS_2004';



CREATE DEFAULT CONVERSION "pg_catalog"."shift_jis_2004_to_utf8" FOR 'SHIFT_JIS_2004' TO 'UTF8' FROM "shift_jis_2004_to_utf8";


ALTER CONVERSION "pg_catalog"."shift_jis_2004_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."shift_jis_2004_to_utf8" IS 'conversion for SHIFT_JIS_2004 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."sjis_to_euc_jp" FOR 'SJIS' TO 'EUC_JP' FROM "sjis_to_euc_jp";


ALTER CONVERSION "pg_catalog"."sjis_to_euc_jp" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."sjis_to_euc_jp" IS 'conversion for SJIS to EUC_JP';



CREATE DEFAULT CONVERSION "pg_catalog"."sjis_to_mic" FOR 'SJIS' TO 'MULE_INTERNAL' FROM "sjis_to_mic";


ALTER CONVERSION "pg_catalog"."sjis_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."sjis_to_mic" IS 'conversion for SJIS to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."sjis_to_utf8" FOR 'SJIS' TO 'UTF8' FROM "sjis_to_utf8";


ALTER CONVERSION "pg_catalog"."sjis_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."sjis_to_utf8" IS 'conversion for SJIS to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."uhc_to_utf8" FOR 'UHC' TO 'UTF8' FROM "uhc_to_utf8";


ALTER CONVERSION "pg_catalog"."uhc_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."uhc_to_utf8" IS 'conversion for UHC to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_big5" FOR 'UTF8' TO 'BIG5' FROM "utf8_to_big5";


ALTER CONVERSION "pg_catalog"."utf8_to_big5" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_big5" IS 'conversion for UTF8 to BIG5';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_euc_cn" FOR 'UTF8' TO 'EUC_CN' FROM "utf8_to_euc_cn";


ALTER CONVERSION "pg_catalog"."utf8_to_euc_cn" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_euc_cn" IS 'conversion for UTF8 to EUC_CN';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_euc_jis_2004" FOR 'UTF8' TO 'EUC_JIS_2004' FROM "utf8_to_euc_jis_2004";


ALTER CONVERSION "pg_catalog"."utf8_to_euc_jis_2004" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_euc_jis_2004" IS 'conversion for UTF8 to EUC_JIS_2004';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_euc_jp" FOR 'UTF8' TO 'EUC_JP' FROM "utf8_to_euc_jp";


ALTER CONVERSION "pg_catalog"."utf8_to_euc_jp" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_euc_jp" IS 'conversion for UTF8 to EUC_JP';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_euc_kr" FOR 'UTF8' TO 'EUC_KR' FROM "utf8_to_euc_kr";


ALTER CONVERSION "pg_catalog"."utf8_to_euc_kr" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_euc_kr" IS 'conversion for UTF8 to EUC_KR';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_euc_tw" FOR 'UTF8' TO 'EUC_TW' FROM "utf8_to_euc_tw";


ALTER CONVERSION "pg_catalog"."utf8_to_euc_tw" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_euc_tw" IS 'conversion for UTF8 to EUC_TW';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_gb18030" FOR 'UTF8' TO 'GB18030' FROM "utf8_to_gb18030";


ALTER CONVERSION "pg_catalog"."utf8_to_gb18030" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_gb18030" IS 'conversion for UTF8 to GB18030';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_gbk" FOR 'UTF8' TO 'GBK' FROM "utf8_to_gbk";


ALTER CONVERSION "pg_catalog"."utf8_to_gbk" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_gbk" IS 'conversion for UTF8 to GBK';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_1" FOR 'UTF8' TO 'LATIN1' FROM "utf8_to_iso8859_1";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_1" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_1" IS 'conversion for UTF8 to LATIN1';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_10" FOR 'UTF8' TO 'LATIN6' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_10" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_10" IS 'conversion for UTF8 to LATIN6';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_13" FOR 'UTF8' TO 'LATIN7' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_13" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_13" IS 'conversion for UTF8 to LATIN7';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_14" FOR 'UTF8' TO 'LATIN8' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_14" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_14" IS 'conversion for UTF8 to LATIN8';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_15" FOR 'UTF8' TO 'LATIN9' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_15" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_15" IS 'conversion for UTF8 to LATIN9';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_16" FOR 'UTF8' TO 'LATIN10' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_16" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_16" IS 'conversion for UTF8 to LATIN10';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_2" FOR 'UTF8' TO 'LATIN2' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_2" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_2" IS 'conversion for UTF8 to LATIN2';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_3" FOR 'UTF8' TO 'LATIN3' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_3" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_3" IS 'conversion for UTF8 to LATIN3';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_4" FOR 'UTF8' TO 'LATIN4' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_4" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_4" IS 'conversion for UTF8 to LATIN4';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_5" FOR 'UTF8' TO 'ISO_8859_5' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_5" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_5" IS 'conversion for UTF8 to ISO-8859-5';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_6" FOR 'UTF8' TO 'ISO_8859_6' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_6" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_6" IS 'conversion for UTF8 to ISO-8859-6';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_7" FOR 'UTF8' TO 'ISO_8859_7' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_7" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_7" IS 'conversion for UTF8 to ISO-8859-7';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_8" FOR 'UTF8' TO 'ISO_8859_8' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_8" IS 'conversion for UTF8 to ISO-8859-8';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_iso_8859_9" FOR 'UTF8' TO 'LATIN5' FROM "utf8_to_iso8859";


ALTER CONVERSION "pg_catalog"."utf8_to_iso_8859_9" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_iso_8859_9" IS 'conversion for UTF8 to LATIN5';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_johab" FOR 'UTF8' TO 'JOHAB' FROM "utf8_to_johab";


ALTER CONVERSION "pg_catalog"."utf8_to_johab" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_johab" IS 'conversion for UTF8 to JOHAB';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_koi8_r" FOR 'UTF8' TO 'KOI8R' FROM "utf8_to_koi8r";


ALTER CONVERSION "pg_catalog"."utf8_to_koi8_r" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_koi8_r" IS 'conversion for UTF8 to KOI8R';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_koi8_u" FOR 'UTF8' TO 'KOI8U' FROM "utf8_to_koi8u";


ALTER CONVERSION "pg_catalog"."utf8_to_koi8_u" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_koi8_u" IS 'conversion for UTF8 to KOI8U';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_shift_jis_2004" FOR 'UTF8' TO 'SHIFT_JIS_2004' FROM "utf8_to_shift_jis_2004";


ALTER CONVERSION "pg_catalog"."utf8_to_shift_jis_2004" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_shift_jis_2004" IS 'conversion for UTF8 to SHIFT_JIS_2004';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_sjis" FOR 'UTF8' TO 'SJIS' FROM "utf8_to_sjis";


ALTER CONVERSION "pg_catalog"."utf8_to_sjis" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_sjis" IS 'conversion for UTF8 to SJIS';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_uhc" FOR 'UTF8' TO 'UHC' FROM "utf8_to_uhc";


ALTER CONVERSION "pg_catalog"."utf8_to_uhc" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_uhc" IS 'conversion for UTF8 to UHC';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_1250" FOR 'UTF8' TO 'WIN1250' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_1250" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_1250" IS 'conversion for UTF8 to WIN1250';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_1251" FOR 'UTF8' TO 'WIN1251' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_1251" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_1251" IS 'conversion for UTF8 to WIN1251';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_1252" FOR 'UTF8' TO 'WIN1252' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_1252" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_1252" IS 'conversion for UTF8 to WIN1252';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_1253" FOR 'UTF8' TO 'WIN1253' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_1253" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_1253" IS 'conversion for UTF8 to WIN1253';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_1254" FOR 'UTF8' TO 'WIN1254' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_1254" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_1254" IS 'conversion for UTF8 to WIN1254';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_1255" FOR 'UTF8' TO 'WIN1255' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_1255" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_1255" IS 'conversion for UTF8 to WIN1255';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_1256" FOR 'UTF8' TO 'WIN1256' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_1256" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_1256" IS 'conversion for UTF8 to WIN1256';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_1257" FOR 'UTF8' TO 'WIN1257' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_1257" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_1257" IS 'conversion for UTF8 to WIN1257';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_1258" FOR 'UTF8' TO 'WIN1258' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_1258" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_1258" IS 'conversion for UTF8 to WIN1258';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_866" FOR 'UTF8' TO 'WIN866' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_866" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_866" IS 'conversion for UTF8 to WIN866';



CREATE DEFAULT CONVERSION "pg_catalog"."utf8_to_windows_874" FOR 'UTF8' TO 'WIN874' FROM "utf8_to_win";


ALTER CONVERSION "pg_catalog"."utf8_to_windows_874" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."utf8_to_windows_874" IS 'conversion for UTF8 to WIN874';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1250_to_iso_8859_2" FOR 'WIN1250' TO 'LATIN2' FROM "win1250_to_latin2";


ALTER CONVERSION "pg_catalog"."windows_1250_to_iso_8859_2" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1250_to_iso_8859_2" IS 'conversion for WIN1250 to LATIN2';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1250_to_mic" FOR 'WIN1250' TO 'MULE_INTERNAL' FROM "win1250_to_mic";


ALTER CONVERSION "pg_catalog"."windows_1250_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1250_to_mic" IS 'conversion for WIN1250 to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1250_to_utf8" FOR 'WIN1250' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_1250_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1250_to_utf8" IS 'conversion for WIN1250 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1251_to_iso_8859_5" FOR 'WIN1251' TO 'ISO_8859_5' FROM "win1251_to_iso";


ALTER CONVERSION "pg_catalog"."windows_1251_to_iso_8859_5" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1251_to_iso_8859_5" IS 'conversion for WIN1251 to ISO-8859-5';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1251_to_koi8_r" FOR 'WIN1251' TO 'KOI8R' FROM "win1251_to_koi8r";


ALTER CONVERSION "pg_catalog"."windows_1251_to_koi8_r" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1251_to_koi8_r" IS 'conversion for WIN1251 to KOI8R';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1251_to_mic" FOR 'WIN1251' TO 'MULE_INTERNAL' FROM "win1251_to_mic";


ALTER CONVERSION "pg_catalog"."windows_1251_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1251_to_mic" IS 'conversion for WIN1251 to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1251_to_utf8" FOR 'WIN1251' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_1251_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1251_to_utf8" IS 'conversion for WIN1251 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1251_to_windows_866" FOR 'WIN1251' TO 'WIN866' FROM "win1251_to_win866";


ALTER CONVERSION "pg_catalog"."windows_1251_to_windows_866" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1251_to_windows_866" IS 'conversion for WIN1251 to WIN866';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1252_to_utf8" FOR 'WIN1252' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_1252_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1252_to_utf8" IS 'conversion for WIN1252 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1253_to_utf8" FOR 'WIN1253' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_1253_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1253_to_utf8" IS 'conversion for WIN1253 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1254_to_utf8" FOR 'WIN1254' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_1254_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1254_to_utf8" IS 'conversion for WIN1254 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1255_to_utf8" FOR 'WIN1255' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_1255_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1255_to_utf8" IS 'conversion for WIN1255 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1256_to_utf8" FOR 'WIN1256' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_1256_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1256_to_utf8" IS 'conversion for WIN1256 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1257_to_utf8" FOR 'WIN1257' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_1257_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1257_to_utf8" IS 'conversion for WIN1257 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_1258_to_utf8" FOR 'WIN1258' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_1258_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_1258_to_utf8" IS 'conversion for WIN1258 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_866_to_iso_8859_5" FOR 'WIN866' TO 'ISO_8859_5' FROM "win866_to_iso";


ALTER CONVERSION "pg_catalog"."windows_866_to_iso_8859_5" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_866_to_iso_8859_5" IS 'conversion for WIN866 to ISO-8859-5';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_866_to_koi8_r" FOR 'WIN866' TO 'KOI8R' FROM "win866_to_koi8r";


ALTER CONVERSION "pg_catalog"."windows_866_to_koi8_r" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_866_to_koi8_r" IS 'conversion for WIN866 to KOI8R';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_866_to_mic" FOR 'WIN866' TO 'MULE_INTERNAL' FROM "win866_to_mic";


ALTER CONVERSION "pg_catalog"."windows_866_to_mic" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_866_to_mic" IS 'conversion for WIN866 to MULE_INTERNAL';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_866_to_utf8" FOR 'WIN866' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_866_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_866_to_utf8" IS 'conversion for WIN866 to UTF8';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_866_to_windows_1251" FOR 'WIN866' TO 'WIN1251' FROM "win866_to_win1251";


ALTER CONVERSION "pg_catalog"."windows_866_to_windows_1251" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_866_to_windows_1251" IS 'conversion for WIN866 to WIN1251';



CREATE DEFAULT CONVERSION "pg_catalog"."windows_874_to_utf8" FOR 'WIN874' TO 'UTF8' FROM "win_to_utf8";


ALTER CONVERSION "pg_catalog"."windows_874_to_utf8" OWNER TO "supabase_admin";


COMMENT ON CONVERSION "pg_catalog"."windows_874_to_utf8" IS 'conversion for WIN874 to UTF8';



CREATE TEXT SEARCH PARSER "pg_catalog"."default" (
    START = "prsd_start",
    GETTOKEN = "prsd_nexttoken",
    END = "prsd_end",
    HEADLINE = "prsd_headline",
    LEXTYPES = "prsd_lextype" );



COMMENT ON TEXT SEARCH PARSER "pg_catalog"."default" IS 'default word parser';



CREATE TEXT SEARCH TEMPLATE "pg_catalog"."ispell" (
    INIT = "dispell_init",
    LEXIZE = "dispell_lexize" );



COMMENT ON TEXT SEARCH TEMPLATE "pg_catalog"."ispell" IS 'ispell dictionary';



CREATE TEXT SEARCH TEMPLATE "pg_catalog"."simple" (
    INIT = "dsimple_init",
    LEXIZE = "dsimple_lexize" );



COMMENT ON TEXT SEARCH TEMPLATE "pg_catalog"."simple" IS 'simple dictionary: just lower case and check for stopword';



CREATE TEXT SEARCH TEMPLATE "pg_catalog"."snowball" (
    INIT = "dsnowball_init",
    LEXIZE = "dsnowball_lexize" );



COMMENT ON TEXT SEARCH TEMPLATE "pg_catalog"."snowball" IS 'snowball stemmer';



CREATE TEXT SEARCH TEMPLATE "pg_catalog"."synonym" (
    INIT = "dsynonym_init",
    LEXIZE = "dsynonym_lexize" );



COMMENT ON TEXT SEARCH TEMPLATE "pg_catalog"."synonym" IS 'synonym dictionary: replace word by its synonym';



CREATE TEXT SEARCH TEMPLATE "pg_catalog"."thesaurus" (
    INIT = "thesaurus_init",
    LEXIZE = "thesaurus_lexize" );



COMMENT ON TEXT SEARCH TEMPLATE "pg_catalog"."thesaurus" IS 'thesaurus dictionary: phrase by phrase substitution';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."arabic_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'arabic' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."arabic_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."arabic_stem" IS 'snowball stemmer for arabic language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."armenian_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'armenian' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."armenian_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."armenian_stem" IS 'snowball stemmer for armenian language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."basque_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'basque' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."basque_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."basque_stem" IS 'snowball stemmer for basque language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."catalan_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'catalan' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."catalan_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."catalan_stem" IS 'snowball stemmer for catalan language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."danish_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'danish', stopwords = 'danish' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."danish_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."danish_stem" IS 'snowball stemmer for danish language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."dutch_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'dutch', stopwords = 'dutch' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."dutch_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."dutch_stem" IS 'snowball stemmer for dutch language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."english_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'english', stopwords = 'english' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."english_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."english_stem" IS 'snowball stemmer for english language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."finnish_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'finnish', stopwords = 'finnish' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."finnish_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."finnish_stem" IS 'snowball stemmer for finnish language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."french_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'french', stopwords = 'french' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."french_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."french_stem" IS 'snowball stemmer for french language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."german_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'german', stopwords = 'german' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."german_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."german_stem" IS 'snowball stemmer for german language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."greek_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'greek' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."greek_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."greek_stem" IS 'snowball stemmer for greek language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."hindi_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'hindi' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."hindi_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."hindi_stem" IS 'snowball stemmer for hindi language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."hungarian_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'hungarian', stopwords = 'hungarian' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."hungarian_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."hungarian_stem" IS 'snowball stemmer for hungarian language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."indonesian_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'indonesian' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."indonesian_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."indonesian_stem" IS 'snowball stemmer for indonesian language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."irish_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'irish' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."irish_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."irish_stem" IS 'snowball stemmer for irish language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."italian_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'italian', stopwords = 'italian' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."italian_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."italian_stem" IS 'snowball stemmer for italian language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."lithuanian_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'lithuanian' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."lithuanian_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."lithuanian_stem" IS 'snowball stemmer for lithuanian language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."nepali_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'nepali', stopwords = 'nepali' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."nepali_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."nepali_stem" IS 'snowball stemmer for nepali language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."norwegian_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'norwegian', stopwords = 'norwegian' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."norwegian_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."norwegian_stem" IS 'snowball stemmer for norwegian language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."portuguese_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'portuguese', stopwords = 'portuguese' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."portuguese_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."portuguese_stem" IS 'snowball stemmer for portuguese language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."romanian_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'romanian' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."romanian_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."romanian_stem" IS 'snowball stemmer for romanian language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."russian_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'russian', stopwords = 'russian' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."russian_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."russian_stem" IS 'snowball stemmer for russian language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."serbian_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'serbian' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."serbian_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."serbian_stem" IS 'snowball stemmer for serbian language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."simple" (
    TEMPLATE = "pg_catalog"."simple" );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."simple" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."simple" IS 'simple dictionary: just lower case and check for stopword';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."spanish_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'spanish', stopwords = 'spanish' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."spanish_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."spanish_stem" IS 'snowball stemmer for spanish language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."swedish_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'swedish', stopwords = 'swedish' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."swedish_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."swedish_stem" IS 'snowball stemmer for swedish language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."tamil_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'tamil' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."tamil_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."tamil_stem" IS 'snowball stemmer for tamil language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."turkish_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'turkish', stopwords = 'turkish' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."turkish_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."turkish_stem" IS 'snowball stemmer for turkish language';



CREATE TEXT SEARCH DICTIONARY "pg_catalog"."yiddish_stem" (
    TEMPLATE = "pg_catalog"."snowball",
    language = 'yiddish' );


ALTER TEXT SEARCH DICTIONARY "pg_catalog"."yiddish_stem" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH DICTIONARY "pg_catalog"."yiddish_stem" IS 'snowball stemmer for yiddish language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."arabic" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "asciiword" WITH "arabic_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "word" WITH "arabic_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "hword_part" WITH "arabic_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "hword_asciipart" WITH "arabic_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "asciihword" WITH "arabic_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "hword" WITH "arabic_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."arabic" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."arabic" IS 'configuration for arabic language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."armenian" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "asciiword" WITH "armenian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "word" WITH "armenian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "hword_part" WITH "armenian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "hword_asciipart" WITH "armenian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "asciihword" WITH "armenian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "hword" WITH "armenian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."armenian" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."armenian" IS 'configuration for armenian language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."basque" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "asciiword" WITH "basque_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "word" WITH "basque_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "hword_part" WITH "basque_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "hword_asciipart" WITH "basque_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "asciihword" WITH "basque_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "hword" WITH "basque_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."basque" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."basque" IS 'configuration for basque language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."catalan" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "asciiword" WITH "catalan_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "word" WITH "catalan_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "hword_part" WITH "catalan_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "hword_asciipart" WITH "catalan_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "asciihword" WITH "catalan_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "hword" WITH "catalan_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."catalan" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."catalan" IS 'configuration for catalan language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."danish" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "asciiword" WITH "danish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "word" WITH "danish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "hword_part" WITH "danish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "hword_asciipart" WITH "danish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "asciihword" WITH "danish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "hword" WITH "danish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."danish" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."danish" IS 'configuration for danish language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."dutch" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "asciiword" WITH "dutch_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "word" WITH "dutch_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "hword_part" WITH "dutch_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "hword_asciipart" WITH "dutch_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "asciihword" WITH "dutch_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "hword" WITH "dutch_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."dutch" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."dutch" IS 'configuration for dutch language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."english" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "asciiword" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "word" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "hword_part" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "hword_asciipart" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "asciihword" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "hword" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."english" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."english" IS 'configuration for english language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."finnish" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "asciiword" WITH "finnish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "word" WITH "finnish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "hword_part" WITH "finnish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "hword_asciipart" WITH "finnish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "asciihword" WITH "finnish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "hword" WITH "finnish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."finnish" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."finnish" IS 'configuration for finnish language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."french" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "asciiword" WITH "french_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "word" WITH "french_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "hword_part" WITH "french_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "hword_asciipart" WITH "french_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "asciihword" WITH "french_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "hword" WITH "french_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."french" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."french" IS 'configuration for french language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."german" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "asciiword" WITH "german_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "word" WITH "german_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "hword_part" WITH "german_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "hword_asciipart" WITH "german_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "asciihword" WITH "german_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "hword" WITH "german_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."german" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."german" IS 'configuration for german language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."greek" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "asciiword" WITH "greek_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "word" WITH "greek_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "hword_part" WITH "greek_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "hword_asciipart" WITH "greek_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "asciihword" WITH "greek_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "hword" WITH "greek_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."greek" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."greek" IS 'configuration for greek language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."hindi" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "asciiword" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "word" WITH "hindi_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "hword_part" WITH "hindi_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "hword_asciipart" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "asciihword" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "hword" WITH "hindi_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hindi" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."hindi" IS 'configuration for hindi language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "asciiword" WITH "hungarian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "word" WITH "hungarian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "hword_part" WITH "hungarian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "hword_asciipart" WITH "hungarian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "asciihword" WITH "hungarian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "hword" WITH "hungarian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."hungarian" IS 'configuration for hungarian language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "asciiword" WITH "indonesian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "word" WITH "indonesian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "hword_part" WITH "indonesian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "hword_asciipart" WITH "indonesian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "asciihword" WITH "indonesian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "hword" WITH "indonesian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."indonesian" IS 'configuration for indonesian language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."irish" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "asciiword" WITH "irish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "word" WITH "irish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "hword_part" WITH "irish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "hword_asciipart" WITH "irish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "asciihword" WITH "irish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "hword" WITH "irish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."irish" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."irish" IS 'configuration for irish language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."italian" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "asciiword" WITH "italian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "word" WITH "italian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "hword_part" WITH "italian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "hword_asciipart" WITH "italian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "asciihword" WITH "italian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "hword" WITH "italian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."italian" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."italian" IS 'configuration for italian language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "asciiword" WITH "lithuanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "word" WITH "lithuanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "hword_part" WITH "lithuanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "hword_asciipart" WITH "lithuanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "asciihword" WITH "lithuanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "hword" WITH "lithuanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."lithuanian" IS 'configuration for lithuanian language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."nepali" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "asciiword" WITH "nepali_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "word" WITH "nepali_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "hword_part" WITH "nepali_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "hword_asciipart" WITH "nepali_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "asciihword" WITH "nepali_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "hword" WITH "nepali_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."nepali" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."nepali" IS 'configuration for nepali language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "asciiword" WITH "norwegian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "word" WITH "norwegian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "hword_part" WITH "norwegian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "hword_asciipart" WITH "norwegian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "asciihword" WITH "norwegian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "hword" WITH "norwegian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."norwegian" IS 'configuration for norwegian language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "asciiword" WITH "portuguese_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "word" WITH "portuguese_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "hword_part" WITH "portuguese_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "hword_asciipart" WITH "portuguese_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "asciihword" WITH "portuguese_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "hword" WITH "portuguese_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."portuguese" IS 'configuration for portuguese language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."romanian" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "asciiword" WITH "romanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "word" WITH "romanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "hword_part" WITH "romanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "hword_asciipart" WITH "romanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "asciihword" WITH "romanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "hword" WITH "romanian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."romanian" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."romanian" IS 'configuration for romanian language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."russian" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "asciiword" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "word" WITH "russian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "hword_part" WITH "russian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "hword_asciipart" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "asciihword" WITH "english_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "hword" WITH "russian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."russian" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."russian" IS 'configuration for russian language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."serbian" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "asciiword" WITH "serbian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "word" WITH "serbian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "hword_part" WITH "serbian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "hword_asciipart" WITH "serbian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "asciihword" WITH "serbian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "hword" WITH "serbian_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."serbian" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."serbian" IS 'configuration for serbian language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."simple" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "asciiword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "word" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "hword_part" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "hword_asciipart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "asciihword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "hword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."simple" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."simple" IS 'simple configuration';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."spanish" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "asciiword" WITH "spanish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "word" WITH "spanish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "hword_part" WITH "spanish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "hword_asciipart" WITH "spanish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "asciihword" WITH "spanish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "hword" WITH "spanish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."spanish" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."spanish" IS 'configuration for spanish language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."swedish" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "asciiword" WITH "swedish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "word" WITH "swedish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "hword_part" WITH "swedish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "hword_asciipart" WITH "swedish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "asciihword" WITH "swedish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "hword" WITH "swedish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."swedish" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."swedish" IS 'configuration for swedish language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."tamil" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "asciiword" WITH "tamil_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "word" WITH "tamil_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "hword_part" WITH "tamil_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "hword_asciipart" WITH "tamil_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "asciihword" WITH "tamil_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "hword" WITH "tamil_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."tamil" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."tamil" IS 'configuration for tamil language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."turkish" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "asciiword" WITH "turkish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "word" WITH "turkish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "hword_part" WITH "turkish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "hword_asciipart" WITH "turkish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "asciihword" WITH "turkish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "hword" WITH "turkish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."turkish" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."turkish" IS 'configuration for turkish language';



CREATE TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish" (
    PARSER = "pg_catalog"."default" );

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "asciiword" WITH "yiddish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "word" WITH "yiddish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "numword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "email" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "url" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "host" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "sfloat" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "version" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "hword_numpart" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "hword_part" WITH "yiddish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "hword_asciipart" WITH "yiddish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "numhword" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "asciihword" WITH "yiddish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "hword" WITH "yiddish_stem";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "url_path" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "file" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "float" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "int" WITH "simple";

ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish"
    ADD MAPPING FOR "uint" WITH "simple";


ALTER TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish" OWNER TO "supabase_admin";


COMMENT ON TEXT SEARCH CONFIGURATION "pg_catalog"."yiddish" IS 'configuration for yiddish language';


SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "auth"."audit_log_entries" (
    "instance_id" "uuid",
    "id" "uuid" NOT NULL,
    "payload" json,
    "created_at" timestamp with time zone,
    "ip_address" character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE "auth"."audit_log_entries" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."audit_log_entries" IS 'Auth: Audit trail for user actions.';



CREATE TABLE IF NOT EXISTS "auth"."flow_state" (
    "id" "uuid" NOT NULL,
    "user_id" "uuid",
    "auth_code" "text" NOT NULL,
    "code_challenge_method" "auth"."code_challenge_method" NOT NULL,
    "code_challenge" "text" NOT NULL,
    "provider_type" "text" NOT NULL,
    "provider_access_token" "text",
    "provider_refresh_token" "text",
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    "authentication_method" "text" NOT NULL,
    "auth_code_issued_at" timestamp with time zone
);


ALTER TABLE "auth"."flow_state" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."flow_state" IS 'stores metadata for pkce logins';



CREATE TABLE IF NOT EXISTS "auth"."identities" (
    "provider_id" "text" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "identity_data" "jsonb" NOT NULL,
    "provider" "text" NOT NULL,
    "last_sign_in_at" timestamp with time zone,
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    "email" "text" GENERATED ALWAYS AS ("lower"(("identity_data" ->> 'email'::"text"))) STORED,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);


ALTER TABLE "auth"."identities" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."identities" IS 'Auth: Stores identities associated to a user.';



COMMENT ON COLUMN "auth"."identities"."email" IS 'Auth: Email is a generated column that references the optional email property in the identity_data';



CREATE TABLE IF NOT EXISTS "auth"."instances" (
    "id" "uuid" NOT NULL,
    "uuid" "uuid",
    "raw_base_config" "text",
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone
);


ALTER TABLE "auth"."instances" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."instances" IS 'Auth: Manages users across multiple sites.';



CREATE TABLE IF NOT EXISTS "auth"."mfa_amr_claims" (
    "session_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone NOT NULL,
    "updated_at" timestamp with time zone NOT NULL,
    "authentication_method" "text" NOT NULL,
    "id" "uuid" NOT NULL
);


ALTER TABLE "auth"."mfa_amr_claims" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."mfa_amr_claims" IS 'auth: stores authenticator method reference claims for multi factor authentication';



CREATE TABLE IF NOT EXISTS "auth"."mfa_challenges" (
    "id" "uuid" NOT NULL,
    "factor_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone NOT NULL,
    "verified_at" timestamp with time zone,
    "ip_address" "inet" NOT NULL,
    "otp_code" "text",
    "web_authn_session_data" "jsonb"
);


ALTER TABLE "auth"."mfa_challenges" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."mfa_challenges" IS 'auth: stores metadata about challenge requests made';



CREATE TABLE IF NOT EXISTS "auth"."mfa_factors" (
    "id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "friendly_name" "text",
    "factor_type" "auth"."factor_type" NOT NULL,
    "status" "auth"."factor_status" NOT NULL,
    "created_at" timestamp with time zone NOT NULL,
    "updated_at" timestamp with time zone NOT NULL,
    "secret" "text",
    "phone" "text",
    "last_challenged_at" timestamp with time zone,
    "web_authn_credential" "jsonb",
    "web_authn_aaguid" "uuid"
);


ALTER TABLE "auth"."mfa_factors" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."mfa_factors" IS 'auth: stores metadata about factors';



CREATE TABLE IF NOT EXISTS "auth"."one_time_tokens" (
    "id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "token_type" "auth"."one_time_token_type" NOT NULL,
    "token_hash" "text" NOT NULL,
    "relates_to" "text" NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    CONSTRAINT "one_time_tokens_token_hash_check" CHECK (("char_length"("token_hash") > 0))
);


ALTER TABLE "auth"."one_time_tokens" OWNER TO "supabase_auth_admin";


CREATE TABLE IF NOT EXISTS "auth"."refresh_tokens" (
    "instance_id" "uuid",
    "id" bigint NOT NULL,
    "token" character varying(255),
    "user_id" character varying(255),
    "revoked" boolean,
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    "parent" character varying(255),
    "session_id" "uuid"
);


ALTER TABLE "auth"."refresh_tokens" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."refresh_tokens" IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';



CREATE SEQUENCE IF NOT EXISTS "auth"."refresh_tokens_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE "auth"."refresh_tokens_id_seq" OWNER TO "supabase_auth_admin";


ALTER SEQUENCE "auth"."refresh_tokens_id_seq" OWNED BY "auth"."refresh_tokens"."id";



CREATE TABLE IF NOT EXISTS "auth"."saml_providers" (
    "id" "uuid" NOT NULL,
    "sso_provider_id" "uuid" NOT NULL,
    "entity_id" "text" NOT NULL,
    "metadata_xml" "text" NOT NULL,
    "metadata_url" "text",
    "attribute_mapping" "jsonb",
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    "name_id_format" "text",
    CONSTRAINT "entity_id not empty" CHECK (("char_length"("entity_id") > 0)),
    CONSTRAINT "metadata_url not empty" CHECK ((("metadata_url" = NULL::"text") OR ("char_length"("metadata_url") > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK (("char_length"("metadata_xml") > 0))
);


ALTER TABLE "auth"."saml_providers" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."saml_providers" IS 'Auth: Manages SAML Identity Provider connections.';



CREATE TABLE IF NOT EXISTS "auth"."saml_relay_states" (
    "id" "uuid" NOT NULL,
    "sso_provider_id" "uuid" NOT NULL,
    "request_id" "text" NOT NULL,
    "for_email" "text",
    "redirect_to" "text",
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    "flow_state_id" "uuid",
    CONSTRAINT "request_id not empty" CHECK (("char_length"("request_id") > 0))
);


ALTER TABLE "auth"."saml_relay_states" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."saml_relay_states" IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';



CREATE TABLE IF NOT EXISTS "auth"."schema_migrations" (
    "version" character varying(255) NOT NULL
);


ALTER TABLE "auth"."schema_migrations" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."schema_migrations" IS 'Auth: Manages updates to the auth system.';



CREATE TABLE IF NOT EXISTS "auth"."sessions" (
    "id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    "factor_id" "uuid",
    "aal" "auth"."aal_level",
    "not_after" timestamp with time zone,
    "refreshed_at" timestamp without time zone,
    "user_agent" "text",
    "ip" "inet",
    "tag" "text"
);


ALTER TABLE "auth"."sessions" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."sessions" IS 'Auth: Stores session data associated to a user.';



COMMENT ON COLUMN "auth"."sessions"."not_after" IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';



CREATE TABLE IF NOT EXISTS "auth"."sso_domains" (
    "id" "uuid" NOT NULL,
    "sso_provider_id" "uuid" NOT NULL,
    "domain" "text" NOT NULL,
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK (("char_length"("domain") > 0))
);


ALTER TABLE "auth"."sso_domains" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."sso_domains" IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';



CREATE TABLE IF NOT EXISTS "auth"."sso_providers" (
    "id" "uuid" NOT NULL,
    "resource_id" "text",
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK ((("resource_id" = NULL::"text") OR ("char_length"("resource_id") > 0)))
);


ALTER TABLE "auth"."sso_providers" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."sso_providers" IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';



COMMENT ON COLUMN "auth"."sso_providers"."resource_id" IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';



CREATE TABLE IF NOT EXISTS "auth"."users" (
    "instance_id" "uuid",
    "id" "uuid" NOT NULL,
    "aud" character varying(255),
    "role" character varying(255),
    "email" character varying(255),
    "encrypted_password" character varying(255),
    "email_confirmed_at" timestamp with time zone,
    "invited_at" timestamp with time zone,
    "confirmation_token" character varying(255),
    "confirmation_sent_at" timestamp with time zone,
    "recovery_token" character varying(255),
    "recovery_sent_at" timestamp with time zone,
    "email_change_token_new" character varying(255),
    "email_change" character varying(255),
    "email_change_sent_at" timestamp with time zone,
    "last_sign_in_at" timestamp with time zone,
    "raw_app_meta_data" "jsonb",
    "raw_user_meta_data" "jsonb",
    "is_super_admin" boolean,
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    "phone" "text" DEFAULT NULL::character varying,
    "phone_confirmed_at" timestamp with time zone,
    "phone_change" "text" DEFAULT ''::character varying,
    "phone_change_token" character varying(255) DEFAULT ''::character varying,
    "phone_change_sent_at" timestamp with time zone,
    "confirmed_at" timestamp with time zone GENERATED ALWAYS AS (LEAST("email_confirmed_at", "phone_confirmed_at")) STORED,
    "email_change_token_current" character varying(255) DEFAULT ''::character varying,
    "email_change_confirm_status" smallint DEFAULT 0,
    "banned_until" timestamp with time zone,
    "reauthentication_token" character varying(255) DEFAULT ''::character varying,
    "reauthentication_sent_at" timestamp with time zone,
    "is_sso_user" boolean DEFAULT false NOT NULL,
    "deleted_at" timestamp with time zone,
    "is_anonymous" boolean DEFAULT false NOT NULL,
    CONSTRAINT "users_email_change_confirm_status_check" CHECK ((("email_change_confirm_status" >= 0) AND ("email_change_confirm_status" <= 2)))
);


ALTER TABLE "auth"."users" OWNER TO "supabase_auth_admin";


COMMENT ON TABLE "auth"."users" IS 'Auth: Stores user login data within a secure schema.';



COMMENT ON COLUMN "auth"."users"."is_sso_user" IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';



CREATE OR REPLACE VIEW "information_schema"."_pg_foreign_data_wrappers" AS
 SELECT "w"."oid",
    "w"."fdwowner",
    "w"."fdwoptions",
    ("current_database"())::"information_schema"."sql_identifier" AS "foreign_data_wrapper_catalog",
    ("w"."fdwname")::"information_schema"."sql_identifier" AS "foreign_data_wrapper_name",
    ("u"."rolname")::"information_schema"."sql_identifier" AS "authorization_identifier",
    ('c'::character varying)::"information_schema"."character_data" AS "foreign_data_wrapper_language"
   FROM "pg_foreign_data_wrapper" "w",
    "pg_authid" "u"
  WHERE (("u"."oid" = "w"."fdwowner") AND ("pg_has_role"("w"."fdwowner", 'USAGE'::"text") OR "has_foreign_data_wrapper_privilege"("w"."oid", 'USAGE'::"text")));


ALTER VIEW "information_schema"."_pg_foreign_data_wrappers" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."_pg_foreign_servers" AS
 SELECT "s"."oid",
    "s"."srvoptions",
    ("current_database"())::"information_schema"."sql_identifier" AS "foreign_server_catalog",
    ("s"."srvname")::"information_schema"."sql_identifier" AS "foreign_server_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "foreign_data_wrapper_catalog",
    ("w"."fdwname")::"information_schema"."sql_identifier" AS "foreign_data_wrapper_name",
    ("s"."srvtype")::"information_schema"."character_data" AS "foreign_server_type",
    ("s"."srvversion")::"information_schema"."character_data" AS "foreign_server_version",
    ("u"."rolname")::"information_schema"."sql_identifier" AS "authorization_identifier"
   FROM "pg_foreign_server" "s",
    "pg_foreign_data_wrapper" "w",
    "pg_authid" "u"
  WHERE (("w"."oid" = "s"."srvfdw") AND ("u"."oid" = "s"."srvowner") AND ("pg_has_role"("s"."srvowner", 'USAGE'::"text") OR "has_server_privilege"("s"."oid", 'USAGE'::"text")));


ALTER VIEW "information_schema"."_pg_foreign_servers" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."_pg_foreign_table_columns" AS
 SELECT "n"."nspname",
    "c"."relname",
    "a"."attname",
    "a"."attfdwoptions"
   FROM "pg_foreign_table" "t",
    "pg_authid" "u",
    "pg_namespace" "n",
    "pg_class" "c",
    "pg_attribute" "a"
  WHERE (("u"."oid" = "c"."relowner") AND ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_column_privilege"("c"."oid", "a"."attnum", 'SELECT, INSERT, UPDATE, REFERENCES'::"text")) AND ("n"."oid" = "c"."relnamespace") AND ("c"."oid" = "t"."ftrelid") AND ("c"."relkind" = 'f'::"char") AND ("a"."attrelid" = "c"."oid") AND ("a"."attnum" > 0));


ALTER VIEW "information_schema"."_pg_foreign_table_columns" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."_pg_foreign_tables" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "foreign_table_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "foreign_table_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "foreign_table_name",
    "t"."ftoptions",
    ("current_database"())::"information_schema"."sql_identifier" AS "foreign_server_catalog",
    ("s"."srvname")::"information_schema"."sql_identifier" AS "foreign_server_name",
    ("u"."rolname")::"information_schema"."sql_identifier" AS "authorization_identifier"
   FROM "pg_foreign_table" "t",
    "pg_foreign_server" "s",
    "pg_foreign_data_wrapper" "w",
    "pg_authid" "u",
    "pg_namespace" "n",
    "pg_class" "c"
  WHERE (("w"."oid" = "s"."srvfdw") AND ("u"."oid" = "c"."relowner") AND ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_table_privilege"("c"."oid", 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::"text") OR "has_any_column_privilege"("c"."oid", 'SELECT, INSERT, UPDATE, REFERENCES'::"text")) AND ("n"."oid" = "c"."relnamespace") AND ("c"."oid" = "t"."ftrelid") AND ("c"."relkind" = 'f'::"char") AND ("s"."oid" = "t"."ftserver"));


ALTER VIEW "information_schema"."_pg_foreign_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."_pg_user_mappings" AS
 SELECT "um"."oid",
    "um"."umoptions",
    "um"."umuser",
    (COALESCE("u"."rolname", 'PUBLIC'::"name"))::"information_schema"."sql_identifier" AS "authorization_identifier",
    "s"."foreign_server_catalog",
    "s"."foreign_server_name",
    "s"."authorization_identifier" AS "srvowner"
   FROM ("pg_user_mapping" "um"
     LEFT JOIN "pg_authid" "u" ON (("u"."oid" = "um"."umuser"))),
    "information_schema"."_pg_foreign_servers" "s"
  WHERE ("s"."oid" = "um"."umserver");


ALTER VIEW "information_schema"."_pg_user_mappings" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."applicable_roles" AS
 SELECT ("a"."rolname")::"information_schema"."sql_identifier" AS "grantee",
    ("b"."rolname")::"information_schema"."sql_identifier" AS "role_name",
    (
        CASE
            WHEN "m"."admin_option" THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_grantable"
   FROM ((( SELECT "pg_auth_members"."member",
            "pg_auth_members"."roleid",
            "pg_auth_members"."admin_option"
           FROM "pg_auth_members"
        UNION
         SELECT "pg_database"."datdba",
            "pg_authid"."oid",
            false
           FROM "pg_database",
            "pg_authid"
          WHERE (("pg_database"."datname" = "current_database"()) AND ("pg_authid"."rolname" = 'pg_database_owner'::"name"))) "m"
     JOIN "pg_authid" "a" ON (("m"."member" = "a"."oid")))
     JOIN "pg_authid" "b" ON (("m"."roleid" = "b"."oid")))
  WHERE "pg_has_role"("a"."oid", 'USAGE'::"text");


ALTER VIEW "information_schema"."applicable_roles" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."administrable_role_authorizations" AS
 SELECT "grantee",
    "role_name",
    "is_grantable"
   FROM "information_schema"."applicable_roles"
  WHERE (("is_grantable")::"text" = 'YES'::"text");


ALTER VIEW "information_schema"."administrable_role_authorizations" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."attributes" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "udt_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "udt_name",
    ("a"."attname")::"information_schema"."sql_identifier" AS "attribute_name",
    ("a"."attnum")::"information_schema"."cardinal_number" AS "ordinal_position",
    ("pg_get_expr"("ad"."adbin", "ad"."adrelid"))::"information_schema"."character_data" AS "attribute_default",
    (
        CASE
            WHEN ("a"."attnotnull" OR (("t"."typtype" = 'd'::"char") AND "t"."typnotnull")) THEN 'NO'::"text"
            ELSE 'YES'::"text"
        END)::"information_schema"."yes_or_no" AS "is_nullable",
    (
        CASE
            WHEN (("t"."typelem" <> (0)::"oid") AND ("t"."typlen" = '-1'::integer)) THEN 'ARRAY'::"text"
            WHEN ("nt"."nspname" = 'pg_catalog'::"name") THEN "format_type"("a"."atttypid", NULL::integer)
            ELSE 'USER-DEFINED'::"text"
        END)::"information_schema"."character_data" AS "data_type",
    ("information_schema"."_pg_char_max_length"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "character_maximum_length",
    ("information_schema"."_pg_char_octet_length"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "character_octet_length",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_name",
    (
        CASE
            WHEN ("nco"."nspname" IS NOT NULL) THEN "current_database"()
            ELSE NULL::"name"
        END)::"information_schema"."sql_identifier" AS "collation_catalog",
    ("nco"."nspname")::"information_schema"."sql_identifier" AS "collation_schema",
    ("co"."collname")::"information_schema"."sql_identifier" AS "collation_name",
    ("information_schema"."_pg_numeric_precision"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "numeric_precision",
    ("information_schema"."_pg_numeric_precision_radix"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "numeric_precision_radix",
    ("information_schema"."_pg_numeric_scale"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "numeric_scale",
    ("information_schema"."_pg_datetime_precision"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "datetime_precision",
    ("information_schema"."_pg_interval_type"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."character_data" AS "interval_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "interval_precision",
    ("current_database"())::"information_schema"."sql_identifier" AS "attribute_udt_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "attribute_udt_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "attribute_udt_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "maximum_cardinality",
    ("a"."attnum")::"information_schema"."sql_identifier" AS "dtd_identifier",
    ('NO'::character varying)::"information_schema"."yes_or_no" AS "is_derived_reference_attribute"
   FROM (((("pg_attribute" "a"
     LEFT JOIN "pg_attrdef" "ad" ON ((("a"."attrelid" = "ad"."adrelid") AND ("a"."attnum" = "ad"."adnum"))))
     JOIN ("pg_class" "c"
     JOIN "pg_namespace" "nc" ON (("c"."relnamespace" = "nc"."oid"))) ON (("a"."attrelid" = "c"."oid")))
     JOIN ("pg_type" "t"
     JOIN "pg_namespace" "nt" ON (("t"."typnamespace" = "nt"."oid"))) ON (("a"."atttypid" = "t"."oid")))
     LEFT JOIN ("pg_collation" "co"
     JOIN "pg_namespace" "nco" ON (("co"."collnamespace" = "nco"."oid"))) ON ((("a"."attcollation" = "co"."oid") AND (("nco"."nspname" <> 'pg_catalog'::"name") OR ("co"."collname" <> 'default'::"name")))))
  WHERE (("a"."attnum" > 0) AND (NOT "a"."attisdropped") AND ("c"."relkind" = 'c'::"char") AND ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_type_privilege"("c"."reltype", 'USAGE'::"text")));


ALTER VIEW "information_schema"."attributes" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."character_sets" AS
 SELECT (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_schema",
    ("getdatabaseencoding"())::"information_schema"."sql_identifier" AS "character_set_name",
    (
        CASE
            WHEN ("getdatabaseencoding"() = 'UTF8'::"name") THEN 'UCS'::"name"
            ELSE "getdatabaseencoding"()
        END)::"information_schema"."sql_identifier" AS "character_repertoire",
    ("getdatabaseencoding"())::"information_schema"."sql_identifier" AS "form_of_use",
    ("current_database"())::"information_schema"."sql_identifier" AS "default_collate_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "default_collate_schema",
    ("c"."collname")::"information_schema"."sql_identifier" AS "default_collate_name"
   FROM ("pg_database" "d"
     LEFT JOIN ("pg_collation" "c"
     JOIN "pg_namespace" "nc" ON (("c"."collnamespace" = "nc"."oid"))) ON ((("d"."datcollate" = "c"."collcollate") AND ("d"."datctype" = "c"."collctype"))))
  WHERE ("d"."datname" = "current_database"())
  ORDER BY ("char_length"(("c"."collname")::"text")) DESC, "c"."collname"
 LIMIT 1;


ALTER VIEW "information_schema"."character_sets" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."check_constraint_routine_usage" AS
 SELECT DISTINCT ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ("c"."conname")::"information_schema"."sql_identifier" AS "constraint_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name"
   FROM "pg_namespace" "nc",
    "pg_constraint" "c",
    "pg_depend" "d",
    "pg_proc" "p",
    "pg_namespace" "np"
  WHERE (("nc"."oid" = "c"."connamespace") AND ("c"."contype" = 'c'::"char") AND ("c"."oid" = "d"."objid") AND ("d"."classid" = ('"pg_constraint"'::"regclass")::"oid") AND ("d"."refobjid" = "p"."oid") AND ("d"."refclassid" = ('"pg_proc"'::"regclass")::"oid") AND ("p"."pronamespace" = "np"."oid") AND "pg_has_role"("p"."proowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."check_constraint_routine_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."check_constraints" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("rs"."nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ("con"."conname")::"information_schema"."sql_identifier" AS "constraint_name",
    ("pg_get_expr"("con"."conbin", COALESCE("c"."oid", (0)::"oid")))::"information_schema"."character_data" AS "check_clause"
   FROM ((("pg_constraint" "con"
     LEFT JOIN "pg_namespace" "rs" ON (("rs"."oid" = "con"."connamespace")))
     LEFT JOIN "pg_class" "c" ON (("c"."oid" = "con"."conrelid")))
     LEFT JOIN "pg_type" "t" ON (("t"."oid" = "con"."contypid")))
  WHERE ("pg_has_role"(COALESCE("c"."relowner", "t"."typowner"), 'USAGE'::"text") AND ("con"."contype" = 'c'::"char"))
UNION
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("rs"."nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ("con"."conname")::"information_schema"."sql_identifier" AS "constraint_name",
    ("format"('%s IS NOT NULL'::"text", COALESCE("at"."attname", 'VALUE'::"name")))::"information_schema"."character_data" AS "check_clause"
   FROM (((("pg_constraint" "con"
     LEFT JOIN "pg_namespace" "rs" ON (("rs"."oid" = "con"."connamespace")))
     LEFT JOIN "pg_class" "c" ON (("c"."oid" = "con"."conrelid")))
     LEFT JOIN "pg_type" "t" ON (("t"."oid" = "con"."contypid")))
     LEFT JOIN "pg_attribute" "at" ON ((("con"."conrelid" = "at"."attrelid") AND ("con"."conkey"[1] = "at"."attnum"))))
  WHERE ("pg_has_role"(COALESCE("c"."relowner", "t"."typowner"), 'USAGE'::"text") AND ("con"."contype" = 'n'::"char"))
UNION
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ((((((("n"."oid")::"text" || '_'::"text") || ("r"."oid")::"text") || '_'::"text") || ("a"."attnum")::"text") || '_not_null'::"text"))::"information_schema"."sql_identifier" AS "constraint_name",
    ((("a"."attname")::"text" || ' IS NOT NULL'::"text"))::"information_schema"."character_data" AS "check_clause"
   FROM "pg_namespace" "n",
    "pg_class" "r",
    "pg_attribute" "a"
  WHERE (("n"."oid" = "r"."relnamespace") AND ("r"."oid" = "a"."attrelid") AND ("a"."attnum" > 0) AND (NOT "a"."attisdropped") AND "a"."attnotnull" AND ("r"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) AND "pg_has_role"("r"."relowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."check_constraints" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."collation_character_set_applicability" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "collation_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "collation_schema",
    ("c"."collname")::"information_schema"."sql_identifier" AS "collation_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_schema",
    ("getdatabaseencoding"())::"information_schema"."sql_identifier" AS "character_set_name"
   FROM "pg_collation" "c",
    "pg_namespace" "nc"
  WHERE (("c"."collnamespace" = "nc"."oid") AND ("c"."collencoding" = ANY (ARRAY['-1'::integer, ( SELECT "pg_database"."encoding"
           FROM "pg_database"
          WHERE ("pg_database"."datname" = "current_database"()))])));


ALTER VIEW "information_schema"."collation_character_set_applicability" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."collations" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "collation_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "collation_schema",
    ("c"."collname")::"information_schema"."sql_identifier" AS "collation_name",
    ('NO PAD'::character varying)::"information_schema"."character_data" AS "pad_attribute"
   FROM "pg_collation" "c",
    "pg_namespace" "nc"
  WHERE (("c"."collnamespace" = "nc"."oid") AND ("c"."collencoding" = ANY (ARRAY['-1'::integer, ( SELECT "pg_database"."encoding"
           FROM "pg_database"
          WHERE ("pg_database"."datname" = "current_database"()))])));


ALTER VIEW "information_schema"."collations" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."column_column_usage" AS
 SELECT DISTINCT ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("ac"."attname")::"information_schema"."sql_identifier" AS "column_name",
    ("ad"."attname")::"information_schema"."sql_identifier" AS "dependent_column"
   FROM "pg_namespace" "n",
    "pg_class" "c",
    "pg_depend" "d",
    "pg_attribute" "ac",
    "pg_attribute" "ad",
    "pg_attrdef" "atd"
  WHERE (("n"."oid" = "c"."relnamespace") AND ("c"."oid" = "ac"."attrelid") AND ("c"."oid" = "ad"."attrelid") AND ("ac"."attnum" <> "ad"."attnum") AND ("ad"."attrelid" = "atd"."adrelid") AND ("ad"."attnum" = "atd"."adnum") AND ("d"."classid" = ('"pg_attrdef"'::"regclass")::"oid") AND ("d"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("d"."objid" = "atd"."oid") AND ("d"."refobjid" = "ac"."attrelid") AND ("d"."refobjsubid" = "ac"."attnum") AND ("ad"."attgenerated" <> ''::"char") AND "pg_has_role"("c"."relowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."column_column_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."column_domain_usage" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "domain_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "domain_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "domain_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("a"."attname")::"information_schema"."sql_identifier" AS "column_name"
   FROM "pg_type" "t",
    "pg_namespace" "nt",
    "pg_class" "c",
    "pg_namespace" "nc",
    "pg_attribute" "a"
  WHERE (("t"."typnamespace" = "nt"."oid") AND ("c"."relnamespace" = "nc"."oid") AND ("a"."attrelid" = "c"."oid") AND ("a"."atttypid" = "t"."oid") AND ("t"."typtype" = 'd'::"char") AND ("c"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND ("a"."attnum" > 0) AND (NOT "a"."attisdropped") AND "pg_has_role"("t"."typowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."column_domain_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."column_options" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("relname")::"information_schema"."sql_identifier" AS "table_name",
    ("attname")::"information_schema"."sql_identifier" AS "column_name",
    (("pg_options_to_table"("attfdwoptions"))."option_name")::"information_schema"."sql_identifier" AS "option_name",
    (("pg_options_to_table"("attfdwoptions"))."option_value")::"information_schema"."character_data" AS "option_value"
   FROM "information_schema"."_pg_foreign_table_columns" "c";


ALTER VIEW "information_schema"."column_options" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."column_privileges" AS
 SELECT ("u_grantor"."rolname")::"information_schema"."sql_identifier" AS "grantor",
    ("grantee"."rolname")::"information_schema"."sql_identifier" AS "grantee",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("x"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("x"."attname")::"information_schema"."sql_identifier" AS "column_name",
    ("x"."prtype")::"information_schema"."character_data" AS "privilege_type",
    (
        CASE
            WHEN ("pg_has_role"("x"."grantee", "x"."relowner", 'USAGE'::"text") OR "x"."grantable") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_grantable"
   FROM ( SELECT "pr_c"."grantor",
            "pr_c"."grantee",
            "a"."attname",
            "pr_c"."relname",
            "pr_c"."relnamespace",
            "pr_c"."prtype",
            "pr_c"."grantable",
            "pr_c"."relowner"
           FROM ( SELECT "pg_class"."oid",
                    "pg_class"."relname",
                    "pg_class"."relnamespace",
                    "pg_class"."relowner",
                    ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."grantor" AS "grantor",
                    ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."grantee" AS "grantee",
                    ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."privilege_type" AS "privilege_type",
                    ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."is_grantable" AS "is_grantable"
                   FROM "pg_class"
                  WHERE ("pg_class"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"]))) "pr_c"("oid", "relname", "relnamespace", "relowner", "grantor", "grantee", "prtype", "grantable"),
            "pg_attribute" "a"
          WHERE (("a"."attrelid" = "pr_c"."oid") AND ("a"."attnum" > 0) AND (NOT "a"."attisdropped"))
        UNION
         SELECT "pr_a"."grantor",
            "pr_a"."grantee",
            "pr_a"."attname",
            "c"."relname",
            "c"."relnamespace",
            "pr_a"."prtype",
            "pr_a"."grantable",
            "c"."relowner"
           FROM ( SELECT "a"."attrelid",
                    "a"."attname",
                    ("aclexplode"(COALESCE("a"."attacl", "acldefault"('c'::"char", "cc"."relowner"))))."grantor" AS "grantor",
                    ("aclexplode"(COALESCE("a"."attacl", "acldefault"('c'::"char", "cc"."relowner"))))."grantee" AS "grantee",
                    ("aclexplode"(COALESCE("a"."attacl", "acldefault"('c'::"char", "cc"."relowner"))))."privilege_type" AS "privilege_type",
                    ("aclexplode"(COALESCE("a"."attacl", "acldefault"('c'::"char", "cc"."relowner"))))."is_grantable" AS "is_grantable"
                   FROM ("pg_attribute" "a"
                     JOIN "pg_class" "cc" ON (("a"."attrelid" = "cc"."oid")))
                  WHERE (("a"."attnum" > 0) AND (NOT "a"."attisdropped"))) "pr_a"("attrelid", "attname", "grantor", "grantee", "prtype", "grantable"),
            "pg_class" "c"
          WHERE (("pr_a"."attrelid" = "c"."oid") AND ("c"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])))) "x",
    "pg_namespace" "nc",
    "pg_authid" "u_grantor",
    ( SELECT "pg_authid"."oid",
            "pg_authid"."rolname"
           FROM "pg_authid"
        UNION ALL
         SELECT (0)::"oid" AS "oid",
            'PUBLIC'::"name") "grantee"("oid", "rolname")
  WHERE (("x"."relnamespace" = "nc"."oid") AND ("x"."grantee" = "grantee"."oid") AND ("x"."grantor" = "u_grantor"."oid") AND ("x"."prtype" = ANY (ARRAY['INSERT'::"text", 'SELECT'::"text", 'UPDATE'::"text", 'REFERENCES'::"text"])) AND ("pg_has_role"("u_grantor"."oid", 'USAGE'::"text") OR "pg_has_role"("grantee"."oid", 'USAGE'::"text") OR ("grantee"."rolname" = 'PUBLIC'::"name")));


ALTER VIEW "information_schema"."column_privileges" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."column_udt_usage" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    (COALESCE("nbt"."nspname", "nt"."nspname"))::"information_schema"."sql_identifier" AS "udt_schema",
    (COALESCE("bt"."typname", "t"."typname"))::"information_schema"."sql_identifier" AS "udt_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("a"."attname")::"information_schema"."sql_identifier" AS "column_name"
   FROM "pg_attribute" "a",
    "pg_class" "c",
    "pg_namespace" "nc",
    (("pg_type" "t"
     JOIN "pg_namespace" "nt" ON (("t"."typnamespace" = "nt"."oid")))
     LEFT JOIN ("pg_type" "bt"
     JOIN "pg_namespace" "nbt" ON (("bt"."typnamespace" = "nbt"."oid"))) ON ((("t"."typtype" = 'd'::"char") AND ("t"."typbasetype" = "bt"."oid"))))
  WHERE (("a"."attrelid" = "c"."oid") AND ("a"."atttypid" = "t"."oid") AND ("nc"."oid" = "c"."relnamespace") AND ("a"."attnum" > 0) AND (NOT "a"."attisdropped") AND ("c"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND "pg_has_role"(COALESCE("bt"."typowner", "t"."typowner"), 'USAGE'::"text"));


ALTER VIEW "information_schema"."column_udt_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."columns" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("a"."attname")::"information_schema"."sql_identifier" AS "column_name",
    ("a"."attnum")::"information_schema"."cardinal_number" AS "ordinal_position",
    (
        CASE
            WHEN ("a"."attgenerated" = ''::"char") THEN "pg_get_expr"("ad"."adbin", "ad"."adrelid")
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "column_default",
    (
        CASE
            WHEN ("a"."attnotnull" OR (("t"."typtype" = 'd'::"char") AND "t"."typnotnull")) THEN 'NO'::"text"
            ELSE 'YES'::"text"
        END)::"information_schema"."yes_or_no" AS "is_nullable",
    (
        CASE
            WHEN ("t"."typtype" = 'd'::"char") THEN
            CASE
                WHEN (("bt"."typelem" <> (0)::"oid") AND ("bt"."typlen" = '-1'::integer)) THEN 'ARRAY'::"text"
                WHEN ("nbt"."nspname" = 'pg_catalog'::"name") THEN "format_type"("t"."typbasetype", NULL::integer)
                ELSE 'USER-DEFINED'::"text"
            END
            ELSE
            CASE
                WHEN (("t"."typelem" <> (0)::"oid") AND ("t"."typlen" = '-1'::integer)) THEN 'ARRAY'::"text"
                WHEN ("nt"."nspname" = 'pg_catalog'::"name") THEN "format_type"("a"."atttypid", NULL::integer)
                ELSE 'USER-DEFINED'::"text"
            END
        END)::"information_schema"."character_data" AS "data_type",
    ("information_schema"."_pg_char_max_length"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "character_maximum_length",
    ("information_schema"."_pg_char_octet_length"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "character_octet_length",
    ("information_schema"."_pg_numeric_precision"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "numeric_precision",
    ("information_schema"."_pg_numeric_precision_radix"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "numeric_precision_radix",
    ("information_schema"."_pg_numeric_scale"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "numeric_scale",
    ("information_schema"."_pg_datetime_precision"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."cardinal_number" AS "datetime_precision",
    ("information_schema"."_pg_interval_type"("information_schema"."_pg_truetypid"("a".*, "t".*), "information_schema"."_pg_truetypmod"("a".*, "t".*)))::"information_schema"."character_data" AS "interval_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "interval_precision",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_name",
    (
        CASE
            WHEN ("nco"."nspname" IS NOT NULL) THEN "current_database"()
            ELSE NULL::"name"
        END)::"information_schema"."sql_identifier" AS "collation_catalog",
    ("nco"."nspname")::"information_schema"."sql_identifier" AS "collation_schema",
    ("co"."collname")::"information_schema"."sql_identifier" AS "collation_name",
    (
        CASE
            WHEN ("t"."typtype" = 'd'::"char") THEN "current_database"()
            ELSE NULL::"name"
        END)::"information_schema"."sql_identifier" AS "domain_catalog",
    (
        CASE
            WHEN ("t"."typtype" = 'd'::"char") THEN "nt"."nspname"
            ELSE NULL::"name"
        END)::"information_schema"."sql_identifier" AS "domain_schema",
    (
        CASE
            WHEN ("t"."typtype" = 'd'::"char") THEN "t"."typname"
            ELSE NULL::"name"
        END)::"information_schema"."sql_identifier" AS "domain_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    (COALESCE("nbt"."nspname", "nt"."nspname"))::"information_schema"."sql_identifier" AS "udt_schema",
    (COALESCE("bt"."typname", "t"."typname"))::"information_schema"."sql_identifier" AS "udt_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "maximum_cardinality",
    ("a"."attnum")::"information_schema"."sql_identifier" AS "dtd_identifier",
    ('NO'::character varying)::"information_schema"."yes_or_no" AS "is_self_referencing",
    (
        CASE
            WHEN ("a"."attidentity" = ANY (ARRAY['a'::"char", 'd'::"char"])) THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_identity",
    (
        CASE "a"."attidentity"
            WHEN 'a'::"char" THEN 'ALWAYS'::"text"
            WHEN 'd'::"char" THEN 'BY DEFAULT'::"text"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "identity_generation",
    ("seq"."seqstart")::"information_schema"."character_data" AS "identity_start",
    ("seq"."seqincrement")::"information_schema"."character_data" AS "identity_increment",
    ("seq"."seqmax")::"information_schema"."character_data" AS "identity_maximum",
    ("seq"."seqmin")::"information_schema"."character_data" AS "identity_minimum",
    (
        CASE
            WHEN "seq"."seqcycle" THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "identity_cycle",
    (
        CASE
            WHEN ("a"."attgenerated" <> ''::"char") THEN 'ALWAYS'::"text"
            ELSE 'NEVER'::"text"
        END)::"information_schema"."character_data" AS "is_generated",
    (
        CASE
            WHEN ("a"."attgenerated" <> ''::"char") THEN "pg_get_expr"("ad"."adbin", "ad"."adrelid")
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "generation_expression",
    (
        CASE
            WHEN (("c"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) OR (("c"."relkind" = ANY (ARRAY['v'::"char", 'f'::"char"])) AND "pg_column_is_updatable"(("c"."oid")::"regclass", "a"."attnum", false))) THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_updatable"
   FROM (((((("pg_attribute" "a"
     LEFT JOIN "pg_attrdef" "ad" ON ((("a"."attrelid" = "ad"."adrelid") AND ("a"."attnum" = "ad"."adnum"))))
     JOIN ("pg_class" "c"
     JOIN "pg_namespace" "nc" ON (("c"."relnamespace" = "nc"."oid"))) ON (("a"."attrelid" = "c"."oid")))
     JOIN ("pg_type" "t"
     JOIN "pg_namespace" "nt" ON (("t"."typnamespace" = "nt"."oid"))) ON (("a"."atttypid" = "t"."oid")))
     LEFT JOIN ("pg_type" "bt"
     JOIN "pg_namespace" "nbt" ON (("bt"."typnamespace" = "nbt"."oid"))) ON ((("t"."typtype" = 'd'::"char") AND ("t"."typbasetype" = "bt"."oid"))))
     LEFT JOIN ("pg_collation" "co"
     JOIN "pg_namespace" "nco" ON (("co"."collnamespace" = "nco"."oid"))) ON ((("a"."attcollation" = "co"."oid") AND (("nco"."nspname" <> 'pg_catalog'::"name") OR ("co"."collname" <> 'default'::"name")))))
     LEFT JOIN ("pg_depend" "dep"
     JOIN "pg_sequence" "seq" ON ((("dep"."classid" = ('"pg_class"'::"regclass")::"oid") AND ("dep"."objid" = "seq"."seqrelid") AND ("dep"."deptype" = 'i'::"char")))) ON ((("dep"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("dep"."refobjid" = "c"."oid") AND ("dep"."refobjsubid" = "a"."attnum"))))
  WHERE ((NOT "pg_is_other_temp_schema"("nc"."oid")) AND ("a"."attnum" > 0) AND (NOT "a"."attisdropped") AND ("c"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_column_privilege"("c"."oid", "a"."attnum", 'SELECT, INSERT, UPDATE, REFERENCES'::"text")));


ALTER VIEW "information_schema"."columns" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."constraint_column_usage" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("tblschema")::"information_schema"."sql_identifier" AS "table_schema",
    ("tblname")::"information_schema"."sql_identifier" AS "table_name",
    ("colname")::"information_schema"."sql_identifier" AS "column_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("cstrschema")::"information_schema"."sql_identifier" AS "constraint_schema",
    ("cstrname")::"information_schema"."sql_identifier" AS "constraint_name"
   FROM ( SELECT DISTINCT "nr"."nspname",
            "r"."relname",
            "r"."relowner",
            "a"."attname",
            "nc"."nspname",
            "c"."conname"
           FROM "pg_namespace" "nr",
            "pg_class" "r",
            "pg_attribute" "a",
            "pg_depend" "d",
            "pg_namespace" "nc",
            "pg_constraint" "c"
          WHERE (("nr"."oid" = "r"."relnamespace") AND ("r"."oid" = "a"."attrelid") AND ("d"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("d"."refobjid" = "r"."oid") AND ("d"."refobjsubid" = "a"."attnum") AND ("d"."classid" = ('"pg_constraint"'::"regclass")::"oid") AND ("d"."objid" = "c"."oid") AND ("c"."connamespace" = "nc"."oid") AND ("c"."contype" = 'c'::"char") AND ("r"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT "a"."attisdropped"))
        UNION ALL
         SELECT "nr"."nspname",
            "r"."relname",
            "r"."relowner",
            "a"."attname",
            "nc"."nspname",
            "c"."conname"
           FROM "pg_namespace" "nr",
            "pg_class" "r",
            "pg_attribute" "a",
            "pg_namespace" "nc",
            "pg_constraint" "c"
          WHERE (("nr"."oid" = "r"."relnamespace") AND ("r"."oid" = "a"."attrelid") AND ("nc"."oid" = "c"."connamespace") AND ("r"."oid" =
                CASE "c"."contype"
                    WHEN 'f'::"char" THEN "c"."confrelid"
                    ELSE "c"."conrelid"
                END) AND ("a"."attnum" = ANY (
                CASE "c"."contype"
                    WHEN 'f'::"char" THEN "c"."confkey"
                    ELSE "c"."conkey"
                END)) AND (NOT "a"."attisdropped") AND ("c"."contype" = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char"])) AND ("r"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])))) "x"("tblschema", "tblname", "tblowner", "colname", "cstrschema", "cstrname")
  WHERE "pg_has_role"("tblowner", 'USAGE'::"text");


ALTER VIEW "information_schema"."constraint_column_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."constraint_table_usage" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nr"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("r"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ("c"."conname")::"information_schema"."sql_identifier" AS "constraint_name"
   FROM "pg_constraint" "c",
    "pg_namespace" "nc",
    "pg_class" "r",
    "pg_namespace" "nr"
  WHERE (("c"."connamespace" = "nc"."oid") AND ("r"."relnamespace" = "nr"."oid") AND ((("c"."contype" = 'f'::"char") AND ("c"."confrelid" = "r"."oid")) OR (("c"."contype" = ANY (ARRAY['p'::"char", 'u'::"char"])) AND ("c"."conrelid" = "r"."oid"))) AND ("r"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) AND "pg_has_role"("r"."relowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."constraint_table_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."domains" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "domain_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "domain_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "domain_name",
    (
        CASE
            WHEN (("t"."typelem" <> (0)::"oid") AND ("t"."typlen" = '-1'::integer)) THEN 'ARRAY'::"text"
            WHEN ("nbt"."nspname" = 'pg_catalog'::"name") THEN "format_type"("t"."typbasetype", NULL::integer)
            ELSE 'USER-DEFINED'::"text"
        END)::"information_schema"."character_data" AS "data_type",
    ("information_schema"."_pg_char_max_length"("t"."typbasetype", "t"."typtypmod"))::"information_schema"."cardinal_number" AS "character_maximum_length",
    ("information_schema"."_pg_char_octet_length"("t"."typbasetype", "t"."typtypmod"))::"information_schema"."cardinal_number" AS "character_octet_length",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_name",
    (
        CASE
            WHEN ("nco"."nspname" IS NOT NULL) THEN "current_database"()
            ELSE NULL::"name"
        END)::"information_schema"."sql_identifier" AS "collation_catalog",
    ("nco"."nspname")::"information_schema"."sql_identifier" AS "collation_schema",
    ("co"."collname")::"information_schema"."sql_identifier" AS "collation_name",
    ("information_schema"."_pg_numeric_precision"("t"."typbasetype", "t"."typtypmod"))::"information_schema"."cardinal_number" AS "numeric_precision",
    ("information_schema"."_pg_numeric_precision_radix"("t"."typbasetype", "t"."typtypmod"))::"information_schema"."cardinal_number" AS "numeric_precision_radix",
    ("information_schema"."_pg_numeric_scale"("t"."typbasetype", "t"."typtypmod"))::"information_schema"."cardinal_number" AS "numeric_scale",
    ("information_schema"."_pg_datetime_precision"("t"."typbasetype", "t"."typtypmod"))::"information_schema"."cardinal_number" AS "datetime_precision",
    ("information_schema"."_pg_interval_type"("t"."typbasetype", "t"."typtypmod"))::"information_schema"."character_data" AS "interval_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "interval_precision",
    ("t"."typdefault")::"information_schema"."character_data" AS "domain_default",
    ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    ("nbt"."nspname")::"information_schema"."sql_identifier" AS "udt_schema",
    ("bt"."typname")::"information_schema"."sql_identifier" AS "udt_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "maximum_cardinality",
    (1)::"information_schema"."sql_identifier" AS "dtd_identifier"
   FROM ((("pg_type" "t"
     JOIN "pg_namespace" "nt" ON (("t"."typnamespace" = "nt"."oid")))
     JOIN ("pg_type" "bt"
     JOIN "pg_namespace" "nbt" ON (("bt"."typnamespace" = "nbt"."oid"))) ON ((("t"."typbasetype" = "bt"."oid") AND ("t"."typtype" = 'd'::"char"))))
     LEFT JOIN ("pg_collation" "co"
     JOIN "pg_namespace" "nco" ON (("co"."collnamespace" = "nco"."oid"))) ON ((("t"."typcollation" = "co"."oid") AND (("nco"."nspname" <> 'pg_catalog'::"name") OR ("co"."collname" <> 'default'::"name")))))
  WHERE ("pg_has_role"("t"."typowner", 'USAGE'::"text") OR "has_type_privilege"("t"."oid", 'USAGE'::"text"));


ALTER VIEW "information_schema"."domains" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."parameters" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("ss"."n_nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("ss"."proname", "ss"."p_oid"))::"information_schema"."sql_identifier" AS "specific_name",
    (("ss"."x")."n")::"information_schema"."cardinal_number" AS "ordinal_position",
    (
        CASE
            WHEN ("ss"."proargmodes" IS NULL) THEN 'IN'::"text"
            WHEN ("ss"."proargmodes"[("ss"."x")."n"] = 'i'::"char") THEN 'IN'::"text"
            WHEN ("ss"."proargmodes"[("ss"."x")."n"] = 'o'::"char") THEN 'OUT'::"text"
            WHEN ("ss"."proargmodes"[("ss"."x")."n"] = 'b'::"char") THEN 'INOUT'::"text"
            WHEN ("ss"."proargmodes"[("ss"."x")."n"] = 'v'::"char") THEN 'IN'::"text"
            WHEN ("ss"."proargmodes"[("ss"."x")."n"] = 't'::"char") THEN 'OUT'::"text"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "parameter_mode",
    ('NO'::character varying)::"information_schema"."yes_or_no" AS "is_result",
    ('NO'::character varying)::"information_schema"."yes_or_no" AS "as_locator",
    (NULLIF("ss"."proargnames"[("ss"."x")."n"], ''::"text"))::"information_schema"."sql_identifier" AS "parameter_name",
    (
        CASE
            WHEN (("t"."typelem" <> (0)::"oid") AND ("t"."typlen" = '-1'::integer)) THEN 'ARRAY'::"text"
            WHEN ("nt"."nspname" = 'pg_catalog'::"name") THEN "format_type"("t"."oid", NULL::integer)
            ELSE 'USER-DEFINED'::"text"
        END)::"information_schema"."character_data" AS "data_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "character_maximum_length",
    (NULL::integer)::"information_schema"."cardinal_number" AS "character_octet_length",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "collation_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "collation_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "collation_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_precision",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_precision_radix",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_scale",
    (NULL::integer)::"information_schema"."cardinal_number" AS "datetime_precision",
    (NULL::character varying)::"information_schema"."character_data" AS "interval_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "interval_precision",
    ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "udt_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "udt_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "maximum_cardinality",
    (("ss"."x")."n")::"information_schema"."sql_identifier" AS "dtd_identifier",
    (
        CASE
            WHEN "pg_has_role"("ss"."proowner", 'USAGE'::"text") THEN "pg_get_function_arg_default"("ss"."p_oid", ("ss"."x")."n")
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "parameter_default"
   FROM "pg_type" "t",
    "pg_namespace" "nt",
    ( SELECT "n"."nspname" AS "n_nspname",
            "p"."proname",
            "p"."oid" AS "p_oid",
            "p"."proowner",
            "p"."proargnames",
            "p"."proargmodes",
            "information_schema"."_pg_expandarray"(COALESCE("p"."proallargtypes", ("p"."proargtypes")::"oid"[])) AS "x"
           FROM "pg_namespace" "n",
            "pg_proc" "p"
          WHERE (("n"."oid" = "p"."pronamespace") AND ("pg_has_role"("p"."proowner", 'USAGE'::"text") OR "has_function_privilege"("p"."oid", 'EXECUTE'::"text")))) "ss"
  WHERE (("t"."oid" = ("ss"."x")."x") AND ("t"."typnamespace" = "nt"."oid"));


ALTER VIEW "information_schema"."parameters" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."routines" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "routine_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "routine_schema",
    ("p"."proname")::"information_schema"."sql_identifier" AS "routine_name",
    (
        CASE "p"."prokind"
            WHEN 'f'::"char" THEN 'FUNCTION'::"text"
            WHEN 'p'::"char" THEN 'PROCEDURE'::"text"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "routine_type",
    (NULL::"name")::"information_schema"."sql_identifier" AS "module_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "module_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "module_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "udt_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "udt_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "udt_name",
    (
        CASE
            WHEN ("p"."prokind" = 'p'::"char") THEN NULL::"text"
            WHEN (("t"."typelem" <> (0)::"oid") AND ("t"."typlen" = '-1'::integer)) THEN 'ARRAY'::"text"
            WHEN ("nt"."nspname" = 'pg_catalog'::"name") THEN "format_type"("t"."oid", NULL::integer)
            ELSE 'USER-DEFINED'::"text"
        END)::"information_schema"."character_data" AS "data_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "character_maximum_length",
    (NULL::integer)::"information_schema"."cardinal_number" AS "character_octet_length",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "collation_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "collation_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "collation_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_precision",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_precision_radix",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_scale",
    (NULL::integer)::"information_schema"."cardinal_number" AS "datetime_precision",
    (NULL::character varying)::"information_schema"."character_data" AS "interval_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "interval_precision",
    (
        CASE
            WHEN ("nt"."nspname" IS NOT NULL) THEN "current_database"()
            ELSE NULL::"name"
        END)::"information_schema"."sql_identifier" AS "type_udt_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "type_udt_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "type_udt_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "maximum_cardinality",
    (
        CASE
            WHEN ("p"."prokind" <> 'p'::"char") THEN 0
            ELSE NULL::integer
        END)::"information_schema"."sql_identifier" AS "dtd_identifier",
    (
        CASE
            WHEN ("l"."lanname" = 'sql'::"name") THEN 'SQL'::"text"
            ELSE 'EXTERNAL'::"text"
        END)::"information_schema"."character_data" AS "routine_body",
    (
        CASE
            WHEN "pg_has_role"("p"."proowner", 'USAGE'::"text") THEN "p"."prosrc"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "routine_definition",
    (
        CASE
            WHEN ("l"."lanname" = 'c'::"name") THEN "p"."prosrc"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "external_name",
    ("upper"(("l"."lanname")::"text"))::"information_schema"."character_data" AS "external_language",
    ('GENERAL'::character varying)::"information_schema"."character_data" AS "parameter_style",
    (
        CASE
            WHEN ("p"."provolatile" = 'i'::"char") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_deterministic",
    ('MODIFIES'::character varying)::"information_schema"."character_data" AS "sql_data_access",
    (
        CASE
            WHEN ("p"."prokind" <> 'p'::"char") THEN
            CASE
                WHEN "p"."proisstrict" THEN 'YES'::"text"
                ELSE 'NO'::"text"
            END
            ELSE NULL::"text"
        END)::"information_schema"."yes_or_no" AS "is_null_call",
    (NULL::character varying)::"information_schema"."character_data" AS "sql_path",
    ('YES'::character varying)::"information_schema"."yes_or_no" AS "schema_level_routine",
    (0)::"information_schema"."cardinal_number" AS "max_dynamic_result_sets",
    (NULL::character varying)::"information_schema"."yes_or_no" AS "is_user_defined_cast",
    (NULL::character varying)::"information_schema"."yes_or_no" AS "is_implicitly_invocable",
    (
        CASE
            WHEN "p"."prosecdef" THEN 'DEFINER'::"text"
            ELSE 'INVOKER'::"text"
        END)::"information_schema"."character_data" AS "security_type",
    (NULL::"name")::"information_schema"."sql_identifier" AS "to_sql_specific_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "to_sql_specific_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "to_sql_specific_name",
    ('NO'::character varying)::"information_schema"."yes_or_no" AS "as_locator",
    (NULL::timestamp with time zone)::"information_schema"."time_stamp" AS "created",
    (NULL::timestamp with time zone)::"information_schema"."time_stamp" AS "last_altered",
    (NULL::character varying)::"information_schema"."yes_or_no" AS "new_savepoint_level",
    ('NO'::character varying)::"information_schema"."yes_or_no" AS "is_udt_dependent",
    (NULL::character varying)::"information_schema"."character_data" AS "result_cast_from_data_type",
    (NULL::character varying)::"information_schema"."yes_or_no" AS "result_cast_as_locator",
    (NULL::integer)::"information_schema"."cardinal_number" AS "result_cast_char_max_length",
    (NULL::integer)::"information_schema"."cardinal_number" AS "result_cast_char_octet_length",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_char_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_char_set_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_char_set_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_collation_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_collation_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_collation_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "result_cast_numeric_precision",
    (NULL::integer)::"information_schema"."cardinal_number" AS "result_cast_numeric_precision_radix",
    (NULL::integer)::"information_schema"."cardinal_number" AS "result_cast_numeric_scale",
    (NULL::integer)::"information_schema"."cardinal_number" AS "result_cast_datetime_precision",
    (NULL::character varying)::"information_schema"."character_data" AS "result_cast_interval_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "result_cast_interval_precision",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_type_udt_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_type_udt_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_type_udt_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_scope_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_scope_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_scope_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "result_cast_maximum_cardinality",
    (NULL::"name")::"information_schema"."sql_identifier" AS "result_cast_dtd_identifier"
   FROM ((("pg_namespace" "n"
     JOIN "pg_proc" "p" ON (("n"."oid" = "p"."pronamespace")))
     JOIN "pg_language" "l" ON (("p"."prolang" = "l"."oid")))
     LEFT JOIN ("pg_type" "t"
     JOIN "pg_namespace" "nt" ON (("t"."typnamespace" = "nt"."oid"))) ON ((("p"."prorettype" = "t"."oid") AND ("p"."prokind" <> 'p'::"char"))))
  WHERE ("pg_has_role"("p"."proowner", 'USAGE'::"text") OR "has_function_privilege"("p"."oid", 'EXECUTE'::"text"));


ALTER VIEW "information_schema"."routines" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."data_type_privileges" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "object_catalog",
    "objschema" AS "object_schema",
    "objname" AS "object_name",
    ("objtype")::"information_schema"."character_data" AS "object_type",
    "objdtdid" AS "dtd_identifier"
   FROM ( SELECT "attributes"."udt_schema",
            "attributes"."udt_name",
            'USER-DEFINED TYPE'::"text" AS "text",
            "attributes"."dtd_identifier"
           FROM "information_schema"."attributes"
        UNION ALL
         SELECT "columns"."table_schema",
            "columns"."table_name",
            'TABLE'::"text" AS "text",
            "columns"."dtd_identifier"
           FROM "information_schema"."columns"
        UNION ALL
         SELECT "domains"."domain_schema",
            "domains"."domain_name",
            'DOMAIN'::"text" AS "text",
            "domains"."dtd_identifier"
           FROM "information_schema"."domains"
        UNION ALL
         SELECT "parameters"."specific_schema",
            "parameters"."specific_name",
            'ROUTINE'::"text" AS "text",
            "parameters"."dtd_identifier"
           FROM "information_schema"."parameters"
        UNION ALL
         SELECT "routines"."specific_schema",
            "routines"."specific_name",
            'ROUTINE'::"text" AS "text",
            "routines"."dtd_identifier"
           FROM "information_schema"."routines") "x"("objschema", "objname", "objtype", "objdtdid");


ALTER VIEW "information_schema"."data_type_privileges" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."domain_constraints" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("rs"."nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ("con"."conname")::"information_schema"."sql_identifier" AS "constraint_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "domain_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "domain_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "domain_name",
    (
        CASE
            WHEN "con"."condeferrable" THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_deferrable",
    (
        CASE
            WHEN "con"."condeferred" THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "initially_deferred"
   FROM "pg_namespace" "rs",
    "pg_namespace" "n",
    "pg_constraint" "con",
    "pg_type" "t"
  WHERE (("rs"."oid" = "con"."connamespace") AND ("n"."oid" = "t"."typnamespace") AND ("t"."oid" = "con"."contypid") AND ("pg_has_role"("t"."typowner", 'USAGE'::"text") OR "has_type_privilege"("t"."oid", 'USAGE'::"text")));


ALTER VIEW "information_schema"."domain_constraints" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."domain_udt_usage" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    ("nbt"."nspname")::"information_schema"."sql_identifier" AS "udt_schema",
    ("bt"."typname")::"information_schema"."sql_identifier" AS "udt_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "domain_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "domain_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "domain_name"
   FROM "pg_type" "t",
    "pg_namespace" "nt",
    "pg_type" "bt",
    "pg_namespace" "nbt"
  WHERE (("t"."typnamespace" = "nt"."oid") AND ("t"."typbasetype" = "bt"."oid") AND ("bt"."typnamespace" = "nbt"."oid") AND ("t"."typtype" = 'd'::"char") AND "pg_has_role"("bt"."typowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."domain_udt_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."element_types" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "object_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "object_schema",
    "x"."objname" AS "object_name",
    ("x"."objtype")::"information_schema"."character_data" AS "object_type",
    ("x"."objdtdid")::"information_schema"."sql_identifier" AS "collection_type_identifier",
    (
        CASE
            WHEN ("nbt"."nspname" = 'pg_catalog'::"name") THEN "format_type"("bt"."oid", NULL::integer)
            ELSE 'USER-DEFINED'::"text"
        END)::"information_schema"."character_data" AS "data_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "character_maximum_length",
    (NULL::integer)::"information_schema"."cardinal_number" AS "character_octet_length",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_name",
    (
        CASE
            WHEN ("nco"."nspname" IS NOT NULL) THEN "current_database"()
            ELSE NULL::"name"
        END)::"information_schema"."sql_identifier" AS "collation_catalog",
    ("nco"."nspname")::"information_schema"."sql_identifier" AS "collation_schema",
    ("co"."collname")::"information_schema"."sql_identifier" AS "collation_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_precision",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_precision_radix",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_scale",
    (NULL::integer)::"information_schema"."cardinal_number" AS "datetime_precision",
    (NULL::character varying)::"information_schema"."character_data" AS "interval_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "interval_precision",
    ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    ("nbt"."nspname")::"information_schema"."sql_identifier" AS "udt_schema",
    ("bt"."typname")::"information_schema"."sql_identifier" AS "udt_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "scope_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "maximum_cardinality",
    (('a'::"text" || ("x"."objdtdid")::"text"))::"information_schema"."sql_identifier" AS "dtd_identifier"
   FROM "pg_namespace" "n",
    "pg_type" "at",
    "pg_namespace" "nbt",
    "pg_type" "bt",
    (( SELECT "c"."relnamespace",
            ("c"."relname")::"information_schema"."sql_identifier" AS "relname",
                CASE
                    WHEN ("c"."relkind" = 'c'::"char") THEN 'USER-DEFINED TYPE'::"text"
                    ELSE 'TABLE'::"text"
                END AS "case",
            "a"."attnum",
            "a"."atttypid",
            "a"."attcollation"
           FROM "pg_class" "c",
            "pg_attribute" "a"
          WHERE (("c"."oid" = "a"."attrelid") AND ("c"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'c'::"char", 'p'::"char"])) AND ("a"."attnum" > 0) AND (NOT "a"."attisdropped"))
        UNION ALL
         SELECT "t"."typnamespace",
            ("t"."typname")::"information_schema"."sql_identifier" AS "typname",
            'DOMAIN'::"text" AS "text",
            1,
            "t"."typbasetype",
            "t"."typcollation"
           FROM "pg_type" "t"
          WHERE ("t"."typtype" = 'd'::"char")
        UNION ALL
         SELECT "ss"."pronamespace",
            ("nameconcatoid"("ss"."proname", "ss"."oid"))::"information_schema"."sql_identifier" AS "nameconcatoid",
            'ROUTINE'::"text" AS "text",
            ("ss"."x")."n" AS "n",
            ("ss"."x")."x" AS "x",
            0
           FROM ( SELECT "p"."pronamespace",
                    "p"."proname",
                    "p"."oid",
                    "information_schema"."_pg_expandarray"(COALESCE("p"."proallargtypes", ("p"."proargtypes")::"oid"[])) AS "x"
                   FROM "pg_proc" "p") "ss"
        UNION ALL
         SELECT "p"."pronamespace",
            ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "nameconcatoid",
            'ROUTINE'::"text" AS "text",
            0,
            "p"."prorettype",
            0
           FROM "pg_proc" "p") "x"("objschema", "objname", "objtype", "objdtdid", "objtypeid", "objcollation")
     LEFT JOIN ("pg_collation" "co"
     JOIN "pg_namespace" "nco" ON (("co"."collnamespace" = "nco"."oid"))) ON ((("x"."objcollation" = "co"."oid") AND (("nco"."nspname" <> 'pg_catalog'::"name") OR ("co"."collname" <> 'default'::"name")))))
  WHERE (("n"."oid" = "x"."objschema") AND ("at"."oid" = "x"."objtypeid") AND (("at"."typelem" <> (0)::"oid") AND ("at"."typlen" = '-1'::integer)) AND ("at"."typelem" = "bt"."oid") AND ("nbt"."oid" = "bt"."typnamespace") AND (("n"."nspname", ("x"."objname")::"name", "x"."objtype", (("x"."objdtdid")::"information_schema"."sql_identifier")::"name") IN ( SELECT "data_type_privileges"."object_schema",
            "data_type_privileges"."object_name",
            "data_type_privileges"."object_type",
            "data_type_privileges"."dtd_identifier"
           FROM "information_schema"."data_type_privileges")));


ALTER VIEW "information_schema"."element_types" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."enabled_roles" AS
 SELECT ("rolname")::"information_schema"."sql_identifier" AS "role_name"
   FROM "pg_authid" "a"
  WHERE "pg_has_role"("oid", 'USAGE'::"text");


ALTER VIEW "information_schema"."enabled_roles" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."foreign_data_wrapper_options" AS
 SELECT "foreign_data_wrapper_catalog",
    "foreign_data_wrapper_name",
    (("pg_options_to_table"("fdwoptions"))."option_name")::"information_schema"."sql_identifier" AS "option_name",
    (("pg_options_to_table"("fdwoptions"))."option_value")::"information_schema"."character_data" AS "option_value"
   FROM "information_schema"."_pg_foreign_data_wrappers" "w";


ALTER VIEW "information_schema"."foreign_data_wrapper_options" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."foreign_data_wrappers" AS
 SELECT "foreign_data_wrapper_catalog",
    "foreign_data_wrapper_name",
    "authorization_identifier",
    (NULL::character varying)::"information_schema"."character_data" AS "library_name",
    "foreign_data_wrapper_language"
   FROM "information_schema"."_pg_foreign_data_wrappers" "w";


ALTER VIEW "information_schema"."foreign_data_wrappers" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."foreign_server_options" AS
 SELECT "foreign_server_catalog",
    "foreign_server_name",
    (("pg_options_to_table"("srvoptions"))."option_name")::"information_schema"."sql_identifier" AS "option_name",
    (("pg_options_to_table"("srvoptions"))."option_value")::"information_schema"."character_data" AS "option_value"
   FROM "information_schema"."_pg_foreign_servers" "s";


ALTER VIEW "information_schema"."foreign_server_options" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."foreign_servers" AS
 SELECT "foreign_server_catalog",
    "foreign_server_name",
    "foreign_data_wrapper_catalog",
    "foreign_data_wrapper_name",
    "foreign_server_type",
    "foreign_server_version",
    "authorization_identifier"
   FROM "information_schema"."_pg_foreign_servers";


ALTER VIEW "information_schema"."foreign_servers" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."foreign_table_options" AS
 SELECT "foreign_table_catalog",
    "foreign_table_schema",
    "foreign_table_name",
    (("pg_options_to_table"("ftoptions"))."option_name")::"information_schema"."sql_identifier" AS "option_name",
    (("pg_options_to_table"("ftoptions"))."option_value")::"information_schema"."character_data" AS "option_value"
   FROM "information_schema"."_pg_foreign_tables" "t";


ALTER VIEW "information_schema"."foreign_table_options" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."foreign_tables" AS
 SELECT "foreign_table_catalog",
    "foreign_table_schema",
    "foreign_table_name",
    "foreign_server_catalog",
    "foreign_server_name"
   FROM "information_schema"."_pg_foreign_tables";


ALTER VIEW "information_schema"."foreign_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."information_schema_catalog_name" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "catalog_name";


ALTER VIEW "information_schema"."information_schema_catalog_name" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."key_column_usage" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("ss"."nc_nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ("ss"."conname")::"information_schema"."sql_identifier" AS "constraint_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("ss"."nr_nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("ss"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("a"."attname")::"information_schema"."sql_identifier" AS "column_name",
    (("ss"."x")."n")::"information_schema"."cardinal_number" AS "ordinal_position",
    (
        CASE
            WHEN ("ss"."contype" = 'f'::"char") THEN "information_schema"."_pg_index_position"("ss"."conindid", "ss"."confkey"[("ss"."x")."n"])
            ELSE NULL::integer
        END)::"information_schema"."cardinal_number" AS "position_in_unique_constraint"
   FROM "pg_attribute" "a",
    ( SELECT "r"."oid" AS "roid",
            "r"."relname",
            "r"."relowner",
            "nc"."nspname" AS "nc_nspname",
            "nr"."nspname" AS "nr_nspname",
            "c"."oid" AS "coid",
            "c"."conname",
            "c"."contype",
            "c"."conindid",
            "c"."confkey",
            "c"."confrelid",
            "information_schema"."_pg_expandarray"("c"."conkey") AS "x"
           FROM "pg_namespace" "nr",
            "pg_class" "r",
            "pg_namespace" "nc",
            "pg_constraint" "c"
          WHERE (("nr"."oid" = "r"."relnamespace") AND ("r"."oid" = "c"."conrelid") AND ("nc"."oid" = "c"."connamespace") AND ("c"."contype" = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char"])) AND ("r"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT "pg_is_other_temp_schema"("nr"."oid")))) "ss"
  WHERE (("ss"."roid" = "a"."attrelid") AND ("a"."attnum" = ("ss"."x")."x") AND (NOT "a"."attisdropped") AND ("pg_has_role"("ss"."relowner", 'USAGE'::"text") OR "has_column_privilege"("ss"."roid", "a"."attnum", 'SELECT, INSERT, UPDATE, REFERENCES'::"text")));


ALTER VIEW "information_schema"."key_column_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."referential_constraints" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("ncon"."nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ("con"."conname")::"information_schema"."sql_identifier" AS "constraint_name",
    (
        CASE
            WHEN ("npkc"."nspname" IS NULL) THEN NULL::"name"
            ELSE "current_database"()
        END)::"information_schema"."sql_identifier" AS "unique_constraint_catalog",
    ("npkc"."nspname")::"information_schema"."sql_identifier" AS "unique_constraint_schema",
    ("pkc"."conname")::"information_schema"."sql_identifier" AS "unique_constraint_name",
    (
        CASE "con"."confmatchtype"
            WHEN 'f'::"char" THEN 'FULL'::"text"
            WHEN 'p'::"char" THEN 'PARTIAL'::"text"
            WHEN 's'::"char" THEN 'NONE'::"text"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "match_option",
    (
        CASE "con"."confupdtype"
            WHEN 'c'::"char" THEN 'CASCADE'::"text"
            WHEN 'n'::"char" THEN 'SET NULL'::"text"
            WHEN 'd'::"char" THEN 'SET DEFAULT'::"text"
            WHEN 'r'::"char" THEN 'RESTRICT'::"text"
            WHEN 'a'::"char" THEN 'NO ACTION'::"text"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "update_rule",
    (
        CASE "con"."confdeltype"
            WHEN 'c'::"char" THEN 'CASCADE'::"text"
            WHEN 'n'::"char" THEN 'SET NULL'::"text"
            WHEN 'd'::"char" THEN 'SET DEFAULT'::"text"
            WHEN 'r'::"char" THEN 'RESTRICT'::"text"
            WHEN 'a'::"char" THEN 'NO ACTION'::"text"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "delete_rule"
   FROM (((((("pg_namespace" "ncon"
     JOIN "pg_constraint" "con" ON (("ncon"."oid" = "con"."connamespace")))
     JOIN "pg_class" "c" ON ((("con"."conrelid" = "c"."oid") AND ("con"."contype" = 'f'::"char"))))
     LEFT JOIN "pg_depend" "d1" ON ((("d1"."objid" = "con"."oid") AND ("d1"."classid" = ('"pg_constraint"'::"regclass")::"oid") AND ("d1"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("d1"."refobjsubid" = 0))))
     LEFT JOIN "pg_depend" "d2" ON ((("d2"."refclassid" = ('"pg_constraint"'::"regclass")::"oid") AND ("d2"."classid" = ('"pg_class"'::"regclass")::"oid") AND ("d2"."objid" = "d1"."refobjid") AND ("d2"."objsubid" = 0) AND ("d2"."deptype" = 'i'::"char"))))
     LEFT JOIN "pg_constraint" "pkc" ON ((("pkc"."oid" = "d2"."refobjid") AND ("pkc"."contype" = ANY (ARRAY['p'::"char", 'u'::"char"])) AND ("pkc"."conrelid" = "con"."confrelid"))))
     LEFT JOIN "pg_namespace" "npkc" ON (("pkc"."connamespace" = "npkc"."oid")))
  WHERE ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_table_privilege"("c"."oid", 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::"text") OR "has_any_column_privilege"("c"."oid", 'INSERT, UPDATE, REFERENCES'::"text"));


ALTER VIEW "information_schema"."referential_constraints" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."role_column_grants" AS
 SELECT "grantor",
    "grantee",
    "table_catalog",
    "table_schema",
    "table_name",
    "column_name",
    "privilege_type",
    "is_grantable"
   FROM "information_schema"."column_privileges"
  WHERE ((("grantor")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")) OR (("grantee")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")));


ALTER VIEW "information_schema"."role_column_grants" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."routine_privileges" AS
 SELECT ("u_grantor"."rolname")::"information_schema"."sql_identifier" AS "grantor",
    ("grantee"."rolname")::"information_schema"."sql_identifier" AS "grantee",
    ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "routine_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "routine_schema",
    ("p"."proname")::"information_schema"."sql_identifier" AS "routine_name",
    ('EXECUTE'::character varying)::"information_schema"."character_data" AS "privilege_type",
    (
        CASE
            WHEN ("pg_has_role"("grantee"."oid", "p"."proowner", 'USAGE'::"text") OR "p"."grantable") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_grantable"
   FROM ( SELECT "pg_proc"."oid",
            "pg_proc"."proname",
            "pg_proc"."proowner",
            "pg_proc"."pronamespace",
            ("aclexplode"(COALESCE("pg_proc"."proacl", "acldefault"('f'::"char", "pg_proc"."proowner"))))."grantor" AS "grantor",
            ("aclexplode"(COALESCE("pg_proc"."proacl", "acldefault"('f'::"char", "pg_proc"."proowner"))))."grantee" AS "grantee",
            ("aclexplode"(COALESCE("pg_proc"."proacl", "acldefault"('f'::"char", "pg_proc"."proowner"))))."privilege_type" AS "privilege_type",
            ("aclexplode"(COALESCE("pg_proc"."proacl", "acldefault"('f'::"char", "pg_proc"."proowner"))))."is_grantable" AS "is_grantable"
           FROM "pg_proc") "p"("oid", "proname", "proowner", "pronamespace", "grantor", "grantee", "prtype", "grantable"),
    "pg_namespace" "n",
    "pg_authid" "u_grantor",
    ( SELECT "pg_authid"."oid",
            "pg_authid"."rolname"
           FROM "pg_authid"
        UNION ALL
         SELECT (0)::"oid" AS "oid",
            'PUBLIC'::"name") "grantee"("oid", "rolname")
  WHERE (("p"."pronamespace" = "n"."oid") AND ("grantee"."oid" = "p"."grantee") AND ("u_grantor"."oid" = "p"."grantor") AND ("p"."prtype" = 'EXECUTE'::"text") AND ("pg_has_role"("u_grantor"."oid", 'USAGE'::"text") OR "pg_has_role"("grantee"."oid", 'USAGE'::"text") OR ("grantee"."rolname" = 'PUBLIC'::"name")));


ALTER VIEW "information_schema"."routine_privileges" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."role_routine_grants" AS
 SELECT "grantor",
    "grantee",
    "specific_catalog",
    "specific_schema",
    "specific_name",
    "routine_catalog",
    "routine_schema",
    "routine_name",
    "privilege_type",
    "is_grantable"
   FROM "information_schema"."routine_privileges"
  WHERE ((("grantor")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")) OR (("grantee")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")));


ALTER VIEW "information_schema"."role_routine_grants" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."table_privileges" AS
 SELECT ("u_grantor"."rolname")::"information_schema"."sql_identifier" AS "grantor",
    ("grantee"."rolname")::"information_schema"."sql_identifier" AS "grantee",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("c"."prtype")::"information_schema"."character_data" AS "privilege_type",
    (
        CASE
            WHEN ("pg_has_role"("grantee"."oid", "c"."relowner", 'USAGE'::"text") OR "c"."grantable") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_grantable",
    (
        CASE
            WHEN ("c"."prtype" = 'SELECT'::"text") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "with_hierarchy"
   FROM ( SELECT "pg_class"."oid",
            "pg_class"."relname",
            "pg_class"."relnamespace",
            "pg_class"."relkind",
            "pg_class"."relowner",
            ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."grantor" AS "grantor",
            ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."grantee" AS "grantee",
            ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."privilege_type" AS "privilege_type",
            ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."is_grantable" AS "is_grantable"
           FROM "pg_class") "c"("oid", "relname", "relnamespace", "relkind", "relowner", "grantor", "grantee", "prtype", "grantable"),
    "pg_namespace" "nc",
    "pg_authid" "u_grantor",
    ( SELECT "pg_authid"."oid",
            "pg_authid"."rolname"
           FROM "pg_authid"
        UNION ALL
         SELECT (0)::"oid" AS "oid",
            'PUBLIC'::"name") "grantee"("oid", "rolname")
  WHERE (("c"."relnamespace" = "nc"."oid") AND ("c"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND ("c"."grantee" = "grantee"."oid") AND ("c"."grantor" = "u_grantor"."oid") AND ("c"."prtype" = ANY (ARRAY['INSERT'::"text", 'SELECT'::"text", 'UPDATE'::"text", 'DELETE'::"text", 'TRUNCATE'::"text", 'REFERENCES'::"text", 'TRIGGER'::"text"])) AND ("pg_has_role"("u_grantor"."oid", 'USAGE'::"text") OR "pg_has_role"("grantee"."oid", 'USAGE'::"text") OR ("grantee"."rolname" = 'PUBLIC'::"name")));


ALTER VIEW "information_schema"."table_privileges" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."role_table_grants" AS
 SELECT "grantor",
    "grantee",
    "table_catalog",
    "table_schema",
    "table_name",
    "privilege_type",
    "is_grantable",
    "with_hierarchy"
   FROM "information_schema"."table_privileges"
  WHERE ((("grantor")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")) OR (("grantee")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")));


ALTER VIEW "information_schema"."role_table_grants" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."udt_privileges" AS
 SELECT ("u_grantor"."rolname")::"information_schema"."sql_identifier" AS "grantor",
    ("grantee"."rolname")::"information_schema"."sql_identifier" AS "grantee",
    ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "udt_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "udt_name",
    ('TYPE USAGE'::character varying)::"information_schema"."character_data" AS "privilege_type",
    (
        CASE
            WHEN ("pg_has_role"("grantee"."oid", "t"."typowner", 'USAGE'::"text") OR "t"."grantable") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_grantable"
   FROM ( SELECT "pg_type"."oid",
            "pg_type"."typname",
            "pg_type"."typnamespace",
            "pg_type"."typtype",
            "pg_type"."typowner",
            ("aclexplode"(COALESCE("pg_type"."typacl", "acldefault"('T'::"char", "pg_type"."typowner"))))."grantor" AS "grantor",
            ("aclexplode"(COALESCE("pg_type"."typacl", "acldefault"('T'::"char", "pg_type"."typowner"))))."grantee" AS "grantee",
            ("aclexplode"(COALESCE("pg_type"."typacl", "acldefault"('T'::"char", "pg_type"."typowner"))))."privilege_type" AS "privilege_type",
            ("aclexplode"(COALESCE("pg_type"."typacl", "acldefault"('T'::"char", "pg_type"."typowner"))))."is_grantable" AS "is_grantable"
           FROM "pg_type") "t"("oid", "typname", "typnamespace", "typtype", "typowner", "grantor", "grantee", "prtype", "grantable"),
    "pg_namespace" "n",
    "pg_authid" "u_grantor",
    ( SELECT "pg_authid"."oid",
            "pg_authid"."rolname"
           FROM "pg_authid"
        UNION ALL
         SELECT (0)::"oid" AS "oid",
            'PUBLIC'::"name") "grantee"("oid", "rolname")
  WHERE (("t"."typnamespace" = "n"."oid") AND ("t"."typtype" = 'c'::"char") AND ("t"."grantee" = "grantee"."oid") AND ("t"."grantor" = "u_grantor"."oid") AND ("t"."prtype" = 'USAGE'::"text") AND ("pg_has_role"("u_grantor"."oid", 'USAGE'::"text") OR "pg_has_role"("grantee"."oid", 'USAGE'::"text") OR ("grantee"."rolname" = 'PUBLIC'::"name")));


ALTER VIEW "information_schema"."udt_privileges" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."role_udt_grants" AS
 SELECT "grantor",
    "grantee",
    "udt_catalog",
    "udt_schema",
    "udt_name",
    "privilege_type",
    "is_grantable"
   FROM "information_schema"."udt_privileges"
  WHERE ((("grantor")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")) OR (("grantee")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")));


ALTER VIEW "information_schema"."role_udt_grants" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."usage_privileges" AS
 SELECT ("u"."rolname")::"information_schema"."sql_identifier" AS "grantor",
    ('PUBLIC'::"name")::"information_schema"."sql_identifier" AS "grantee",
    ("current_database"())::"information_schema"."sql_identifier" AS "object_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "object_schema",
    ("c"."collname")::"information_schema"."sql_identifier" AS "object_name",
    ('COLLATION'::character varying)::"information_schema"."character_data" AS "object_type",
    ('USAGE'::character varying)::"information_schema"."character_data" AS "privilege_type",
    ('NO'::character varying)::"information_schema"."yes_or_no" AS "is_grantable"
   FROM "pg_authid" "u",
    "pg_namespace" "n",
    "pg_collation" "c"
  WHERE (("u"."oid" = "c"."collowner") AND ("c"."collnamespace" = "n"."oid") AND ("c"."collencoding" = ANY (ARRAY['-1'::integer, ( SELECT "pg_database"."encoding"
           FROM "pg_database"
          WHERE ("pg_database"."datname" = "current_database"()))])))
UNION ALL
 SELECT ("u_grantor"."rolname")::"information_schema"."sql_identifier" AS "grantor",
    ("grantee"."rolname")::"information_schema"."sql_identifier" AS "grantee",
    ("current_database"())::"information_schema"."sql_identifier" AS "object_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "object_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "object_name",
    ('DOMAIN'::character varying)::"information_schema"."character_data" AS "object_type",
    ('USAGE'::character varying)::"information_schema"."character_data" AS "privilege_type",
    (
        CASE
            WHEN ("pg_has_role"("grantee"."oid", "t"."typowner", 'USAGE'::"text") OR "t"."grantable") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_grantable"
   FROM ( SELECT "pg_type"."oid",
            "pg_type"."typname",
            "pg_type"."typnamespace",
            "pg_type"."typtype",
            "pg_type"."typowner",
            ("aclexplode"(COALESCE("pg_type"."typacl", "acldefault"('T'::"char", "pg_type"."typowner"))))."grantor" AS "grantor",
            ("aclexplode"(COALESCE("pg_type"."typacl", "acldefault"('T'::"char", "pg_type"."typowner"))))."grantee" AS "grantee",
            ("aclexplode"(COALESCE("pg_type"."typacl", "acldefault"('T'::"char", "pg_type"."typowner"))))."privilege_type" AS "privilege_type",
            ("aclexplode"(COALESCE("pg_type"."typacl", "acldefault"('T'::"char", "pg_type"."typowner"))))."is_grantable" AS "is_grantable"
           FROM "pg_type") "t"("oid", "typname", "typnamespace", "typtype", "typowner", "grantor", "grantee", "prtype", "grantable"),
    "pg_namespace" "n",
    "pg_authid" "u_grantor",
    ( SELECT "pg_authid"."oid",
            "pg_authid"."rolname"
           FROM "pg_authid"
        UNION ALL
         SELECT (0)::"oid" AS "oid",
            'PUBLIC'::"name") "grantee"("oid", "rolname")
  WHERE (("t"."typnamespace" = "n"."oid") AND ("t"."typtype" = 'd'::"char") AND ("t"."grantee" = "grantee"."oid") AND ("t"."grantor" = "u_grantor"."oid") AND ("t"."prtype" = 'USAGE'::"text") AND ("pg_has_role"("u_grantor"."oid", 'USAGE'::"text") OR "pg_has_role"("grantee"."oid", 'USAGE'::"text") OR ("grantee"."rolname" = 'PUBLIC'::"name")))
UNION ALL
 SELECT ("u_grantor"."rolname")::"information_schema"."sql_identifier" AS "grantor",
    ("grantee"."rolname")::"information_schema"."sql_identifier" AS "grantee",
    ("current_database"())::"information_schema"."sql_identifier" AS "object_catalog",
    (''::"name")::"information_schema"."sql_identifier" AS "object_schema",
    ("fdw"."fdwname")::"information_schema"."sql_identifier" AS "object_name",
    ('FOREIGN DATA WRAPPER'::character varying)::"information_schema"."character_data" AS "object_type",
    ('USAGE'::character varying)::"information_schema"."character_data" AS "privilege_type",
    (
        CASE
            WHEN ("pg_has_role"("grantee"."oid", "fdw"."fdwowner", 'USAGE'::"text") OR "fdw"."grantable") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_grantable"
   FROM ( SELECT "pg_foreign_data_wrapper"."fdwname",
            "pg_foreign_data_wrapper"."fdwowner",
            ("aclexplode"(COALESCE("pg_foreign_data_wrapper"."fdwacl", "acldefault"('F'::"char", "pg_foreign_data_wrapper"."fdwowner"))))."grantor" AS "grantor",
            ("aclexplode"(COALESCE("pg_foreign_data_wrapper"."fdwacl", "acldefault"('F'::"char", "pg_foreign_data_wrapper"."fdwowner"))))."grantee" AS "grantee",
            ("aclexplode"(COALESCE("pg_foreign_data_wrapper"."fdwacl", "acldefault"('F'::"char", "pg_foreign_data_wrapper"."fdwowner"))))."privilege_type" AS "privilege_type",
            ("aclexplode"(COALESCE("pg_foreign_data_wrapper"."fdwacl", "acldefault"('F'::"char", "pg_foreign_data_wrapper"."fdwowner"))))."is_grantable" AS "is_grantable"
           FROM "pg_foreign_data_wrapper") "fdw"("fdwname", "fdwowner", "grantor", "grantee", "prtype", "grantable"),
    "pg_authid" "u_grantor",
    ( SELECT "pg_authid"."oid",
            "pg_authid"."rolname"
           FROM "pg_authid"
        UNION ALL
         SELECT (0)::"oid" AS "oid",
            'PUBLIC'::"name") "grantee"("oid", "rolname")
  WHERE (("u_grantor"."oid" = "fdw"."grantor") AND ("grantee"."oid" = "fdw"."grantee") AND ("fdw"."prtype" = 'USAGE'::"text") AND ("pg_has_role"("u_grantor"."oid", 'USAGE'::"text") OR "pg_has_role"("grantee"."oid", 'USAGE'::"text") OR ("grantee"."rolname" = 'PUBLIC'::"name")))
UNION ALL
 SELECT ("u_grantor"."rolname")::"information_schema"."sql_identifier" AS "grantor",
    ("grantee"."rolname")::"information_schema"."sql_identifier" AS "grantee",
    ("current_database"())::"information_schema"."sql_identifier" AS "object_catalog",
    (''::"name")::"information_schema"."sql_identifier" AS "object_schema",
    ("srv"."srvname")::"information_schema"."sql_identifier" AS "object_name",
    ('FOREIGN SERVER'::character varying)::"information_schema"."character_data" AS "object_type",
    ('USAGE'::character varying)::"information_schema"."character_data" AS "privilege_type",
    (
        CASE
            WHEN ("pg_has_role"("grantee"."oid", "srv"."srvowner", 'USAGE'::"text") OR "srv"."grantable") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_grantable"
   FROM ( SELECT "pg_foreign_server"."srvname",
            "pg_foreign_server"."srvowner",
            ("aclexplode"(COALESCE("pg_foreign_server"."srvacl", "acldefault"('S'::"char", "pg_foreign_server"."srvowner"))))."grantor" AS "grantor",
            ("aclexplode"(COALESCE("pg_foreign_server"."srvacl", "acldefault"('S'::"char", "pg_foreign_server"."srvowner"))))."grantee" AS "grantee",
            ("aclexplode"(COALESCE("pg_foreign_server"."srvacl", "acldefault"('S'::"char", "pg_foreign_server"."srvowner"))))."privilege_type" AS "privilege_type",
            ("aclexplode"(COALESCE("pg_foreign_server"."srvacl", "acldefault"('S'::"char", "pg_foreign_server"."srvowner"))))."is_grantable" AS "is_grantable"
           FROM "pg_foreign_server") "srv"("srvname", "srvowner", "grantor", "grantee", "prtype", "grantable"),
    "pg_authid" "u_grantor",
    ( SELECT "pg_authid"."oid",
            "pg_authid"."rolname"
           FROM "pg_authid"
        UNION ALL
         SELECT (0)::"oid" AS "oid",
            'PUBLIC'::"name") "grantee"("oid", "rolname")
  WHERE (("u_grantor"."oid" = "srv"."grantor") AND ("grantee"."oid" = "srv"."grantee") AND ("srv"."prtype" = 'USAGE'::"text") AND ("pg_has_role"("u_grantor"."oid", 'USAGE'::"text") OR "pg_has_role"("grantee"."oid", 'USAGE'::"text") OR ("grantee"."rolname" = 'PUBLIC'::"name")))
UNION ALL
 SELECT ("u_grantor"."rolname")::"information_schema"."sql_identifier" AS "grantor",
    ("grantee"."rolname")::"information_schema"."sql_identifier" AS "grantee",
    ("current_database"())::"information_schema"."sql_identifier" AS "object_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "object_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "object_name",
    ('SEQUENCE'::character varying)::"information_schema"."character_data" AS "object_type",
    ('USAGE'::character varying)::"information_schema"."character_data" AS "privilege_type",
    (
        CASE
            WHEN ("pg_has_role"("grantee"."oid", "c"."relowner", 'USAGE'::"text") OR "c"."grantable") THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_grantable"
   FROM ( SELECT "pg_class"."oid",
            "pg_class"."relname",
            "pg_class"."relnamespace",
            "pg_class"."relkind",
            "pg_class"."relowner",
            ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."grantor" AS "grantor",
            ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."grantee" AS "grantee",
            ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."privilege_type" AS "privilege_type",
            ("aclexplode"(COALESCE("pg_class"."relacl", "acldefault"('r'::"char", "pg_class"."relowner"))))."is_grantable" AS "is_grantable"
           FROM "pg_class") "c"("oid", "relname", "relnamespace", "relkind", "relowner", "grantor", "grantee", "prtype", "grantable"),
    "pg_namespace" "n",
    "pg_authid" "u_grantor",
    ( SELECT "pg_authid"."oid",
            "pg_authid"."rolname"
           FROM "pg_authid"
        UNION ALL
         SELECT (0)::"oid" AS "oid",
            'PUBLIC'::"name") "grantee"("oid", "rolname")
  WHERE (("c"."relnamespace" = "n"."oid") AND ("c"."relkind" = 'S'::"char") AND ("c"."grantee" = "grantee"."oid") AND ("c"."grantor" = "u_grantor"."oid") AND ("c"."prtype" = 'USAGE'::"text") AND ("pg_has_role"("u_grantor"."oid", 'USAGE'::"text") OR "pg_has_role"("grantee"."oid", 'USAGE'::"text") OR ("grantee"."rolname" = 'PUBLIC'::"name")));


ALTER VIEW "information_schema"."usage_privileges" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."role_usage_grants" AS
 SELECT "grantor",
    "grantee",
    "object_catalog",
    "object_schema",
    "object_name",
    "object_type",
    "privilege_type",
    "is_grantable"
   FROM "information_schema"."usage_privileges"
  WHERE ((("grantor")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")) OR (("grantee")::"name" IN ( SELECT "enabled_roles"."role_name"
           FROM "information_schema"."enabled_roles")));


ALTER VIEW "information_schema"."role_usage_grants" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."routine_column_usage" AS
 SELECT DISTINCT ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "routine_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "routine_schema",
    ("p"."proname")::"information_schema"."sql_identifier" AS "routine_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("t"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("a"."attname")::"information_schema"."sql_identifier" AS "column_name"
   FROM "pg_namespace" "np",
    "pg_proc" "p",
    "pg_depend" "d",
    "pg_class" "t",
    "pg_namespace" "nt",
    "pg_attribute" "a"
  WHERE (("np"."oid" = "p"."pronamespace") AND ("p"."oid" = "d"."objid") AND ("d"."classid" = ('"pg_proc"'::"regclass")::"oid") AND ("d"."refobjid" = "t"."oid") AND ("d"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("t"."relnamespace" = "nt"."oid") AND ("t"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND ("t"."oid" = "a"."attrelid") AND ("d"."refobjsubid" = "a"."attnum") AND "pg_has_role"("t"."relowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."routine_column_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."routine_routine_usage" AS
 SELECT DISTINCT ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "routine_catalog",
    ("np1"."nspname")::"information_schema"."sql_identifier" AS "routine_schema",
    ("nameconcatoid"("p1"."proname", "p1"."oid"))::"information_schema"."sql_identifier" AS "routine_name"
   FROM "pg_namespace" "np",
    "pg_proc" "p",
    "pg_depend" "d",
    "pg_proc" "p1",
    "pg_namespace" "np1"
  WHERE (("np"."oid" = "p"."pronamespace") AND ("p"."oid" = "d"."objid") AND ("d"."classid" = ('"pg_proc"'::"regclass")::"oid") AND ("d"."refobjid" = "p1"."oid") AND ("d"."refclassid" = ('"pg_proc"'::"regclass")::"oid") AND ("p1"."pronamespace" = "np1"."oid") AND ("p"."prokind" = ANY (ARRAY['f'::"char", 'p'::"char"])) AND ("p1"."prokind" = ANY (ARRAY['f'::"char", 'p'::"char"])) AND "pg_has_role"("p1"."proowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."routine_routine_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."routine_sequence_usage" AS
 SELECT DISTINCT ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "routine_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "routine_schema",
    ("p"."proname")::"information_schema"."sql_identifier" AS "routine_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "sequence_catalog",
    ("ns"."nspname")::"information_schema"."sql_identifier" AS "sequence_schema",
    ("s"."relname")::"information_schema"."sql_identifier" AS "sequence_name"
   FROM "pg_namespace" "np",
    "pg_proc" "p",
    "pg_depend" "d",
    "pg_class" "s",
    "pg_namespace" "ns"
  WHERE (("np"."oid" = "p"."pronamespace") AND ("p"."oid" = "d"."objid") AND ("d"."classid" = ('"pg_proc"'::"regclass")::"oid") AND ("d"."refobjid" = "s"."oid") AND ("d"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("s"."relnamespace" = "ns"."oid") AND ("s"."relkind" = 'S'::"char") AND "pg_has_role"("s"."relowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."routine_sequence_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."routine_table_usage" AS
 SELECT DISTINCT ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "routine_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "routine_schema",
    ("p"."proname")::"information_schema"."sql_identifier" AS "routine_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("t"."relname")::"information_schema"."sql_identifier" AS "table_name"
   FROM "pg_namespace" "np",
    "pg_proc" "p",
    "pg_depend" "d",
    "pg_class" "t",
    "pg_namespace" "nt"
  WHERE (("np"."oid" = "p"."pronamespace") AND ("p"."oid" = "d"."objid") AND ("d"."classid" = ('"pg_proc"'::"regclass")::"oid") AND ("d"."refobjid" = "t"."oid") AND ("d"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("t"."relnamespace" = "nt"."oid") AND ("t"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND "pg_has_role"("t"."relowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."routine_table_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."schemata" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "catalog_name",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "schema_name",
    ("u"."rolname")::"information_schema"."sql_identifier" AS "schema_owner",
    (NULL::"name")::"information_schema"."sql_identifier" AS "default_character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "default_character_set_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "default_character_set_name",
    (NULL::character varying)::"information_schema"."character_data" AS "sql_path"
   FROM "pg_namespace" "n",
    "pg_authid" "u"
  WHERE (("n"."nspowner" = "u"."oid") AND ("pg_has_role"("n"."nspowner", 'USAGE'::"text") OR "has_schema_privilege"("n"."oid", 'CREATE, USAGE'::"text")));


ALTER VIEW "information_schema"."schemata" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."sequences" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "sequence_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "sequence_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "sequence_name",
    ("format_type"("s"."seqtypid", NULL::integer))::"information_schema"."character_data" AS "data_type",
    ("information_schema"."_pg_numeric_precision"("s"."seqtypid", '-1'::integer))::"information_schema"."cardinal_number" AS "numeric_precision",
    (2)::"information_schema"."cardinal_number" AS "numeric_precision_radix",
    (0)::"information_schema"."cardinal_number" AS "numeric_scale",
    ("s"."seqstart")::"information_schema"."character_data" AS "start_value",
    ("s"."seqmin")::"information_schema"."character_data" AS "minimum_value",
    ("s"."seqmax")::"information_schema"."character_data" AS "maximum_value",
    ("s"."seqincrement")::"information_schema"."character_data" AS "increment",
    (
        CASE
            WHEN "s"."seqcycle" THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "cycle_option"
   FROM "pg_namespace" "nc",
    "pg_class" "c",
    "pg_sequence" "s"
  WHERE (("c"."relnamespace" = "nc"."oid") AND ("c"."relkind" = 'S'::"char") AND (NOT (EXISTS ( SELECT 1
           FROM "pg_depend"
          WHERE (("pg_depend"."classid" = ('"pg_class"'::"regclass")::"oid") AND ("pg_depend"."objid" = "c"."oid") AND ("pg_depend"."deptype" = 'i'::"char"))))) AND (NOT "pg_is_other_temp_schema"("nc"."oid")) AND ("c"."oid" = "s"."seqrelid") AND ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_sequence_privilege"("c"."oid", 'SELECT, UPDATE, USAGE'::"text")));


ALTER VIEW "information_schema"."sequences" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "information_schema"."sql_features" (
    "feature_id" "information_schema"."character_data",
    "feature_name" "information_schema"."character_data",
    "sub_feature_id" "information_schema"."character_data",
    "sub_feature_name" "information_schema"."character_data",
    "is_supported" "information_schema"."yes_or_no",
    "is_verified_by" "information_schema"."character_data",
    "comments" "information_schema"."character_data"
);


ALTER TABLE "information_schema"."sql_features" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "information_schema"."sql_implementation_info" (
    "implementation_info_id" "information_schema"."character_data",
    "implementation_info_name" "information_schema"."character_data",
    "integer_value" "information_schema"."cardinal_number",
    "character_value" "information_schema"."character_data",
    "comments" "information_schema"."character_data"
);


ALTER TABLE "information_schema"."sql_implementation_info" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "information_schema"."sql_parts" (
    "feature_id" "information_schema"."character_data",
    "feature_name" "information_schema"."character_data",
    "is_supported" "information_schema"."yes_or_no",
    "is_verified_by" "information_schema"."character_data",
    "comments" "information_schema"."character_data"
);


ALTER TABLE "information_schema"."sql_parts" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "information_schema"."sql_sizing" (
    "sizing_id" "information_schema"."cardinal_number",
    "sizing_name" "information_schema"."character_data",
    "supported_value" "information_schema"."cardinal_number",
    "comments" "information_schema"."character_data"
);


ALTER TABLE "information_schema"."sql_sizing" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."table_constraints" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ("c"."conname")::"information_schema"."sql_identifier" AS "constraint_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nr"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("r"."relname")::"information_schema"."sql_identifier" AS "table_name",
    (
        CASE "c"."contype"
            WHEN 'c'::"char" THEN 'CHECK'::"text"
            WHEN 'f'::"char" THEN 'FOREIGN KEY'::"text"
            WHEN 'p'::"char" THEN 'PRIMARY KEY'::"text"
            WHEN 'u'::"char" THEN 'UNIQUE'::"text"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "constraint_type",
    (
        CASE
            WHEN "c"."condeferrable" THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_deferrable",
    (
        CASE
            WHEN "c"."condeferred" THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "initially_deferred",
    ('YES'::character varying)::"information_schema"."yes_or_no" AS "enforced",
    (
        CASE
            WHEN ("c"."contype" = 'u'::"char") THEN
            CASE
                WHEN ( SELECT (NOT "pg_index"."indnullsnotdistinct")
                   FROM "pg_index"
                  WHERE ("pg_index"."indexrelid" = "c"."conindid")) THEN 'YES'::"text"
                ELSE 'NO'::"text"
            END
            ELSE NULL::"text"
        END)::"information_schema"."yes_or_no" AS "nulls_distinct"
   FROM "pg_namespace" "nc",
    "pg_namespace" "nr",
    "pg_constraint" "c",
    "pg_class" "r"
  WHERE (("nc"."oid" = "c"."connamespace") AND ("nr"."oid" = "r"."relnamespace") AND ("c"."conrelid" = "r"."oid") AND ("c"."contype" <> ALL (ARRAY['t'::"char", 'x'::"char"])) AND ("r"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT "pg_is_other_temp_schema"("nr"."oid")) AND ("pg_has_role"("r"."relowner", 'USAGE'::"text") OR "has_table_privilege"("r"."oid", 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::"text") OR "has_any_column_privilege"("r"."oid", 'INSERT, UPDATE, REFERENCES'::"text")))
UNION ALL
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "constraint_catalog",
    ("nr"."nspname")::"information_schema"."sql_identifier" AS "constraint_schema",
    ((((((("nr"."oid")::"text" || '_'::"text") || ("r"."oid")::"text") || '_'::"text") || ("a"."attnum")::"text") || '_not_null'::"text"))::"information_schema"."sql_identifier" AS "constraint_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nr"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("r"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ('CHECK'::character varying)::"information_schema"."character_data" AS "constraint_type",
    ('NO'::character varying)::"information_schema"."yes_or_no" AS "is_deferrable",
    ('NO'::character varying)::"information_schema"."yes_or_no" AS "initially_deferred",
    ('YES'::character varying)::"information_schema"."yes_or_no" AS "enforced",
    (NULL::character varying)::"information_schema"."yes_or_no" AS "nulls_distinct"
   FROM "pg_namespace" "nr",
    "pg_class" "r",
    "pg_attribute" "a"
  WHERE (("nr"."oid" = "r"."relnamespace") AND ("r"."oid" = "a"."attrelid") AND "a"."attnotnull" AND ("a"."attnum" > 0) AND (NOT "a"."attisdropped") AND ("r"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT "pg_is_other_temp_schema"("nr"."oid")) AND ("pg_has_role"("r"."relowner", 'USAGE'::"text") OR "has_table_privilege"("r"."oid", 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::"text") OR "has_any_column_privilege"("r"."oid", 'INSERT, UPDATE, REFERENCES'::"text")));


ALTER VIEW "information_schema"."table_constraints" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."tables" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "table_name",
    (
        CASE
            WHEN ("nc"."oid" = "pg_my_temp_schema"()) THEN 'LOCAL TEMPORARY'::"text"
            WHEN ("c"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) THEN 'BASE TABLE'::"text"
            WHEN ("c"."relkind" = 'v'::"char") THEN 'VIEW'::"text"
            WHEN ("c"."relkind" = 'f'::"char") THEN 'FOREIGN'::"text"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "table_type",
    (NULL::"name")::"information_schema"."sql_identifier" AS "self_referencing_column_name",
    (NULL::character varying)::"information_schema"."character_data" AS "reference_generation",
    (
        CASE
            WHEN ("t"."typname" IS NOT NULL) THEN "current_database"()
            ELSE NULL::"name"
        END)::"information_schema"."sql_identifier" AS "user_defined_type_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "user_defined_type_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "user_defined_type_name",
    (
        CASE
            WHEN (("c"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) OR (("c"."relkind" = ANY (ARRAY['v'::"char", 'f'::"char"])) AND (("pg_relation_is_updatable"(("c"."oid")::"regclass", false) & 8) = 8))) THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_insertable_into",
    (
        CASE
            WHEN ("t"."typname" IS NOT NULL) THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_typed",
    (NULL::character varying)::"information_schema"."character_data" AS "commit_action"
   FROM (("pg_namespace" "nc"
     JOIN "pg_class" "c" ON (("nc"."oid" = "c"."relnamespace")))
     LEFT JOIN ("pg_type" "t"
     JOIN "pg_namespace" "nt" ON (("t"."typnamespace" = "nt"."oid"))) ON (("c"."reloftype" = "t"."oid")))
  WHERE (("c"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (NOT "pg_is_other_temp_schema"("nc"."oid")) AND ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_table_privilege"("c"."oid", 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::"text") OR "has_any_column_privilege"("c"."oid", 'SELECT, INSERT, UPDATE, REFERENCES'::"text")));


ALTER VIEW "information_schema"."tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."transforms" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "udt_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "udt_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name",
    ("l"."lanname")::"information_schema"."sql_identifier" AS "group_name",
    ('FROM SQL'::character varying)::"information_schema"."character_data" AS "transform_type"
   FROM ((((("pg_type" "t"
     JOIN "pg_transform" "x" ON (("t"."oid" = "x"."trftype")))
     JOIN "pg_language" "l" ON (("x"."trflang" = "l"."oid")))
     JOIN "pg_proc" "p" ON ((("x"."trffromsql")::"oid" = "p"."oid")))
     JOIN "pg_namespace" "nt" ON (("t"."typnamespace" = "nt"."oid")))
     JOIN "pg_namespace" "np" ON (("p"."pronamespace" = "np"."oid")))
UNION
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "udt_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "udt_schema",
    ("t"."typname")::"information_schema"."sql_identifier" AS "udt_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name",
    ("l"."lanname")::"information_schema"."sql_identifier" AS "group_name",
    ('TO SQL'::character varying)::"information_schema"."character_data" AS "transform_type"
   FROM ((((("pg_type" "t"
     JOIN "pg_transform" "x" ON (("t"."oid" = "x"."trftype")))
     JOIN "pg_language" "l" ON (("x"."trflang" = "l"."oid")))
     JOIN "pg_proc" "p" ON ((("x"."trftosql")::"oid" = "p"."oid")))
     JOIN "pg_namespace" "nt" ON (("t"."typnamespace" = "nt"."oid")))
     JOIN "pg_namespace" "np" ON (("p"."pronamespace" = "np"."oid")))
  ORDER BY 1, 2, 3, 7, 8;


ALTER VIEW "information_schema"."transforms" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."triggered_update_columns" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "trigger_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "trigger_schema",
    ("t"."tgname")::"information_schema"."sql_identifier" AS "trigger_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "event_object_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "event_object_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "event_object_table",
    ("a"."attname")::"information_schema"."sql_identifier" AS "event_object_column"
   FROM "pg_namespace" "n",
    "pg_class" "c",
    "pg_trigger" "t",
    ( SELECT "ta0"."tgoid",
            ("ta0"."tgat")."x" AS "tgattnum",
            ("ta0"."tgat")."n" AS "tgattpos"
           FROM ( SELECT "pg_trigger"."oid" AS "tgoid",
                    "information_schema"."_pg_expandarray"("pg_trigger"."tgattr") AS "tgat"
                   FROM "pg_trigger") "ta0") "ta",
    "pg_attribute" "a"
  WHERE (("n"."oid" = "c"."relnamespace") AND ("c"."oid" = "t"."tgrelid") AND ("t"."oid" = "ta"."tgoid") AND (("a"."attrelid" = "t"."tgrelid") AND ("a"."attnum" = "ta"."tgattnum")) AND (NOT "t"."tgisinternal") AND (NOT "pg_is_other_temp_schema"("n"."oid")) AND ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_column_privilege"("c"."oid", "a"."attnum", 'INSERT, UPDATE, REFERENCES'::"text")));


ALTER VIEW "information_schema"."triggered_update_columns" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."triggers" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "trigger_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "trigger_schema",
    ("t"."tgname")::"information_schema"."sql_identifier" AS "trigger_name",
    ("em"."text")::"information_schema"."character_data" AS "event_manipulation",
    ("current_database"())::"information_schema"."sql_identifier" AS "event_object_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "event_object_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "event_object_table",
    ("rank"() OVER (PARTITION BY ("n"."nspname")::"information_schema"."sql_identifier", ("c"."relname")::"information_schema"."sql_identifier", "em"."num", (("t"."tgtype")::integer & 1), (("t"."tgtype")::integer & 66) ORDER BY "t"."tgname"))::"information_schema"."cardinal_number" AS "action_order",
    (
        CASE
            WHEN "pg_has_role"("c"."relowner", 'USAGE'::"text") THEN ("regexp_match"("pg_get_triggerdef"("t"."oid"), '.{35,} WHEN \((.+)\) EXECUTE FUNCTION'::"text"))[1]
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "action_condition",
    (SUBSTRING("pg_get_triggerdef"("t"."oid") FROM (POSITION(('EXECUTE FUNCTION'::"text") IN (SUBSTRING("pg_get_triggerdef"("t"."oid") FROM 48))) + 47)))::"information_schema"."character_data" AS "action_statement",
    (
        CASE (("t"."tgtype")::integer & 1)
            WHEN 1 THEN 'ROW'::"text"
            ELSE 'STATEMENT'::"text"
        END)::"information_schema"."character_data" AS "action_orientation",
    (
        CASE (("t"."tgtype")::integer & 66)
            WHEN 2 THEN 'BEFORE'::"text"
            WHEN 64 THEN 'INSTEAD OF'::"text"
            ELSE 'AFTER'::"text"
        END)::"information_schema"."character_data" AS "action_timing",
    ("t"."tgoldtable")::"information_schema"."sql_identifier" AS "action_reference_old_table",
    ("t"."tgnewtable")::"information_schema"."sql_identifier" AS "action_reference_new_table",
    (NULL::"name")::"information_schema"."sql_identifier" AS "action_reference_old_row",
    (NULL::"name")::"information_schema"."sql_identifier" AS "action_reference_new_row",
    (NULL::timestamp with time zone)::"information_schema"."time_stamp" AS "created"
   FROM "pg_namespace" "n",
    "pg_class" "c",
    "pg_trigger" "t",
    ( VALUES (4,'INSERT'::"text"), (8,'DELETE'::"text"), (16,'UPDATE'::"text")) "em"("num", "text")
  WHERE (("n"."oid" = "c"."relnamespace") AND ("c"."oid" = "t"."tgrelid") AND ((("t"."tgtype")::integer & "em"."num") <> 0) AND (NOT "t"."tgisinternal") AND (NOT "pg_is_other_temp_schema"("n"."oid")) AND ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_table_privilege"("c"."oid", 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::"text") OR "has_any_column_privilege"("c"."oid", 'INSERT, UPDATE, REFERENCES'::"text")));


ALTER VIEW "information_schema"."triggers" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."user_defined_types" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "user_defined_type_catalog",
    ("n"."nspname")::"information_schema"."sql_identifier" AS "user_defined_type_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "user_defined_type_name",
    ('STRUCTURED'::character varying)::"information_schema"."character_data" AS "user_defined_type_category",
    ('YES'::character varying)::"information_schema"."yes_or_no" AS "is_instantiable",
    (NULL::character varying)::"information_schema"."yes_or_no" AS "is_final",
    (NULL::character varying)::"information_schema"."character_data" AS "ordering_form",
    (NULL::character varying)::"information_schema"."character_data" AS "ordering_category",
    (NULL::"name")::"information_schema"."sql_identifier" AS "ordering_routine_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "ordering_routine_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "ordering_routine_name",
    (NULL::character varying)::"information_schema"."character_data" AS "reference_type",
    (NULL::character varying)::"information_schema"."character_data" AS "data_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "character_maximum_length",
    (NULL::integer)::"information_schema"."cardinal_number" AS "character_octet_length",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "character_set_name",
    (NULL::"name")::"information_schema"."sql_identifier" AS "collation_catalog",
    (NULL::"name")::"information_schema"."sql_identifier" AS "collation_schema",
    (NULL::"name")::"information_schema"."sql_identifier" AS "collation_name",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_precision",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_precision_radix",
    (NULL::integer)::"information_schema"."cardinal_number" AS "numeric_scale",
    (NULL::integer)::"information_schema"."cardinal_number" AS "datetime_precision",
    (NULL::character varying)::"information_schema"."character_data" AS "interval_type",
    (NULL::integer)::"information_schema"."cardinal_number" AS "interval_precision",
    (NULL::"name")::"information_schema"."sql_identifier" AS "source_dtd_identifier",
    (NULL::"name")::"information_schema"."sql_identifier" AS "ref_dtd_identifier"
   FROM "pg_namespace" "n",
    "pg_class" "c",
    "pg_type" "t"
  WHERE (("n"."oid" = "c"."relnamespace") AND ("t"."typrelid" = "c"."oid") AND ("c"."relkind" = 'c'::"char") AND ("pg_has_role"("t"."typowner", 'USAGE'::"text") OR "has_type_privilege"("t"."oid", 'USAGE'::"text")));


ALTER VIEW "information_schema"."user_defined_types" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."user_mapping_options" AS
 SELECT "um"."authorization_identifier",
    "um"."foreign_server_catalog",
    "um"."foreign_server_name",
    ("opts"."option_name")::"information_schema"."sql_identifier" AS "option_name",
    (
        CASE
            WHEN ((("um"."umuser" <> (0)::"oid") AND (("um"."authorization_identifier")::"name" = CURRENT_USER)) OR (("um"."umuser" = (0)::"oid") AND "pg_has_role"(("um"."srvowner")::"name", 'USAGE'::"text")) OR ( SELECT "pg_authid"."rolsuper"
               FROM "pg_authid"
              WHERE ("pg_authid"."rolname" = CURRENT_USER))) THEN "opts"."option_value"
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "option_value"
   FROM "information_schema"."_pg_user_mappings" "um",
    LATERAL "pg_options_to_table"("um"."umoptions") "opts"("option_name", "option_value");


ALTER VIEW "information_schema"."user_mapping_options" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."user_mappings" AS
 SELECT "authorization_identifier",
    "foreign_server_catalog",
    "foreign_server_name"
   FROM "information_schema"."_pg_user_mappings";


ALTER VIEW "information_schema"."user_mappings" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."view_column_usage" AS
 SELECT DISTINCT ("current_database"())::"information_schema"."sql_identifier" AS "view_catalog",
    ("nv"."nspname")::"information_schema"."sql_identifier" AS "view_schema",
    ("v"."relname")::"information_schema"."sql_identifier" AS "view_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("t"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("a"."attname")::"information_schema"."sql_identifier" AS "column_name"
   FROM "pg_namespace" "nv",
    "pg_class" "v",
    "pg_depend" "dv",
    "pg_depend" "dt",
    "pg_class" "t",
    "pg_namespace" "nt",
    "pg_attribute" "a"
  WHERE (("nv"."oid" = "v"."relnamespace") AND ("v"."relkind" = 'v'::"char") AND ("v"."oid" = "dv"."refobjid") AND ("dv"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("dv"."classid" = ('"pg_rewrite"'::"regclass")::"oid") AND ("dv"."deptype" = 'i'::"char") AND ("dv"."objid" = "dt"."objid") AND ("dv"."refobjid" <> "dt"."refobjid") AND ("dt"."classid" = ('"pg_rewrite"'::"regclass")::"oid") AND ("dt"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("dt"."refobjid" = "t"."oid") AND ("t"."relnamespace" = "nt"."oid") AND ("t"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND ("t"."oid" = "a"."attrelid") AND ("dt"."refobjsubid" = "a"."attnum") AND "pg_has_role"("t"."relowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."view_column_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."view_routine_usage" AS
 SELECT DISTINCT ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nv"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("v"."relname")::"information_schema"."sql_identifier" AS "table_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "specific_catalog",
    ("np"."nspname")::"information_schema"."sql_identifier" AS "specific_schema",
    ("nameconcatoid"("p"."proname", "p"."oid"))::"information_schema"."sql_identifier" AS "specific_name"
   FROM "pg_namespace" "nv",
    "pg_class" "v",
    "pg_depend" "dv",
    "pg_depend" "dp",
    "pg_proc" "p",
    "pg_namespace" "np"
  WHERE (("nv"."oid" = "v"."relnamespace") AND ("v"."relkind" = 'v'::"char") AND ("v"."oid" = "dv"."refobjid") AND ("dv"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("dv"."classid" = ('"pg_rewrite"'::"regclass")::"oid") AND ("dv"."deptype" = 'i'::"char") AND ("dv"."objid" = "dp"."objid") AND ("dp"."classid" = ('"pg_rewrite"'::"regclass")::"oid") AND ("dp"."refclassid" = ('"pg_proc"'::"regclass")::"oid") AND ("dp"."refobjid" = "p"."oid") AND ("p"."pronamespace" = "np"."oid") AND "pg_has_role"("p"."proowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."view_routine_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."view_table_usage" AS
 SELECT DISTINCT ("current_database"())::"information_schema"."sql_identifier" AS "view_catalog",
    ("nv"."nspname")::"information_schema"."sql_identifier" AS "view_schema",
    ("v"."relname")::"information_schema"."sql_identifier" AS "view_name",
    ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nt"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("t"."relname")::"information_schema"."sql_identifier" AS "table_name"
   FROM "pg_namespace" "nv",
    "pg_class" "v",
    "pg_depend" "dv",
    "pg_depend" "dt",
    "pg_class" "t",
    "pg_namespace" "nt"
  WHERE (("nv"."oid" = "v"."relnamespace") AND ("v"."relkind" = 'v'::"char") AND ("v"."oid" = "dv"."refobjid") AND ("dv"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("dv"."classid" = ('"pg_rewrite"'::"regclass")::"oid") AND ("dv"."deptype" = 'i'::"char") AND ("dv"."objid" = "dt"."objid") AND ("dv"."refobjid" <> "dt"."refobjid") AND ("dt"."classid" = ('"pg_rewrite"'::"regclass")::"oid") AND ("dt"."refclassid" = ('"pg_class"'::"regclass")::"oid") AND ("dt"."refobjid" = "t"."oid") AND ("t"."relnamespace" = "nt"."oid") AND ("t"."relkind" = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND "pg_has_role"("t"."relowner", 'USAGE'::"text"));


ALTER VIEW "information_schema"."view_table_usage" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "information_schema"."views" AS
 SELECT ("current_database"())::"information_schema"."sql_identifier" AS "table_catalog",
    ("nc"."nspname")::"information_schema"."sql_identifier" AS "table_schema",
    ("c"."relname")::"information_schema"."sql_identifier" AS "table_name",
    (
        CASE
            WHEN "pg_has_role"("c"."relowner", 'USAGE'::"text") THEN "pg_get_viewdef"("c"."oid")
            ELSE NULL::"text"
        END)::"information_schema"."character_data" AS "view_definition",
    (
        CASE
            WHEN ('check_option=cascaded'::"text" = ANY ("c"."reloptions")) THEN 'CASCADED'::"text"
            WHEN ('check_option=local'::"text" = ANY ("c"."reloptions")) THEN 'LOCAL'::"text"
            ELSE 'NONE'::"text"
        END)::"information_schema"."character_data" AS "check_option",
    (
        CASE
            WHEN (("pg_relation_is_updatable"(("c"."oid")::"regclass", false) & 20) = 20) THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_updatable",
    (
        CASE
            WHEN (("pg_relation_is_updatable"(("c"."oid")::"regclass", false) & 8) = 8) THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_insertable_into",
    (
        CASE
            WHEN (EXISTS ( SELECT 1
               FROM "pg_trigger"
              WHERE (("pg_trigger"."tgrelid" = "c"."oid") AND ((("pg_trigger"."tgtype")::integer & 81) = 81)))) THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_trigger_updatable",
    (
        CASE
            WHEN (EXISTS ( SELECT 1
               FROM "pg_trigger"
              WHERE (("pg_trigger"."tgrelid" = "c"."oid") AND ((("pg_trigger"."tgtype")::integer & 73) = 73)))) THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_trigger_deletable",
    (
        CASE
            WHEN (EXISTS ( SELECT 1
               FROM "pg_trigger"
              WHERE (("pg_trigger"."tgrelid" = "c"."oid") AND ((("pg_trigger"."tgtype")::integer & 69) = 69)))) THEN 'YES'::"text"
            ELSE 'NO'::"text"
        END)::"information_schema"."yes_or_no" AS "is_trigger_insertable_into"
   FROM "pg_namespace" "nc",
    "pg_class" "c"
  WHERE (("c"."relnamespace" = "nc"."oid") AND ("c"."relkind" = 'v'::"char") AND (NOT "pg_is_other_temp_schema"("nc"."oid")) AND ("pg_has_role"("c"."relowner", 'USAGE'::"text") OR "has_table_privilege"("c"."oid", 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::"text") OR "has_any_column_privilege"("c"."oid", 'SELECT, INSERT, UPDATE, REFERENCES'::"text")));


ALTER VIEW "information_schema"."views" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_aggregate" (
    "aggfnoid" "regproc" NOT NULL,
    "aggkind" "char" NOT NULL,
    "aggnumdirectargs" smallint NOT NULL,
    "aggtransfn" "regproc" NOT NULL,
    "aggfinalfn" "regproc" NOT NULL,
    "aggcombinefn" "regproc" NOT NULL,
    "aggserialfn" "regproc" NOT NULL,
    "aggdeserialfn" "regproc" NOT NULL,
    "aggmtransfn" "regproc" NOT NULL,
    "aggminvtransfn" "regproc" NOT NULL,
    "aggmfinalfn" "regproc" NOT NULL,
    "aggfinalextra" boolean NOT NULL,
    "aggmfinalextra" boolean NOT NULL,
    "aggfinalmodify" "char" NOT NULL,
    "aggmfinalmodify" "char" NOT NULL,
    "aggsortop" "oid" NOT NULL,
    "aggtranstype" "oid" NOT NULL,
    "aggtransspace" integer NOT NULL,
    "aggmtranstype" "oid" NOT NULL,
    "aggmtransspace" integer NOT NULL,
    "agginitval" "text" COLLATE "pg_catalog"."C",
    "aggminitval" "text" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_aggregate" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_aggregate" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_am" (
    "oid" "oid" NOT NULL,
    "amname" "name" NOT NULL,
    "amhandler" "regproc" NOT NULL,
    "amtype" "char" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_am" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_am" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_amop" (
    "oid" "oid" NOT NULL,
    "amopfamily" "oid" NOT NULL,
    "amoplefttype" "oid" NOT NULL,
    "amoprighttype" "oid" NOT NULL,
    "amopstrategy" smallint NOT NULL,
    "amoppurpose" "char" NOT NULL,
    "amopopr" "oid" NOT NULL,
    "amopmethod" "oid" NOT NULL,
    "amopsortfamily" "oid" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_amop" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_amop" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_amproc" (
    "oid" "oid" NOT NULL,
    "amprocfamily" "oid" NOT NULL,
    "amproclefttype" "oid" NOT NULL,
    "amprocrighttype" "oid" NOT NULL,
    "amprocnum" smallint NOT NULL,
    "amproc" "regproc" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_amproc" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_amproc" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_attrdef" (
    "oid" "oid" NOT NULL,
    "adrelid" "oid" NOT NULL,
    "adnum" smallint NOT NULL,
    "adbin" "pg_node_tree" NOT NULL COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_attrdef" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_attrdef" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_attribute" (
    "attrelid" "oid" NOT NULL,
    "attname" "name" NOT NULL,
    "atttypid" "oid" NOT NULL,
    "attlen" smallint NOT NULL,
    "attnum" smallint NOT NULL,
    "attcacheoff" integer NOT NULL,
    "atttypmod" integer NOT NULL,
    "attndims" smallint NOT NULL,
    "attbyval" boolean NOT NULL,
    "attalign" "char" NOT NULL,
    "attstorage" "char" NOT NULL,
    "attcompression" "char" NOT NULL,
    "attnotnull" boolean NOT NULL,
    "atthasdef" boolean NOT NULL,
    "atthasmissing" boolean NOT NULL,
    "attidentity" "char" NOT NULL,
    "attgenerated" "char" NOT NULL,
    "attisdropped" boolean NOT NULL,
    "attislocal" boolean NOT NULL,
    "attinhcount" smallint NOT NULL,
    "attcollation" "oid" NOT NULL,
    "attstattarget" smallint,
    "attacl" "aclitem"[],
    "attoptions" "text"[] COLLATE "pg_catalog"."C",
    "attfdwoptions" "text"[] COLLATE "pg_catalog"."C",
    "attmissingval" "anyarray"
);

ALTER TABLE ONLY "pg_catalog"."pg_attribute" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_attribute" OWNER TO "supabase_admin";

SET default_tablespace = "pg_global";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_auth_members" (
    "oid" "oid" NOT NULL,
    "roleid" "oid" NOT NULL,
    "member" "oid" NOT NULL,
    "grantor" "oid" NOT NULL,
    "admin_option" boolean NOT NULL,
    "inherit_option" boolean NOT NULL,
    "set_option" boolean NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_auth_members" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_auth_members" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_authid" (
    "oid" "oid" NOT NULL,
    "rolname" "name" NOT NULL,
    "rolsuper" boolean NOT NULL,
    "rolinherit" boolean NOT NULL,
    "rolcreaterole" boolean NOT NULL,
    "rolcreatedb" boolean NOT NULL,
    "rolcanlogin" boolean NOT NULL,
    "rolreplication" boolean NOT NULL,
    "rolbypassrls" boolean NOT NULL,
    "rolconnlimit" integer NOT NULL,
    "rolpassword" "text" COLLATE "pg_catalog"."C",
    "rolvaliduntil" timestamp with time zone
);

ALTER TABLE ONLY "pg_catalog"."pg_authid" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_authid" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_available_extension_versions" AS
 SELECT "e"."name",
    "e"."version",
    ("x"."extname" IS NOT NULL) AS "installed",
    "e"."superuser",
    "e"."trusted",
    "e"."relocatable",
    "e"."schema",
    "e"."requires",
    "e"."comment"
   FROM ("pg_available_extension_versions"() "e"("name", "version", "superuser", "trusted", "relocatable", "schema", "requires", "comment")
     LEFT JOIN "pg_extension" "x" ON ((("e"."name" = "x"."extname") AND ("e"."version" = "x"."extversion"))));


ALTER VIEW "pg_catalog"."pg_available_extension_versions" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_available_extensions" AS
 SELECT "e"."name",
    "e"."default_version",
    "x"."extversion" AS "installed_version",
    "e"."comment"
   FROM ("pg_available_extensions"() "e"("name", "default_version", "comment")
     LEFT JOIN "pg_extension" "x" ON (("e"."name" = "x"."extname")));


ALTER VIEW "pg_catalog"."pg_available_extensions" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_backend_memory_contexts" AS
 SELECT "name",
    "ident",
    "parent",
    "level",
    "total_bytes",
    "total_nblocks",
    "free_bytes",
    "free_chunks",
    "used_bytes"
   FROM "pg_get_backend_memory_contexts"() "pg_get_backend_memory_contexts"("name", "ident", "parent", "level", "total_bytes", "total_nblocks", "free_bytes", "free_chunks", "used_bytes");


ALTER VIEW "pg_catalog"."pg_backend_memory_contexts" OWNER TO "supabase_admin";

SET default_tablespace = '';


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_cast" (
    "oid" "oid" NOT NULL,
    "castsource" "oid" NOT NULL,
    "casttarget" "oid" NOT NULL,
    "castfunc" "oid" NOT NULL,
    "castcontext" "char" NOT NULL,
    "castmethod" "char" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_cast" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_cast" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_class" (
    "oid" "oid" NOT NULL,
    "relname" "name" NOT NULL,
    "relnamespace" "oid" NOT NULL,
    "reltype" "oid" NOT NULL,
    "reloftype" "oid" NOT NULL,
    "relowner" "oid" NOT NULL,
    "relam" "oid" NOT NULL,
    "relfilenode" "oid" NOT NULL,
    "reltablespace" "oid" NOT NULL,
    "relpages" integer NOT NULL,
    "reltuples" real NOT NULL,
    "relallvisible" integer NOT NULL,
    "reltoastrelid" "oid" NOT NULL,
    "relhasindex" boolean NOT NULL,
    "relisshared" boolean NOT NULL,
    "relpersistence" "char" NOT NULL,
    "relkind" "char" NOT NULL,
    "relnatts" smallint NOT NULL,
    "relchecks" smallint NOT NULL,
    "relhasrules" boolean NOT NULL,
    "relhastriggers" boolean NOT NULL,
    "relhassubclass" boolean NOT NULL,
    "relrowsecurity" boolean NOT NULL,
    "relforcerowsecurity" boolean NOT NULL,
    "relispopulated" boolean NOT NULL,
    "relreplident" "char" NOT NULL,
    "relispartition" boolean NOT NULL,
    "relrewrite" "oid" NOT NULL,
    "relfrozenxid" "xid" NOT NULL,
    "relminmxid" "xid" NOT NULL,
    "relacl" "aclitem"[],
    "reloptions" "text"[] COLLATE "pg_catalog"."C",
    "relpartbound" "pg_node_tree" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_class" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_class" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_collation" (
    "oid" "oid" NOT NULL,
    "collname" "name" NOT NULL,
    "collnamespace" "oid" NOT NULL,
    "collowner" "oid" NOT NULL,
    "collprovider" "char" NOT NULL,
    "collisdeterministic" boolean NOT NULL,
    "collencoding" integer NOT NULL,
    "collcollate" "text" COLLATE "pg_catalog"."C",
    "collctype" "text" COLLATE "pg_catalog"."C",
    "colllocale" "text" COLLATE "pg_catalog"."C",
    "collicurules" "text" COLLATE "pg_catalog"."C",
    "collversion" "text" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_collation" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_collation" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_config" AS
 SELECT "name",
    "setting"
   FROM "pg_config"() "pg_config"("name", "setting");


ALTER VIEW "pg_catalog"."pg_config" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_constraint" (
    "oid" "oid" NOT NULL,
    "conname" "name" NOT NULL,
    "connamespace" "oid" NOT NULL,
    "contype" "char" NOT NULL,
    "condeferrable" boolean NOT NULL,
    "condeferred" boolean NOT NULL,
    "convalidated" boolean NOT NULL,
    "conrelid" "oid" NOT NULL,
    "contypid" "oid" NOT NULL,
    "conindid" "oid" NOT NULL,
    "conparentid" "oid" NOT NULL,
    "confrelid" "oid" NOT NULL,
    "confupdtype" "char" NOT NULL,
    "confdeltype" "char" NOT NULL,
    "confmatchtype" "char" NOT NULL,
    "conislocal" boolean NOT NULL,
    "coninhcount" smallint NOT NULL,
    "connoinherit" boolean NOT NULL,
    "conkey" smallint[],
    "confkey" smallint[],
    "conpfeqop" "oid"[],
    "conppeqop" "oid"[],
    "conffeqop" "oid"[],
    "confdelsetcols" smallint[],
    "conexclop" "oid"[],
    "conbin" "pg_node_tree" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_constraint" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_constraint" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_conversion" (
    "oid" "oid" NOT NULL,
    "conname" "name" NOT NULL,
    "connamespace" "oid" NOT NULL,
    "conowner" "oid" NOT NULL,
    "conforencoding" integer NOT NULL,
    "contoencoding" integer NOT NULL,
    "conproc" "regproc" NOT NULL,
    "condefault" boolean NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_conversion" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_conversion" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_cursors" AS
 SELECT "name",
    "statement",
    "is_holdable",
    "is_binary",
    "is_scrollable",
    "creation_time"
   FROM "pg_cursor"() "c"("name", "statement", "is_holdable", "is_binary", "is_scrollable", "creation_time");


ALTER VIEW "pg_catalog"."pg_cursors" OWNER TO "supabase_admin";

SET default_tablespace = "pg_global";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_database" (
    "oid" "oid" NOT NULL,
    "datname" "name" NOT NULL,
    "datdba" "oid" NOT NULL,
    "encoding" integer NOT NULL,
    "datlocprovider" "char" NOT NULL,
    "datistemplate" boolean NOT NULL,
    "datallowconn" boolean NOT NULL,
    "dathasloginevt" boolean NOT NULL,
    "datconnlimit" integer NOT NULL,
    "datfrozenxid" "xid" NOT NULL,
    "datminmxid" "xid" NOT NULL,
    "dattablespace" "oid" NOT NULL,
    "datcollate" "text" NOT NULL COLLATE "pg_catalog"."C",
    "datctype" "text" NOT NULL COLLATE "pg_catalog"."C",
    "datlocale" "text" COLLATE "pg_catalog"."C",
    "daticurules" "text" COLLATE "pg_catalog"."C",
    "datcollversion" "text" COLLATE "pg_catalog"."C",
    "datacl" "aclitem"[]
);

ALTER TABLE ONLY "pg_catalog"."pg_database" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_database" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_db_role_setting" (
    "setdatabase" "oid" NOT NULL,
    "setrole" "oid" NOT NULL,
    "setconfig" "text"[] COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_db_role_setting" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_db_role_setting" OWNER TO "supabase_admin";

SET default_tablespace = '';


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_default_acl" (
    "oid" "oid" NOT NULL,
    "defaclrole" "oid" NOT NULL,
    "defaclnamespace" "oid" NOT NULL,
    "defaclobjtype" "char" NOT NULL,
    "defaclacl" "aclitem"[] NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_default_acl" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_default_acl" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_depend" (
    "classid" "oid" NOT NULL,
    "objid" "oid" NOT NULL,
    "objsubid" integer NOT NULL,
    "refclassid" "oid" NOT NULL,
    "refobjid" "oid" NOT NULL,
    "refobjsubid" integer NOT NULL,
    "deptype" "char" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_depend" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_depend" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_description" (
    "objoid" "oid" NOT NULL,
    "classoid" "oid" NOT NULL,
    "objsubid" integer NOT NULL,
    "description" "text" NOT NULL COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_description" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_description" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_enum" (
    "oid" "oid" NOT NULL,
    "enumtypid" "oid" NOT NULL,
    "enumsortorder" real NOT NULL,
    "enumlabel" "name" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_enum" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_enum" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_event_trigger" (
    "oid" "oid" NOT NULL,
    "evtname" "name" NOT NULL,
    "evtevent" "name" NOT NULL,
    "evtowner" "oid" NOT NULL,
    "evtfoid" "oid" NOT NULL,
    "evtenabled" "char" NOT NULL,
    "evttags" "text"[] COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_event_trigger" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_event_trigger" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_extension" (
    "oid" "oid" NOT NULL,
    "extname" "name" NOT NULL,
    "extowner" "oid" NOT NULL,
    "extnamespace" "oid" NOT NULL,
    "extrelocatable" boolean NOT NULL,
    "extversion" "text" NOT NULL COLLATE "pg_catalog"."C",
    "extconfig" "oid"[],
    "extcondition" "text"[] COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_extension" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_extension" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_file_settings" AS
 SELECT "sourcefile",
    "sourceline",
    "seqno",
    "name",
    "setting",
    "applied",
    "error"
   FROM "pg_show_all_file_settings"() "a"("sourcefile", "sourceline", "seqno", "name", "setting", "applied", "error");


ALTER VIEW "pg_catalog"."pg_file_settings" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_foreign_data_wrapper" (
    "oid" "oid" NOT NULL,
    "fdwname" "name" NOT NULL,
    "fdwowner" "oid" NOT NULL,
    "fdwhandler" "oid" NOT NULL,
    "fdwvalidator" "oid" NOT NULL,
    "fdwacl" "aclitem"[],
    "fdwoptions" "text"[] COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_foreign_data_wrapper" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_foreign_data_wrapper" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_foreign_server" (
    "oid" "oid" NOT NULL,
    "srvname" "name" NOT NULL,
    "srvowner" "oid" NOT NULL,
    "srvfdw" "oid" NOT NULL,
    "srvtype" "text" COLLATE "pg_catalog"."C",
    "srvversion" "text" COLLATE "pg_catalog"."C",
    "srvacl" "aclitem"[],
    "srvoptions" "text"[] COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_foreign_server" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_foreign_server" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_foreign_table" (
    "ftrelid" "oid" NOT NULL,
    "ftserver" "oid" NOT NULL,
    "ftoptions" "text"[] COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_foreign_table" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_foreign_table" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_group" AS
 SELECT "rolname" AS "groname",
    "oid" AS "grosysid",
    ARRAY( SELECT "pg_auth_members"."member"
           FROM "pg_auth_members"
          WHERE ("pg_auth_members"."roleid" = "pg_authid"."oid")) AS "grolist"
   FROM "pg_authid"
  WHERE (NOT "rolcanlogin");


ALTER VIEW "pg_catalog"."pg_group" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_hba_file_rules" AS
 SELECT "rule_number",
    "file_name",
    "line_number",
    "type",
    "database",
    "user_name",
    "address",
    "netmask",
    "auth_method",
    "options",
    "error"
   FROM "pg_hba_file_rules"() "a"("rule_number", "file_name", "line_number", "type", "database", "user_name", "address", "netmask", "auth_method", "options", "error");


ALTER VIEW "pg_catalog"."pg_hba_file_rules" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_ident_file_mappings" AS
 SELECT "map_number",
    "file_name",
    "line_number",
    "map_name",
    "sys_name",
    "pg_username",
    "error"
   FROM "pg_ident_file_mappings"() "a"("map_number", "file_name", "line_number", "map_name", "sys_name", "pg_username", "error");


ALTER VIEW "pg_catalog"."pg_ident_file_mappings" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_index" (
    "indexrelid" "oid" NOT NULL,
    "indrelid" "oid" NOT NULL,
    "indnatts" smallint NOT NULL,
    "indnkeyatts" smallint NOT NULL,
    "indisunique" boolean NOT NULL,
    "indnullsnotdistinct" boolean NOT NULL,
    "indisprimary" boolean NOT NULL,
    "indisexclusion" boolean NOT NULL,
    "indimmediate" boolean NOT NULL,
    "indisclustered" boolean NOT NULL,
    "indisvalid" boolean NOT NULL,
    "indcheckxmin" boolean NOT NULL,
    "indisready" boolean NOT NULL,
    "indislive" boolean NOT NULL,
    "indisreplident" boolean NOT NULL,
    "indkey" "int2vector" NOT NULL,
    "indcollation" "oidvector" NOT NULL,
    "indclass" "oidvector" NOT NULL,
    "indoption" "int2vector" NOT NULL,
    "indexprs" "pg_node_tree" COLLATE "pg_catalog"."C",
    "indpred" "pg_node_tree" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_index" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_index" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_indexes" AS
 SELECT "n"."nspname" AS "schemaname",
    "c"."relname" AS "tablename",
    "i"."relname" AS "indexname",
    "t"."spcname" AS "tablespace",
    "pg_get_indexdef"("i"."oid") AS "indexdef"
   FROM (((("pg_index" "x"
     JOIN "pg_class" "c" ON (("c"."oid" = "x"."indrelid")))
     JOIN "pg_class" "i" ON (("i"."oid" = "x"."indexrelid")))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
     LEFT JOIN "pg_tablespace" "t" ON (("t"."oid" = "i"."reltablespace")))
  WHERE (("c"."relkind" = ANY (ARRAY['r'::"char", 'm'::"char", 'p'::"char"])) AND ("i"."relkind" = ANY (ARRAY['i'::"char", 'I'::"char"])));


ALTER VIEW "pg_catalog"."pg_indexes" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_inherits" (
    "inhrelid" "oid" NOT NULL,
    "inhparent" "oid" NOT NULL,
    "inhseqno" integer NOT NULL,
    "inhdetachpending" boolean NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_inherits" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_inherits" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_init_privs" (
    "objoid" "oid" NOT NULL,
    "classoid" "oid" NOT NULL,
    "objsubid" integer NOT NULL,
    "privtype" "char" NOT NULL,
    "initprivs" "aclitem"[] NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_init_privs" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_init_privs" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_language" (
    "oid" "oid" NOT NULL,
    "lanname" "name" NOT NULL,
    "lanowner" "oid" NOT NULL,
    "lanispl" boolean NOT NULL,
    "lanpltrusted" boolean NOT NULL,
    "lanplcallfoid" "oid" NOT NULL,
    "laninline" "oid" NOT NULL,
    "lanvalidator" "oid" NOT NULL,
    "lanacl" "aclitem"[]
);

ALTER TABLE ONLY "pg_catalog"."pg_language" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_language" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_largeobject" (
    "loid" "oid" NOT NULL,
    "pageno" integer NOT NULL,
    "data" "bytea" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_largeobject" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_largeobject" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_largeobject_metadata" (
    "oid" "oid" NOT NULL,
    "lomowner" "oid" NOT NULL,
    "lomacl" "aclitem"[]
);

ALTER TABLE ONLY "pg_catalog"."pg_largeobject_metadata" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_largeobject_metadata" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_locks" AS
 SELECT "locktype",
    "database",
    "relation",
    "page",
    "tuple",
    "virtualxid",
    "transactionid",
    "classid",
    "objid",
    "objsubid",
    "virtualtransaction",
    "pid",
    "mode",
    "granted",
    "fastpath",
    "waitstart"
   FROM "pg_lock_status"() "l"("locktype", "database", "relation", "page", "tuple", "virtualxid", "transactionid", "classid", "objid", "objsubid", "virtualtransaction", "pid", "mode", "granted", "fastpath", "waitstart");


ALTER VIEW "pg_catalog"."pg_locks" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_matviews" AS
 SELECT "n"."nspname" AS "schemaname",
    "c"."relname" AS "matviewname",
    "pg_get_userbyid"("c"."relowner") AS "matviewowner",
    "t"."spcname" AS "tablespace",
    "c"."relhasindex" AS "hasindexes",
    "c"."relispopulated" AS "ispopulated",
    "pg_get_viewdef"("c"."oid") AS "definition"
   FROM (("pg_class" "c"
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
     LEFT JOIN "pg_tablespace" "t" ON (("t"."oid" = "c"."reltablespace")))
  WHERE ("c"."relkind" = 'm'::"char");


ALTER VIEW "pg_catalog"."pg_matviews" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_namespace" (
    "oid" "oid" NOT NULL,
    "nspname" "name" NOT NULL,
    "nspowner" "oid" NOT NULL,
    "nspacl" "aclitem"[]
);

ALTER TABLE ONLY "pg_catalog"."pg_namespace" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_namespace" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_opclass" (
    "oid" "oid" NOT NULL,
    "opcmethod" "oid" NOT NULL,
    "opcname" "name" NOT NULL,
    "opcnamespace" "oid" NOT NULL,
    "opcowner" "oid" NOT NULL,
    "opcfamily" "oid" NOT NULL,
    "opcintype" "oid" NOT NULL,
    "opcdefault" boolean NOT NULL,
    "opckeytype" "oid" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_opclass" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_opclass" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_operator" (
    "oid" "oid" NOT NULL,
    "oprname" "name" NOT NULL,
    "oprnamespace" "oid" NOT NULL,
    "oprowner" "oid" NOT NULL,
    "oprkind" "char" NOT NULL,
    "oprcanmerge" boolean NOT NULL,
    "oprcanhash" boolean NOT NULL,
    "oprleft" "oid" NOT NULL,
    "oprright" "oid" NOT NULL,
    "oprresult" "oid" NOT NULL,
    "oprcom" "oid" NOT NULL,
    "oprnegate" "oid" NOT NULL,
    "oprcode" "regproc" NOT NULL,
    "oprrest" "regproc" NOT NULL,
    "oprjoin" "regproc" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_operator" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_operator" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_opfamily" (
    "oid" "oid" NOT NULL,
    "opfmethod" "oid" NOT NULL,
    "opfname" "name" NOT NULL,
    "opfnamespace" "oid" NOT NULL,
    "opfowner" "oid" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_opfamily" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_opfamily" OWNER TO "supabase_admin";

SET default_tablespace = "pg_global";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_parameter_acl" (
    "oid" "oid" NOT NULL,
    "parname" "text" NOT NULL COLLATE "pg_catalog"."C",
    "paracl" "aclitem"[]
);

ALTER TABLE ONLY "pg_catalog"."pg_parameter_acl" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_parameter_acl" OWNER TO "supabase_admin";

SET default_tablespace = '';


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_partitioned_table" (
    "partrelid" "oid" NOT NULL,
    "partstrat" "char" NOT NULL,
    "partnatts" smallint NOT NULL,
    "partdefid" "oid" NOT NULL,
    "partattrs" "int2vector" NOT NULL,
    "partclass" "oidvector" NOT NULL,
    "partcollation" "oidvector" NOT NULL,
    "partexprs" "pg_node_tree" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_partitioned_table" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_partitioned_table" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_policies" AS
 SELECT "n"."nspname" AS "schemaname",
    "c"."relname" AS "tablename",
    "pol"."polname" AS "policyname",
        CASE
            WHEN "pol"."polpermissive" THEN 'PERMISSIVE'::"text"
            ELSE 'RESTRICTIVE'::"text"
        END AS "permissive",
        CASE
            WHEN ("pol"."polroles" = '{0}'::"oid"[]) THEN ("string_to_array"('public'::"text", ''::"text"))::"name"[]
            ELSE ARRAY( SELECT "pg_authid"."rolname"
               FROM "pg_authid"
              WHERE ("pg_authid"."oid" = ANY ("pol"."polroles"))
              ORDER BY "pg_authid"."rolname")
        END AS "roles",
        CASE "pol"."polcmd"
            WHEN 'r'::"char" THEN 'SELECT'::"text"
            WHEN 'a'::"char" THEN 'INSERT'::"text"
            WHEN 'w'::"char" THEN 'UPDATE'::"text"
            WHEN 'd'::"char" THEN 'DELETE'::"text"
            WHEN '*'::"char" THEN 'ALL'::"text"
            ELSE NULL::"text"
        END AS "cmd",
    "pg_get_expr"("pol"."polqual", "pol"."polrelid") AS "qual",
    "pg_get_expr"("pol"."polwithcheck", "pol"."polrelid") AS "with_check"
   FROM (("pg_policy" "pol"
     JOIN "pg_class" "c" ON (("c"."oid" = "pol"."polrelid")))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")));


ALTER VIEW "pg_catalog"."pg_policies" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_policy" (
    "oid" "oid" NOT NULL,
    "polname" "name" NOT NULL,
    "polrelid" "oid" NOT NULL,
    "polcmd" "char" NOT NULL,
    "polpermissive" boolean NOT NULL,
    "polroles" "oid"[] NOT NULL,
    "polqual" "pg_node_tree" COLLATE "pg_catalog"."C",
    "polwithcheck" "pg_node_tree" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_policy" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_policy" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_prepared_statements" AS
 SELECT "name",
    "statement",
    "prepare_time",
    "parameter_types",
    "result_types",
    "from_sql",
    "generic_plans",
    "custom_plans"
   FROM "pg_prepared_statement"() "p"("name", "statement", "prepare_time", "parameter_types", "result_types", "from_sql", "generic_plans", "custom_plans");


ALTER VIEW "pg_catalog"."pg_prepared_statements" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_prepared_xacts" AS
 SELECT "p"."transaction",
    "p"."gid",
    "p"."prepared",
    "u"."rolname" AS "owner",
    "d"."datname" AS "database"
   FROM (("pg_prepared_xact"() "p"("transaction", "gid", "prepared", "ownerid", "dbid")
     LEFT JOIN "pg_authid" "u" ON (("p"."ownerid" = "u"."oid")))
     LEFT JOIN "pg_database" "d" ON (("p"."dbid" = "d"."oid")));


ALTER VIEW "pg_catalog"."pg_prepared_xacts" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_proc" (
    "oid" "oid" NOT NULL,
    "proname" "name" NOT NULL,
    "pronamespace" "oid" NOT NULL,
    "proowner" "oid" NOT NULL,
    "prolang" "oid" NOT NULL,
    "procost" real NOT NULL,
    "prorows" real NOT NULL,
    "provariadic" "oid" NOT NULL,
    "prosupport" "regproc" NOT NULL,
    "prokind" "char" NOT NULL,
    "prosecdef" boolean NOT NULL,
    "proleakproof" boolean NOT NULL,
    "proisstrict" boolean NOT NULL,
    "proretset" boolean NOT NULL,
    "provolatile" "char" NOT NULL,
    "proparallel" "char" NOT NULL,
    "pronargs" smallint NOT NULL,
    "pronargdefaults" smallint NOT NULL,
    "prorettype" "oid" NOT NULL,
    "proargtypes" "oidvector" NOT NULL,
    "proallargtypes" "oid"[],
    "proargmodes" "char"[],
    "proargnames" "text"[] COLLATE "pg_catalog"."C",
    "proargdefaults" "pg_node_tree" COLLATE "pg_catalog"."C",
    "protrftypes" "oid"[],
    "prosrc" "text" NOT NULL COLLATE "pg_catalog"."C",
    "probin" "text" COLLATE "pg_catalog"."C",
    "prosqlbody" "pg_node_tree" COLLATE "pg_catalog"."C",
    "proconfig" "text"[] COLLATE "pg_catalog"."C",
    "proacl" "aclitem"[]
);

ALTER TABLE ONLY "pg_catalog"."pg_proc" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_proc" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_publication" (
    "oid" "oid" NOT NULL,
    "pubname" "name" NOT NULL,
    "pubowner" "oid" NOT NULL,
    "puballtables" boolean NOT NULL,
    "pubinsert" boolean NOT NULL,
    "pubupdate" boolean NOT NULL,
    "pubdelete" boolean NOT NULL,
    "pubtruncate" boolean NOT NULL,
    "pubviaroot" boolean NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_publication" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_publication" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_publication_namespace" (
    "oid" "oid" NOT NULL,
    "pnpubid" "oid" NOT NULL,
    "pnnspid" "oid" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_publication_namespace" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_publication_namespace" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_publication_rel" (
    "oid" "oid" NOT NULL,
    "prpubid" "oid" NOT NULL,
    "prrelid" "oid" NOT NULL,
    "prqual" "pg_node_tree" COLLATE "pg_catalog"."C",
    "prattrs" "int2vector"
);

ALTER TABLE ONLY "pg_catalog"."pg_publication_rel" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_publication_rel" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_publication_tables" AS
 SELECT "p"."pubname",
    "n"."nspname" AS "schemaname",
    "c"."relname" AS "tablename",
    ( SELECT "array_agg"("a"."attname" ORDER BY "a"."attnum") AS "array_agg"
           FROM "pg_attribute" "a"
          WHERE (("a"."attrelid" = "gpt"."relid") AND ("a"."attnum" = ANY (("gpt"."attrs")::smallint[])))) AS "attnames",
    "pg_get_expr"("gpt"."qual", "gpt"."relid") AS "rowfilter"
   FROM "pg_publication" "p",
    LATERAL "pg_get_publication_tables"(VARIADIC ARRAY[("p"."pubname")::"text"]) "gpt"("pubid", "relid", "attrs", "qual"),
    ("pg_class" "c"
     JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ("c"."oid" = "gpt"."relid");


ALTER VIEW "pg_catalog"."pg_publication_tables" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_range" (
    "rngtypid" "oid" NOT NULL,
    "rngsubtype" "oid" NOT NULL,
    "rngmultitypid" "oid" NOT NULL,
    "rngcollation" "oid" NOT NULL,
    "rngsubopc" "oid" NOT NULL,
    "rngcanonical" "regproc" NOT NULL,
    "rngsubdiff" "regproc" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_range" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_range" OWNER TO "supabase_admin";

SET default_tablespace = "pg_global";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_replication_origin" (
    "roident" "oid" NOT NULL,
    "roname" "text" NOT NULL COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_replication_origin" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_replication_origin" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_replication_origin_status" AS
 SELECT "local_id",
    "external_id",
    "remote_lsn",
    "local_lsn"
   FROM "pg_show_replication_origin_status"() "pg_show_replication_origin_status"("local_id", "external_id", "remote_lsn", "local_lsn");


ALTER VIEW "pg_catalog"."pg_replication_origin_status" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_replication_slots" AS
 SELECT "l"."slot_name",
    "l"."plugin",
    "l"."slot_type",
    "l"."datoid",
    "d"."datname" AS "database",
    "l"."temporary",
    "l"."active",
    "l"."active_pid",
    "l"."xmin",
    "l"."catalog_xmin",
    "l"."restart_lsn",
    "l"."confirmed_flush_lsn",
    "l"."wal_status",
    "l"."safe_wal_size",
    "l"."two_phase",
    "l"."inactive_since",
    "l"."conflicting",
    "l"."invalidation_reason",
    "l"."failover",
    "l"."synced"
   FROM ("pg_get_replication_slots"() "l"("slot_name", "plugin", "slot_type", "datoid", "temporary", "active", "active_pid", "xmin", "catalog_xmin", "restart_lsn", "confirmed_flush_lsn", "wal_status", "safe_wal_size", "two_phase", "inactive_since", "conflicting", "invalidation_reason", "failover", "synced")
     LEFT JOIN "pg_database" "d" ON (("l"."datoid" = "d"."oid")));


ALTER VIEW "pg_catalog"."pg_replication_slots" OWNER TO "supabase_admin";

SET default_tablespace = '';


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_rewrite" (
    "oid" "oid" NOT NULL,
    "rulename" "name" NOT NULL,
    "ev_class" "oid" NOT NULL,
    "ev_type" "char" NOT NULL,
    "ev_enabled" "char" NOT NULL,
    "is_instead" boolean NOT NULL,
    "ev_qual" "pg_node_tree" NOT NULL COLLATE "pg_catalog"."C",
    "ev_action" "pg_node_tree" NOT NULL COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_rewrite" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_rewrite" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_roles" AS
 SELECT "pg_authid"."rolname",
    "pg_authid"."rolsuper",
    "pg_authid"."rolinherit",
    "pg_authid"."rolcreaterole",
    "pg_authid"."rolcreatedb",
    "pg_authid"."rolcanlogin",
    "pg_authid"."rolreplication",
    "pg_authid"."rolconnlimit",
    '********'::"text" AS "rolpassword",
    "pg_authid"."rolvaliduntil",
    "pg_authid"."rolbypassrls",
    "s"."setconfig" AS "rolconfig",
    "pg_authid"."oid"
   FROM ("pg_authid"
     LEFT JOIN "pg_db_role_setting" "s" ON ((("pg_authid"."oid" = "s"."setrole") AND ("s"."setdatabase" = (0)::"oid"))));


ALTER VIEW "pg_catalog"."pg_roles" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_rules" AS
 SELECT "n"."nspname" AS "schemaname",
    "c"."relname" AS "tablename",
    "r"."rulename",
    "pg_get_ruledef"("r"."oid") AS "definition"
   FROM (("pg_rewrite" "r"
     JOIN "pg_class" "c" ON (("c"."oid" = "r"."ev_class")))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ("r"."rulename" <> '_RETURN'::"name");


ALTER VIEW "pg_catalog"."pg_rules" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_seclabel" (
    "objoid" "oid" NOT NULL,
    "classoid" "oid" NOT NULL,
    "objsubid" integer NOT NULL,
    "provider" "text" NOT NULL COLLATE "pg_catalog"."C",
    "label" "text" NOT NULL COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_seclabel" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_seclabel" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_seclabels" AS
 SELECT "l"."objoid",
    "l"."classoid",
    "l"."objsubid",
        CASE
            WHEN ("rel"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"])) THEN 'table'::"text"
            WHEN ("rel"."relkind" = 'v'::"char") THEN 'view'::"text"
            WHEN ("rel"."relkind" = 'm'::"char") THEN 'materialized view'::"text"
            WHEN ("rel"."relkind" = 'S'::"char") THEN 'sequence'::"text"
            WHEN ("rel"."relkind" = 'f'::"char") THEN 'foreign table'::"text"
            ELSE NULL::"text"
        END AS "objtype",
    "rel"."relnamespace" AS "objnamespace",
        CASE
            WHEN "pg_table_is_visible"("rel"."oid") THEN "quote_ident"(("rel"."relname")::"text")
            ELSE (("quote_ident"(("nsp"."nspname")::"text") || '.'::"text") || "quote_ident"(("rel"."relname")::"text"))
        END AS "objname",
    "l"."provider",
    "l"."label"
   FROM (("pg_seclabel" "l"
     JOIN "pg_class" "rel" ON ((("l"."classoid" = "rel"."tableoid") AND ("l"."objoid" = "rel"."oid"))))
     JOIN "pg_namespace" "nsp" ON (("rel"."relnamespace" = "nsp"."oid")))
  WHERE ("l"."objsubid" = 0)
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    "l"."objsubid",
    'column'::"text" AS "objtype",
    "rel"."relnamespace" AS "objnamespace",
    ((
        CASE
            WHEN "pg_table_is_visible"("rel"."oid") THEN "quote_ident"(("rel"."relname")::"text")
            ELSE (("quote_ident"(("nsp"."nspname")::"text") || '.'::"text") || "quote_ident"(("rel"."relname")::"text"))
        END || '.'::"text") || ("att"."attname")::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM ((("pg_seclabel" "l"
     JOIN "pg_class" "rel" ON ((("l"."classoid" = "rel"."tableoid") AND ("l"."objoid" = "rel"."oid"))))
     JOIN "pg_attribute" "att" ON ((("rel"."oid" = "att"."attrelid") AND ("l"."objsubid" = "att"."attnum"))))
     JOIN "pg_namespace" "nsp" ON (("rel"."relnamespace" = "nsp"."oid")))
  WHERE ("l"."objsubid" <> 0)
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    "l"."objsubid",
        CASE "pro"."prokind"
            WHEN 'a'::"char" THEN 'aggregate'::"text"
            WHEN 'f'::"char" THEN 'function'::"text"
            WHEN 'p'::"char" THEN 'procedure'::"text"
            WHEN 'w'::"char" THEN 'window'::"text"
            ELSE NULL::"text"
        END AS "objtype",
    "pro"."pronamespace" AS "objnamespace",
    (((
        CASE
            WHEN "pg_function_is_visible"("pro"."oid") THEN "quote_ident"(("pro"."proname")::"text")
            ELSE (("quote_ident"(("nsp"."nspname")::"text") || '.'::"text") || "quote_ident"(("pro"."proname")::"text"))
        END || '('::"text") || "pg_get_function_arguments"("pro"."oid")) || ')'::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM (("pg_seclabel" "l"
     JOIN "pg_proc" "pro" ON ((("l"."classoid" = "pro"."tableoid") AND ("l"."objoid" = "pro"."oid"))))
     JOIN "pg_namespace" "nsp" ON (("pro"."pronamespace" = "nsp"."oid")))
  WHERE ("l"."objsubid" = 0)
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    "l"."objsubid",
        CASE
            WHEN ("typ"."typtype" = 'd'::"char") THEN 'domain'::"text"
            ELSE 'type'::"text"
        END AS "objtype",
    "typ"."typnamespace" AS "objnamespace",
        CASE
            WHEN "pg_type_is_visible"("typ"."oid") THEN "quote_ident"(("typ"."typname")::"text")
            ELSE (("quote_ident"(("nsp"."nspname")::"text") || '.'::"text") || "quote_ident"(("typ"."typname")::"text"))
        END AS "objname",
    "l"."provider",
    "l"."label"
   FROM (("pg_seclabel" "l"
     JOIN "pg_type" "typ" ON ((("l"."classoid" = "typ"."tableoid") AND ("l"."objoid" = "typ"."oid"))))
     JOIN "pg_namespace" "nsp" ON (("typ"."typnamespace" = "nsp"."oid")))
  WHERE ("l"."objsubid" = 0)
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    "l"."objsubid",
    'large object'::"text" AS "objtype",
    NULL::"oid" AS "objnamespace",
    ("l"."objoid")::"text" AS "objname",
    "l"."provider",
    "l"."label"
   FROM ("pg_seclabel" "l"
     JOIN "pg_largeobject_metadata" "lom" ON (("l"."objoid" = "lom"."oid")))
  WHERE (("l"."classoid" = ('"pg_largeobject"'::"regclass")::"oid") AND ("l"."objsubid" = 0))
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    "l"."objsubid",
    'language'::"text" AS "objtype",
    NULL::"oid" AS "objnamespace",
    "quote_ident"(("lan"."lanname")::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM ("pg_seclabel" "l"
     JOIN "pg_language" "lan" ON ((("l"."classoid" = "lan"."tableoid") AND ("l"."objoid" = "lan"."oid"))))
  WHERE ("l"."objsubid" = 0)
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    "l"."objsubid",
    'schema'::"text" AS "objtype",
    "nsp"."oid" AS "objnamespace",
    "quote_ident"(("nsp"."nspname")::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM ("pg_seclabel" "l"
     JOIN "pg_namespace" "nsp" ON ((("l"."classoid" = "nsp"."tableoid") AND ("l"."objoid" = "nsp"."oid"))))
  WHERE ("l"."objsubid" = 0)
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    "l"."objsubid",
    'event trigger'::"text" AS "objtype",
    NULL::"oid" AS "objnamespace",
    "quote_ident"(("evt"."evtname")::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM ("pg_seclabel" "l"
     JOIN "pg_event_trigger" "evt" ON ((("l"."classoid" = "evt"."tableoid") AND ("l"."objoid" = "evt"."oid"))))
  WHERE ("l"."objsubid" = 0)
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    "l"."objsubid",
    'publication'::"text" AS "objtype",
    NULL::"oid" AS "objnamespace",
    "quote_ident"(("p"."pubname")::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM ("pg_seclabel" "l"
     JOIN "pg_publication" "p" ON ((("l"."classoid" = "p"."tableoid") AND ("l"."objoid" = "p"."oid"))))
  WHERE ("l"."objsubid" = 0)
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    0 AS "objsubid",
    'subscription'::"text" AS "objtype",
    NULL::"oid" AS "objnamespace",
    "quote_ident"(("s"."subname")::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM ("pg_shseclabel" "l"
     JOIN "pg_subscription" "s" ON ((("l"."classoid" = "s"."tableoid") AND ("l"."objoid" = "s"."oid"))))
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    0 AS "objsubid",
    'database'::"text" AS "objtype",
    NULL::"oid" AS "objnamespace",
    "quote_ident"(("dat"."datname")::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM ("pg_shseclabel" "l"
     JOIN "pg_database" "dat" ON ((("l"."classoid" = "dat"."tableoid") AND ("l"."objoid" = "dat"."oid"))))
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    0 AS "objsubid",
    'tablespace'::"text" AS "objtype",
    NULL::"oid" AS "objnamespace",
    "quote_ident"(("spc"."spcname")::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM ("pg_shseclabel" "l"
     JOIN "pg_tablespace" "spc" ON ((("l"."classoid" = "spc"."tableoid") AND ("l"."objoid" = "spc"."oid"))))
UNION ALL
 SELECT "l"."objoid",
    "l"."classoid",
    0 AS "objsubid",
    'role'::"text" AS "objtype",
    NULL::"oid" AS "objnamespace",
    "quote_ident"(("rol"."rolname")::"text") AS "objname",
    "l"."provider",
    "l"."label"
   FROM ("pg_shseclabel" "l"
     JOIN "pg_authid" "rol" ON ((("l"."classoid" = "rol"."tableoid") AND ("l"."objoid" = "rol"."oid"))));


ALTER VIEW "pg_catalog"."pg_seclabels" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_sequence" (
    "seqrelid" "oid" NOT NULL,
    "seqtypid" "oid" NOT NULL,
    "seqstart" bigint NOT NULL,
    "seqincrement" bigint NOT NULL,
    "seqmax" bigint NOT NULL,
    "seqmin" bigint NOT NULL,
    "seqcache" bigint NOT NULL,
    "seqcycle" boolean NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_sequence" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_sequence" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_sequences" AS
 SELECT "n"."nspname" AS "schemaname",
    "c"."relname" AS "sequencename",
    "pg_get_userbyid"("c"."relowner") AS "sequenceowner",
    ("s"."seqtypid")::"regtype" AS "data_type",
    "s"."seqstart" AS "start_value",
    "s"."seqmin" AS "min_value",
    "s"."seqmax" AS "max_value",
    "s"."seqincrement" AS "increment_by",
    "s"."seqcycle" AS "cycle",
    "s"."seqcache" AS "cache_size",
        CASE
            WHEN "has_sequence_privilege"("c"."oid", 'SELECT,USAGE'::"text") THEN "pg_sequence_last_value"(("c"."oid")::"regclass")
            ELSE NULL::bigint
        END AS "last_value"
   FROM (("pg_sequence" "s"
     JOIN "pg_class" "c" ON (("c"."oid" = "s"."seqrelid")))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ((NOT "pg_is_other_temp_schema"("n"."oid")) AND ("c"."relkind" = 'S'::"char"));


ALTER VIEW "pg_catalog"."pg_sequences" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_settings" AS
 SELECT "name",
    "setting",
    "unit",
    "category",
    "short_desc",
    "extra_desc",
    "context",
    "vartype",
    "source",
    "min_val",
    "max_val",
    "enumvals",
    "boot_val",
    "reset_val",
    "sourcefile",
    "sourceline",
    "pending_restart"
   FROM "pg_show_all_settings"() "a"("name", "setting", "unit", "category", "short_desc", "extra_desc", "context", "vartype", "source", "min_val", "max_val", "enumvals", "boot_val", "reset_val", "sourcefile", "sourceline", "pending_restart");


ALTER VIEW "pg_catalog"."pg_settings" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_shadow" AS
 SELECT "pg_authid"."rolname" AS "usename",
    "pg_authid"."oid" AS "usesysid",
    "pg_authid"."rolcreatedb" AS "usecreatedb",
    "pg_authid"."rolsuper" AS "usesuper",
    "pg_authid"."rolreplication" AS "userepl",
    "pg_authid"."rolbypassrls" AS "usebypassrls",
    "pg_authid"."rolpassword" AS "passwd",
    "pg_authid"."rolvaliduntil" AS "valuntil",
    "s"."setconfig" AS "useconfig"
   FROM ("pg_authid"
     LEFT JOIN "pg_db_role_setting" "s" ON ((("pg_authid"."oid" = "s"."setrole") AND ("s"."setdatabase" = (0)::"oid"))))
  WHERE "pg_authid"."rolcanlogin";


ALTER VIEW "pg_catalog"."pg_shadow" OWNER TO "supabase_admin";

SET default_tablespace = "pg_global";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_shdepend" (
    "dbid" "oid" NOT NULL,
    "classid" "oid" NOT NULL,
    "objid" "oid" NOT NULL,
    "objsubid" integer NOT NULL,
    "refclassid" "oid" NOT NULL,
    "refobjid" "oid" NOT NULL,
    "deptype" "char" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_shdepend" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_shdepend" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_shdescription" (
    "objoid" "oid" NOT NULL,
    "classoid" "oid" NOT NULL,
    "description" "text" NOT NULL COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_shdescription" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_shdescription" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_shmem_allocations" AS
 SELECT "name",
    "off",
    "size",
    "allocated_size"
   FROM "pg_get_shmem_allocations"() "pg_get_shmem_allocations"("name", "off", "size", "allocated_size");


ALTER VIEW "pg_catalog"."pg_shmem_allocations" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_shseclabel" (
    "objoid" "oid" NOT NULL,
    "classoid" "oid" NOT NULL,
    "provider" "text" NOT NULL COLLATE "pg_catalog"."C",
    "label" "text" NOT NULL COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_shseclabel" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_shseclabel" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_activity" AS
 SELECT "s"."datid",
    "d"."datname",
    "s"."pid",
    "s"."leader_pid",
    "s"."usesysid",
    "u"."rolname" AS "usename",
    "s"."application_name",
    "s"."client_addr",
    "s"."client_hostname",
    "s"."client_port",
    "s"."backend_start",
    "s"."xact_start",
    "s"."query_start",
    "s"."state_change",
    "s"."wait_event_type",
    "s"."wait_event",
    "s"."state",
    "s"."backend_xid",
    "s"."backend_xmin",
    "s"."query_id",
    "s"."query",
    "s"."backend_type"
   FROM (("pg_stat_get_activity"(NULL::integer) "s"("datid", "pid", "usesysid", "application_name", "state", "query", "wait_event_type", "wait_event", "xact_start", "query_start", "backend_start", "state_change", "client_addr", "client_hostname", "client_port", "backend_xid", "backend_xmin", "backend_type", "ssl", "sslversion", "sslcipher", "sslbits", "ssl_client_dn", "ssl_client_serial", "ssl_issuer_dn", "gss_auth", "gss_princ", "gss_enc", "gss_delegation", "leader_pid", "query_id")
     LEFT JOIN "pg_database" "d" ON (("s"."datid" = "d"."oid")))
     LEFT JOIN "pg_authid" "u" ON (("s"."usesysid" = "u"."oid")));


ALTER VIEW "pg_catalog"."pg_stat_activity" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_all_indexes" AS
 SELECT "c"."oid" AS "relid",
    "i"."oid" AS "indexrelid",
    "n"."nspname" AS "schemaname",
    "c"."relname",
    "i"."relname" AS "indexrelname",
    "pg_stat_get_numscans"("i"."oid") AS "idx_scan",
    "pg_stat_get_lastscan"("i"."oid") AS "last_idx_scan",
    "pg_stat_get_tuples_returned"("i"."oid") AS "idx_tup_read",
    "pg_stat_get_tuples_fetched"("i"."oid") AS "idx_tup_fetch"
   FROM ((("pg_class" "c"
     JOIN "pg_index" "x" ON (("c"."oid" = "x"."indrelid")))
     JOIN "pg_class" "i" ON (("i"."oid" = "x"."indexrelid")))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ("c"."relkind" = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]));


ALTER VIEW "pg_catalog"."pg_stat_all_indexes" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_all_tables" AS
 SELECT "c"."oid" AS "relid",
    "n"."nspname" AS "schemaname",
    "c"."relname",
    "pg_stat_get_numscans"("c"."oid") AS "seq_scan",
    "pg_stat_get_lastscan"("c"."oid") AS "last_seq_scan",
    "pg_stat_get_tuples_returned"("c"."oid") AS "seq_tup_read",
    ("sum"("pg_stat_get_numscans"("i"."indexrelid")))::bigint AS "idx_scan",
    "max"("pg_stat_get_lastscan"("i"."indexrelid")) AS "last_idx_scan",
    (("sum"("pg_stat_get_tuples_fetched"("i"."indexrelid")))::bigint + "pg_stat_get_tuples_fetched"("c"."oid")) AS "idx_tup_fetch",
    "pg_stat_get_tuples_inserted"("c"."oid") AS "n_tup_ins",
    "pg_stat_get_tuples_updated"("c"."oid") AS "n_tup_upd",
    "pg_stat_get_tuples_deleted"("c"."oid") AS "n_tup_del",
    "pg_stat_get_tuples_hot_updated"("c"."oid") AS "n_tup_hot_upd",
    "pg_stat_get_tuples_newpage_updated"("c"."oid") AS "n_tup_newpage_upd",
    "pg_stat_get_live_tuples"("c"."oid") AS "n_live_tup",
    "pg_stat_get_dead_tuples"("c"."oid") AS "n_dead_tup",
    "pg_stat_get_mod_since_analyze"("c"."oid") AS "n_mod_since_analyze",
    "pg_stat_get_ins_since_vacuum"("c"."oid") AS "n_ins_since_vacuum",
    "pg_stat_get_last_vacuum_time"("c"."oid") AS "last_vacuum",
    "pg_stat_get_last_autovacuum_time"("c"."oid") AS "last_autovacuum",
    "pg_stat_get_last_analyze_time"("c"."oid") AS "last_analyze",
    "pg_stat_get_last_autoanalyze_time"("c"."oid") AS "last_autoanalyze",
    "pg_stat_get_vacuum_count"("c"."oid") AS "vacuum_count",
    "pg_stat_get_autovacuum_count"("c"."oid") AS "autovacuum_count",
    "pg_stat_get_analyze_count"("c"."oid") AS "analyze_count",
    "pg_stat_get_autoanalyze_count"("c"."oid") AS "autoanalyze_count"
   FROM (("pg_class" "c"
     LEFT JOIN "pg_index" "i" ON (("c"."oid" = "i"."indrelid")))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ("c"."relkind" = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char", 'p'::"char"]))
  GROUP BY "c"."oid", "n"."nspname", "c"."relname";


ALTER VIEW "pg_catalog"."pg_stat_all_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_archiver" AS
 SELECT "archived_count",
    "last_archived_wal",
    "last_archived_time",
    "failed_count",
    "last_failed_wal",
    "last_failed_time",
    "stats_reset"
   FROM "pg_stat_get_archiver"() "s"("archived_count", "last_archived_wal", "last_archived_time", "failed_count", "last_failed_wal", "last_failed_time", "stats_reset");


ALTER VIEW "pg_catalog"."pg_stat_archiver" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_bgwriter" AS
 SELECT "pg_stat_get_bgwriter_buf_written_clean"() AS "buffers_clean",
    "pg_stat_get_bgwriter_maxwritten_clean"() AS "maxwritten_clean",
    "pg_stat_get_buf_alloc"() AS "buffers_alloc",
    "pg_stat_get_bgwriter_stat_reset_time"() AS "stats_reset";


ALTER VIEW "pg_catalog"."pg_stat_bgwriter" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_checkpointer" AS
 SELECT "pg_stat_get_checkpointer_num_timed"() AS "num_timed",
    "pg_stat_get_checkpointer_num_requested"() AS "num_requested",
    "pg_stat_get_checkpointer_restartpoints_timed"() AS "restartpoints_timed",
    "pg_stat_get_checkpointer_restartpoints_requested"() AS "restartpoints_req",
    "pg_stat_get_checkpointer_restartpoints_performed"() AS "restartpoints_done",
    "pg_stat_get_checkpointer_write_time"() AS "write_time",
    "pg_stat_get_checkpointer_sync_time"() AS "sync_time",
    "pg_stat_get_checkpointer_buffers_written"() AS "buffers_written",
    "pg_stat_get_checkpointer_stat_reset_time"() AS "stats_reset";


ALTER VIEW "pg_catalog"."pg_stat_checkpointer" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_database" AS
 SELECT "oid" AS "datid",
    "datname",
        CASE
            WHEN ("oid" = (0)::"oid") THEN 0
            ELSE "pg_stat_get_db_numbackends"("oid")
        END AS "numbackends",
    "pg_stat_get_db_xact_commit"("oid") AS "xact_commit",
    "pg_stat_get_db_xact_rollback"("oid") AS "xact_rollback",
    ("pg_stat_get_db_blocks_fetched"("oid") - "pg_stat_get_db_blocks_hit"("oid")) AS "blks_read",
    "pg_stat_get_db_blocks_hit"("oid") AS "blks_hit",
    "pg_stat_get_db_tuples_returned"("oid") AS "tup_returned",
    "pg_stat_get_db_tuples_fetched"("oid") AS "tup_fetched",
    "pg_stat_get_db_tuples_inserted"("oid") AS "tup_inserted",
    "pg_stat_get_db_tuples_updated"("oid") AS "tup_updated",
    "pg_stat_get_db_tuples_deleted"("oid") AS "tup_deleted",
    "pg_stat_get_db_conflict_all"("oid") AS "conflicts",
    "pg_stat_get_db_temp_files"("oid") AS "temp_files",
    "pg_stat_get_db_temp_bytes"("oid") AS "temp_bytes",
    "pg_stat_get_db_deadlocks"("oid") AS "deadlocks",
    "pg_stat_get_db_checksum_failures"("oid") AS "checksum_failures",
    "pg_stat_get_db_checksum_last_failure"("oid") AS "checksum_last_failure",
    "pg_stat_get_db_blk_read_time"("oid") AS "blk_read_time",
    "pg_stat_get_db_blk_write_time"("oid") AS "blk_write_time",
    "pg_stat_get_db_session_time"("oid") AS "session_time",
    "pg_stat_get_db_active_time"("oid") AS "active_time",
    "pg_stat_get_db_idle_in_transaction_time"("oid") AS "idle_in_transaction_time",
    "pg_stat_get_db_sessions"("oid") AS "sessions",
    "pg_stat_get_db_sessions_abandoned"("oid") AS "sessions_abandoned",
    "pg_stat_get_db_sessions_fatal"("oid") AS "sessions_fatal",
    "pg_stat_get_db_sessions_killed"("oid") AS "sessions_killed",
    "pg_stat_get_db_stat_reset_time"("oid") AS "stats_reset"
   FROM ( SELECT 0 AS "oid",
            NULL::"name" AS "datname"
        UNION ALL
         SELECT "pg_database"."oid",
            "pg_database"."datname"
           FROM "pg_database") "d";


ALTER VIEW "pg_catalog"."pg_stat_database" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_database_conflicts" AS
 SELECT "oid" AS "datid",
    "datname",
    "pg_stat_get_db_conflict_tablespace"("oid") AS "confl_tablespace",
    "pg_stat_get_db_conflict_lock"("oid") AS "confl_lock",
    "pg_stat_get_db_conflict_snapshot"("oid") AS "confl_snapshot",
    "pg_stat_get_db_conflict_bufferpin"("oid") AS "confl_bufferpin",
    "pg_stat_get_db_conflict_startup_deadlock"("oid") AS "confl_deadlock",
    "pg_stat_get_db_conflict_logicalslot"("oid") AS "confl_active_logicalslot"
   FROM "pg_database" "d";


ALTER VIEW "pg_catalog"."pg_stat_database_conflicts" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_gssapi" AS
 SELECT "pid",
    "gss_auth" AS "gss_authenticated",
    "gss_princ" AS "principal",
    "gss_enc" AS "encrypted",
    "gss_delegation" AS "credentials_delegated"
   FROM "pg_stat_get_activity"(NULL::integer) "s"("datid", "pid", "usesysid", "application_name", "state", "query", "wait_event_type", "wait_event", "xact_start", "query_start", "backend_start", "state_change", "client_addr", "client_hostname", "client_port", "backend_xid", "backend_xmin", "backend_type", "ssl", "sslversion", "sslcipher", "sslbits", "ssl_client_dn", "ssl_client_serial", "ssl_issuer_dn", "gss_auth", "gss_princ", "gss_enc", "gss_delegation", "leader_pid", "query_id")
  WHERE ("client_port" IS NOT NULL);


ALTER VIEW "pg_catalog"."pg_stat_gssapi" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_io" AS
 SELECT "backend_type",
    "object",
    "context",
    "reads",
    "read_time",
    "writes",
    "write_time",
    "writebacks",
    "writeback_time",
    "extends",
    "extend_time",
    "op_bytes",
    "hits",
    "evictions",
    "reuses",
    "fsyncs",
    "fsync_time",
    "stats_reset"
   FROM "pg_stat_get_io"() "b"("backend_type", "object", "context", "reads", "read_time", "writes", "write_time", "writebacks", "writeback_time", "extends", "extend_time", "op_bytes", "hits", "evictions", "reuses", "fsyncs", "fsync_time", "stats_reset");


ALTER VIEW "pg_catalog"."pg_stat_io" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_progress_analyze" AS
 SELECT "s"."pid",
    "s"."datid",
    "d"."datname",
    "s"."relid",
        CASE "s"."param1"
            WHEN 0 THEN 'initializing'::"text"
            WHEN 1 THEN 'acquiring sample rows'::"text"
            WHEN 2 THEN 'acquiring inherited sample rows'::"text"
            WHEN 3 THEN 'computing statistics'::"text"
            WHEN 4 THEN 'computing extended statistics'::"text"
            WHEN 5 THEN 'finalizing analyze'::"text"
            ELSE NULL::"text"
        END AS "phase",
    "s"."param2" AS "sample_blks_total",
    "s"."param3" AS "sample_blks_scanned",
    "s"."param4" AS "ext_stats_total",
    "s"."param5" AS "ext_stats_computed",
    "s"."param6" AS "child_tables_total",
    "s"."param7" AS "child_tables_done",
    ("s"."param8")::"oid" AS "current_child_table_relid"
   FROM ("pg_stat_get_progress_info"('ANALYZE'::"text") "s"("pid", "datid", "relid", "param1", "param2", "param3", "param4", "param5", "param6", "param7", "param8", "param9", "param10", "param11", "param12", "param13", "param14", "param15", "param16", "param17", "param18", "param19", "param20")
     LEFT JOIN "pg_database" "d" ON (("s"."datid" = "d"."oid")));


ALTER VIEW "pg_catalog"."pg_stat_progress_analyze" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_progress_basebackup" AS
 SELECT "pid",
        CASE "param1"
            WHEN 0 THEN 'initializing'::"text"
            WHEN 1 THEN 'waiting for checkpoint to finish'::"text"
            WHEN 2 THEN 'estimating backup size'::"text"
            WHEN 3 THEN 'streaming database files'::"text"
            WHEN 4 THEN 'waiting for wal archiving to finish'::"text"
            WHEN 5 THEN 'transferring wal files'::"text"
            ELSE NULL::"text"
        END AS "phase",
        CASE "param2"
            WHEN '-1'::integer THEN NULL::bigint
            ELSE "param2"
        END AS "backup_total",
    "param3" AS "backup_streamed",
    "param4" AS "tablespaces_total",
    "param5" AS "tablespaces_streamed"
   FROM "pg_stat_get_progress_info"('BASEBACKUP'::"text") "s"("pid", "datid", "relid", "param1", "param2", "param3", "param4", "param5", "param6", "param7", "param8", "param9", "param10", "param11", "param12", "param13", "param14", "param15", "param16", "param17", "param18", "param19", "param20");


ALTER VIEW "pg_catalog"."pg_stat_progress_basebackup" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_progress_cluster" AS
 SELECT "s"."pid",
    "s"."datid",
    "d"."datname",
    "s"."relid",
        CASE "s"."param1"
            WHEN 1 THEN 'CLUSTER'::"text"
            WHEN 2 THEN 'VACUUM FULL'::"text"
            ELSE NULL::"text"
        END AS "command",
        CASE "s"."param2"
            WHEN 0 THEN 'initializing'::"text"
            WHEN 1 THEN 'seq scanning heap'::"text"
            WHEN 2 THEN 'index scanning heap'::"text"
            WHEN 3 THEN 'sorting tuples'::"text"
            WHEN 4 THEN 'writing new heap'::"text"
            WHEN 5 THEN 'swapping relation files'::"text"
            WHEN 6 THEN 'rebuilding index'::"text"
            WHEN 7 THEN 'performing final cleanup'::"text"
            ELSE NULL::"text"
        END AS "phase",
    ("s"."param3")::"oid" AS "cluster_index_relid",
    "s"."param4" AS "heap_tuples_scanned",
    "s"."param5" AS "heap_tuples_written",
    "s"."param6" AS "heap_blks_total",
    "s"."param7" AS "heap_blks_scanned",
    "s"."param8" AS "index_rebuild_count"
   FROM ("pg_stat_get_progress_info"('CLUSTER'::"text") "s"("pid", "datid", "relid", "param1", "param2", "param3", "param4", "param5", "param6", "param7", "param8", "param9", "param10", "param11", "param12", "param13", "param14", "param15", "param16", "param17", "param18", "param19", "param20")
     LEFT JOIN "pg_database" "d" ON (("s"."datid" = "d"."oid")));


ALTER VIEW "pg_catalog"."pg_stat_progress_cluster" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_progress_copy" AS
 SELECT "s"."pid",
    "s"."datid",
    "d"."datname",
    "s"."relid",
        CASE "s"."param5"
            WHEN 1 THEN 'COPY FROM'::"text"
            WHEN 2 THEN 'COPY TO'::"text"
            ELSE NULL::"text"
        END AS "command",
        CASE "s"."param6"
            WHEN 1 THEN 'FILE'::"text"
            WHEN 2 THEN 'PROGRAM'::"text"
            WHEN 3 THEN 'PIPE'::"text"
            WHEN 4 THEN 'CALLBACK'::"text"
            ELSE NULL::"text"
        END AS "type",
    "s"."param1" AS "bytes_processed",
    "s"."param2" AS "bytes_total",
    "s"."param3" AS "tuples_processed",
    "s"."param4" AS "tuples_excluded",
    "s"."param7" AS "tuples_skipped"
   FROM ("pg_stat_get_progress_info"('COPY'::"text") "s"("pid", "datid", "relid", "param1", "param2", "param3", "param4", "param5", "param6", "param7", "param8", "param9", "param10", "param11", "param12", "param13", "param14", "param15", "param16", "param17", "param18", "param19", "param20")
     LEFT JOIN "pg_database" "d" ON (("s"."datid" = "d"."oid")));


ALTER VIEW "pg_catalog"."pg_stat_progress_copy" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_progress_create_index" AS
 SELECT "s"."pid",
    "s"."datid",
    "d"."datname",
    "s"."relid",
    ("s"."param7")::"oid" AS "index_relid",
        CASE "s"."param1"
            WHEN 1 THEN 'CREATE INDEX'::"text"
            WHEN 2 THEN 'CREATE INDEX CONCURRENTLY'::"text"
            WHEN 3 THEN 'REINDEX'::"text"
            WHEN 4 THEN 'REINDEX CONCURRENTLY'::"text"
            ELSE NULL::"text"
        END AS "command",
        CASE "s"."param10"
            WHEN 0 THEN 'initializing'::"text"
            WHEN 1 THEN 'waiting for writers before build'::"text"
            WHEN 2 THEN ('building index'::"text" || COALESCE((': '::"text" || "pg_indexam_progress_phasename"(("s"."param9")::"oid", "s"."param11")), ''::"text"))
            WHEN 3 THEN 'waiting for writers before validation'::"text"
            WHEN 4 THEN 'index validation: scanning index'::"text"
            WHEN 5 THEN 'index validation: sorting tuples'::"text"
            WHEN 6 THEN 'index validation: scanning table'::"text"
            WHEN 7 THEN 'waiting for old snapshots'::"text"
            WHEN 8 THEN 'waiting for readers before marking dead'::"text"
            WHEN 9 THEN 'waiting for readers before dropping'::"text"
            ELSE NULL::"text"
        END AS "phase",
    "s"."param4" AS "lockers_total",
    "s"."param5" AS "lockers_done",
    "s"."param6" AS "current_locker_pid",
    "s"."param16" AS "blocks_total",
    "s"."param17" AS "blocks_done",
    "s"."param12" AS "tuples_total",
    "s"."param13" AS "tuples_done",
    "s"."param14" AS "partitions_total",
    "s"."param15" AS "partitions_done"
   FROM ("pg_stat_get_progress_info"('CREATE INDEX'::"text") "s"("pid", "datid", "relid", "param1", "param2", "param3", "param4", "param5", "param6", "param7", "param8", "param9", "param10", "param11", "param12", "param13", "param14", "param15", "param16", "param17", "param18", "param19", "param20")
     LEFT JOIN "pg_database" "d" ON (("s"."datid" = "d"."oid")));


ALTER VIEW "pg_catalog"."pg_stat_progress_create_index" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_progress_vacuum" AS
 SELECT "s"."pid",
    "s"."datid",
    "d"."datname",
    "s"."relid",
        CASE "s"."param1"
            WHEN 0 THEN 'initializing'::"text"
            WHEN 1 THEN 'scanning heap'::"text"
            WHEN 2 THEN 'vacuuming indexes'::"text"
            WHEN 3 THEN 'vacuuming heap'::"text"
            WHEN 4 THEN 'cleaning up indexes'::"text"
            WHEN 5 THEN 'truncating heap'::"text"
            WHEN 6 THEN 'performing final cleanup'::"text"
            ELSE NULL::"text"
        END AS "phase",
    "s"."param2" AS "heap_blks_total",
    "s"."param3" AS "heap_blks_scanned",
    "s"."param4" AS "heap_blks_vacuumed",
    "s"."param5" AS "index_vacuum_count",
    "s"."param6" AS "max_dead_tuple_bytes",
    "s"."param7" AS "dead_tuple_bytes",
    "s"."param8" AS "num_dead_item_ids",
    "s"."param9" AS "indexes_total",
    "s"."param10" AS "indexes_processed"
   FROM ("pg_stat_get_progress_info"('VACUUM'::"text") "s"("pid", "datid", "relid", "param1", "param2", "param3", "param4", "param5", "param6", "param7", "param8", "param9", "param10", "param11", "param12", "param13", "param14", "param15", "param16", "param17", "param18", "param19", "param20")
     LEFT JOIN "pg_database" "d" ON (("s"."datid" = "d"."oid")));


ALTER VIEW "pg_catalog"."pg_stat_progress_vacuum" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_recovery_prefetch" AS
 SELECT "stats_reset",
    "prefetch",
    "hit",
    "skip_init",
    "skip_new",
    "skip_fpw",
    "skip_rep",
    "wal_distance",
    "block_distance",
    "io_depth"
   FROM "pg_stat_get_recovery_prefetch"() "s"("stats_reset", "prefetch", "hit", "skip_init", "skip_new", "skip_fpw", "skip_rep", "wal_distance", "block_distance", "io_depth");


ALTER VIEW "pg_catalog"."pg_stat_recovery_prefetch" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_replication" AS
 SELECT "s"."pid",
    "s"."usesysid",
    "u"."rolname" AS "usename",
    "s"."application_name",
    "s"."client_addr",
    "s"."client_hostname",
    "s"."client_port",
    "s"."backend_start",
    "s"."backend_xmin",
    "w"."state",
    "w"."sent_lsn",
    "w"."write_lsn",
    "w"."flush_lsn",
    "w"."replay_lsn",
    "w"."write_lag",
    "w"."flush_lag",
    "w"."replay_lag",
    "w"."sync_priority",
    "w"."sync_state",
    "w"."reply_time"
   FROM (("pg_stat_get_activity"(NULL::integer) "s"("datid", "pid", "usesysid", "application_name", "state", "query", "wait_event_type", "wait_event", "xact_start", "query_start", "backend_start", "state_change", "client_addr", "client_hostname", "client_port", "backend_xid", "backend_xmin", "backend_type", "ssl", "sslversion", "sslcipher", "sslbits", "ssl_client_dn", "ssl_client_serial", "ssl_issuer_dn", "gss_auth", "gss_princ", "gss_enc", "gss_delegation", "leader_pid", "query_id")
     JOIN "pg_stat_get_wal_senders"() "w"("pid", "state", "sent_lsn", "write_lsn", "flush_lsn", "replay_lsn", "write_lag", "flush_lag", "replay_lag", "sync_priority", "sync_state", "reply_time") ON (("s"."pid" = "w"."pid")))
     LEFT JOIN "pg_authid" "u" ON (("s"."usesysid" = "u"."oid")));


ALTER VIEW "pg_catalog"."pg_stat_replication" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_replication_slots" AS
 SELECT "s"."slot_name",
    "s"."spill_txns",
    "s"."spill_count",
    "s"."spill_bytes",
    "s"."stream_txns",
    "s"."stream_count",
    "s"."stream_bytes",
    "s"."total_txns",
    "s"."total_bytes",
    "s"."stats_reset"
   FROM "pg_replication_slots" "r",
    LATERAL "pg_stat_get_replication_slot"(("r"."slot_name")::"text") "s"("slot_name", "spill_txns", "spill_count", "spill_bytes", "stream_txns", "stream_count", "stream_bytes", "total_txns", "total_bytes", "stats_reset")
  WHERE ("r"."datoid" IS NOT NULL);


ALTER VIEW "pg_catalog"."pg_stat_replication_slots" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_slru" AS
 SELECT "name",
    "blks_zeroed",
    "blks_hit",
    "blks_read",
    "blks_written",
    "blks_exists",
    "flushes",
    "truncates",
    "stats_reset"
   FROM "pg_stat_get_slru"() "s"("name", "blks_zeroed", "blks_hit", "blks_read", "blks_written", "blks_exists", "flushes", "truncates", "stats_reset");


ALTER VIEW "pg_catalog"."pg_stat_slru" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_ssl" AS
 SELECT "pid",
    "ssl",
    "sslversion" AS "version",
    "sslcipher" AS "cipher",
    "sslbits" AS "bits",
    "ssl_client_dn" AS "client_dn",
    "ssl_client_serial" AS "client_serial",
    "ssl_issuer_dn" AS "issuer_dn"
   FROM "pg_stat_get_activity"(NULL::integer) "s"("datid", "pid", "usesysid", "application_name", "state", "query", "wait_event_type", "wait_event", "xact_start", "query_start", "backend_start", "state_change", "client_addr", "client_hostname", "client_port", "backend_xid", "backend_xmin", "backend_type", "ssl", "sslversion", "sslcipher", "sslbits", "ssl_client_dn", "ssl_client_serial", "ssl_issuer_dn", "gss_auth", "gss_princ", "gss_enc", "gss_delegation", "leader_pid", "query_id")
  WHERE ("client_port" IS NOT NULL);


ALTER VIEW "pg_catalog"."pg_stat_ssl" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_subscription" AS
 SELECT "su"."oid" AS "subid",
    "su"."subname",
    "st"."worker_type",
    "st"."pid",
    "st"."leader_pid",
    "st"."relid",
    "st"."received_lsn",
    "st"."last_msg_send_time",
    "st"."last_msg_receipt_time",
    "st"."latest_end_lsn",
    "st"."latest_end_time"
   FROM ("pg_subscription" "su"
     LEFT JOIN "pg_stat_get_subscription"(NULL::"oid") "st"("subid", "relid", "pid", "leader_pid", "received_lsn", "last_msg_send_time", "last_msg_receipt_time", "latest_end_lsn", "latest_end_time", "worker_type") ON (("st"."subid" = "su"."oid")));


ALTER VIEW "pg_catalog"."pg_stat_subscription" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_subscription_stats" AS
 SELECT "ss"."subid",
    "s"."subname",
    "ss"."apply_error_count",
    "ss"."sync_error_count",
    "ss"."stats_reset"
   FROM "pg_subscription" "s",
    LATERAL "pg_stat_get_subscription_stats"("s"."oid") "ss"("subid", "apply_error_count", "sync_error_count", "stats_reset");


ALTER VIEW "pg_catalog"."pg_stat_subscription_stats" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_sys_indexes" AS
 SELECT "relid",
    "indexrelid",
    "schemaname",
    "relname",
    "indexrelname",
    "idx_scan",
    "last_idx_scan",
    "idx_tup_read",
    "idx_tup_fetch"
   FROM "pg_stat_all_indexes"
  WHERE (("schemaname" = ANY (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) OR ("schemaname" ~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_stat_sys_indexes" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_sys_tables" AS
 SELECT "relid",
    "schemaname",
    "relname",
    "seq_scan",
    "last_seq_scan",
    "seq_tup_read",
    "idx_scan",
    "last_idx_scan",
    "idx_tup_fetch",
    "n_tup_ins",
    "n_tup_upd",
    "n_tup_del",
    "n_tup_hot_upd",
    "n_tup_newpage_upd",
    "n_live_tup",
    "n_dead_tup",
    "n_mod_since_analyze",
    "n_ins_since_vacuum",
    "last_vacuum",
    "last_autovacuum",
    "last_analyze",
    "last_autoanalyze",
    "vacuum_count",
    "autovacuum_count",
    "analyze_count",
    "autoanalyze_count"
   FROM "pg_stat_all_tables"
  WHERE (("schemaname" = ANY (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) OR ("schemaname" ~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_stat_sys_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_user_functions" AS
 SELECT "p"."oid" AS "funcid",
    "n"."nspname" AS "schemaname",
    "p"."proname" AS "funcname",
    "pg_stat_get_function_calls"("p"."oid") AS "calls",
    "pg_stat_get_function_total_time"("p"."oid") AS "total_time",
    "pg_stat_get_function_self_time"("p"."oid") AS "self_time"
   FROM ("pg_proc" "p"
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "p"."pronamespace")))
  WHERE (("p"."prolang" <> (12)::"oid") AND ("pg_stat_get_function_calls"("p"."oid") IS NOT NULL));


ALTER VIEW "pg_catalog"."pg_stat_user_functions" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_user_indexes" AS
 SELECT "relid",
    "indexrelid",
    "schemaname",
    "relname",
    "indexrelname",
    "idx_scan",
    "last_idx_scan",
    "idx_tup_read",
    "idx_tup_fetch"
   FROM "pg_stat_all_indexes"
  WHERE (("schemaname" <> ALL (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) AND ("schemaname" !~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_stat_user_indexes" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_user_tables" AS
 SELECT "relid",
    "schemaname",
    "relname",
    "seq_scan",
    "last_seq_scan",
    "seq_tup_read",
    "idx_scan",
    "last_idx_scan",
    "idx_tup_fetch",
    "n_tup_ins",
    "n_tup_upd",
    "n_tup_del",
    "n_tup_hot_upd",
    "n_tup_newpage_upd",
    "n_live_tup",
    "n_dead_tup",
    "n_mod_since_analyze",
    "n_ins_since_vacuum",
    "last_vacuum",
    "last_autovacuum",
    "last_analyze",
    "last_autoanalyze",
    "vacuum_count",
    "autovacuum_count",
    "analyze_count",
    "autoanalyze_count"
   FROM "pg_stat_all_tables"
  WHERE (("schemaname" <> ALL (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) AND ("schemaname" !~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_stat_user_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_wal" AS
 SELECT "wal_records",
    "wal_fpi",
    "wal_bytes",
    "wal_buffers_full",
    "wal_write",
    "wal_sync",
    "wal_write_time",
    "wal_sync_time",
    "stats_reset"
   FROM "pg_stat_get_wal"() "w"("wal_records", "wal_fpi", "wal_bytes", "wal_buffers_full", "wal_write", "wal_sync", "wal_write_time", "wal_sync_time", "stats_reset");


ALTER VIEW "pg_catalog"."pg_stat_wal" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_wal_receiver" AS
 SELECT "pid",
    "status",
    "receive_start_lsn",
    "receive_start_tli",
    "written_lsn",
    "flushed_lsn",
    "received_tli",
    "last_msg_send_time",
    "last_msg_receipt_time",
    "latest_end_lsn",
    "latest_end_time",
    "slot_name",
    "sender_host",
    "sender_port",
    "conninfo"
   FROM "pg_stat_get_wal_receiver"() "s"("pid", "status", "receive_start_lsn", "receive_start_tli", "written_lsn", "flushed_lsn", "received_tli", "last_msg_send_time", "last_msg_receipt_time", "latest_end_lsn", "latest_end_time", "slot_name", "sender_host", "sender_port", "conninfo")
  WHERE ("pid" IS NOT NULL);


ALTER VIEW "pg_catalog"."pg_stat_wal_receiver" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_xact_all_tables" AS
 SELECT "c"."oid" AS "relid",
    "n"."nspname" AS "schemaname",
    "c"."relname",
    "pg_stat_get_xact_numscans"("c"."oid") AS "seq_scan",
    "pg_stat_get_xact_tuples_returned"("c"."oid") AS "seq_tup_read",
    ("sum"("pg_stat_get_xact_numscans"("i"."indexrelid")))::bigint AS "idx_scan",
    (("sum"("pg_stat_get_xact_tuples_fetched"("i"."indexrelid")))::bigint + "pg_stat_get_xact_tuples_fetched"("c"."oid")) AS "idx_tup_fetch",
    "pg_stat_get_xact_tuples_inserted"("c"."oid") AS "n_tup_ins",
    "pg_stat_get_xact_tuples_updated"("c"."oid") AS "n_tup_upd",
    "pg_stat_get_xact_tuples_deleted"("c"."oid") AS "n_tup_del",
    "pg_stat_get_xact_tuples_hot_updated"("c"."oid") AS "n_tup_hot_upd",
    "pg_stat_get_xact_tuples_newpage_updated"("c"."oid") AS "n_tup_newpage_upd"
   FROM (("pg_class" "c"
     LEFT JOIN "pg_index" "i" ON (("c"."oid" = "i"."indrelid")))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ("c"."relkind" = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char", 'p'::"char"]))
  GROUP BY "c"."oid", "n"."nspname", "c"."relname";


ALTER VIEW "pg_catalog"."pg_stat_xact_all_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_xact_sys_tables" AS
 SELECT "relid",
    "schemaname",
    "relname",
    "seq_scan",
    "seq_tup_read",
    "idx_scan",
    "idx_tup_fetch",
    "n_tup_ins",
    "n_tup_upd",
    "n_tup_del",
    "n_tup_hot_upd",
    "n_tup_newpage_upd"
   FROM "pg_stat_xact_all_tables"
  WHERE (("schemaname" = ANY (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) OR ("schemaname" ~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_stat_xact_sys_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_xact_user_functions" AS
 SELECT "p"."oid" AS "funcid",
    "n"."nspname" AS "schemaname",
    "p"."proname" AS "funcname",
    "pg_stat_get_xact_function_calls"("p"."oid") AS "calls",
    "pg_stat_get_xact_function_total_time"("p"."oid") AS "total_time",
    "pg_stat_get_xact_function_self_time"("p"."oid") AS "self_time"
   FROM ("pg_proc" "p"
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "p"."pronamespace")))
  WHERE (("p"."prolang" <> (12)::"oid") AND ("pg_stat_get_xact_function_calls"("p"."oid") IS NOT NULL));


ALTER VIEW "pg_catalog"."pg_stat_xact_user_functions" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stat_xact_user_tables" AS
 SELECT "relid",
    "schemaname",
    "relname",
    "seq_scan",
    "seq_tup_read",
    "idx_scan",
    "idx_tup_fetch",
    "n_tup_ins",
    "n_tup_upd",
    "n_tup_del",
    "n_tup_hot_upd",
    "n_tup_newpage_upd"
   FROM "pg_stat_xact_all_tables"
  WHERE (("schemaname" <> ALL (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) AND ("schemaname" !~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_stat_xact_user_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_statio_all_indexes" AS
 SELECT "c"."oid" AS "relid",
    "i"."oid" AS "indexrelid",
    "n"."nspname" AS "schemaname",
    "c"."relname",
    "i"."relname" AS "indexrelname",
    ("pg_stat_get_blocks_fetched"("i"."oid") - "pg_stat_get_blocks_hit"("i"."oid")) AS "idx_blks_read",
    "pg_stat_get_blocks_hit"("i"."oid") AS "idx_blks_hit"
   FROM ((("pg_class" "c"
     JOIN "pg_index" "x" ON (("c"."oid" = "x"."indrelid")))
     JOIN "pg_class" "i" ON (("i"."oid" = "x"."indexrelid")))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ("c"."relkind" = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]));


ALTER VIEW "pg_catalog"."pg_statio_all_indexes" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_statio_all_sequences" AS
 SELECT "c"."oid" AS "relid",
    "n"."nspname" AS "schemaname",
    "c"."relname",
    ("pg_stat_get_blocks_fetched"("c"."oid") - "pg_stat_get_blocks_hit"("c"."oid")) AS "blks_read",
    "pg_stat_get_blocks_hit"("c"."oid") AS "blks_hit"
   FROM ("pg_class" "c"
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ("c"."relkind" = 'S'::"char");


ALTER VIEW "pg_catalog"."pg_statio_all_sequences" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_statio_all_tables" AS
 SELECT "c"."oid" AS "relid",
    "n"."nspname" AS "schemaname",
    "c"."relname",
    ("pg_stat_get_blocks_fetched"("c"."oid") - "pg_stat_get_blocks_hit"("c"."oid")) AS "heap_blks_read",
    "pg_stat_get_blocks_hit"("c"."oid") AS "heap_blks_hit",
    "i"."idx_blks_read",
    "i"."idx_blks_hit",
    ("pg_stat_get_blocks_fetched"("t"."oid") - "pg_stat_get_blocks_hit"("t"."oid")) AS "toast_blks_read",
    "pg_stat_get_blocks_hit"("t"."oid") AS "toast_blks_hit",
    "x"."idx_blks_read" AS "tidx_blks_read",
    "x"."idx_blks_hit" AS "tidx_blks_hit"
   FROM (((("pg_class" "c"
     LEFT JOIN "pg_class" "t" ON (("c"."reltoastrelid" = "t"."oid")))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
     LEFT JOIN LATERAL ( SELECT ("sum"(("pg_stat_get_blocks_fetched"("pg_index"."indexrelid") - "pg_stat_get_blocks_hit"("pg_index"."indexrelid"))))::bigint AS "idx_blks_read",
            ("sum"("pg_stat_get_blocks_hit"("pg_index"."indexrelid")))::bigint AS "idx_blks_hit"
           FROM "pg_index"
          WHERE ("pg_index"."indrelid" = "c"."oid")) "i" ON (true))
     LEFT JOIN LATERAL ( SELECT ("sum"(("pg_stat_get_blocks_fetched"("pg_index"."indexrelid") - "pg_stat_get_blocks_hit"("pg_index"."indexrelid"))))::bigint AS "idx_blks_read",
            ("sum"("pg_stat_get_blocks_hit"("pg_index"."indexrelid")))::bigint AS "idx_blks_hit"
           FROM "pg_index"
          WHERE ("pg_index"."indrelid" = "t"."oid")) "x" ON (true))
  WHERE ("c"."relkind" = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]));


ALTER VIEW "pg_catalog"."pg_statio_all_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_statio_sys_indexes" AS
 SELECT "relid",
    "indexrelid",
    "schemaname",
    "relname",
    "indexrelname",
    "idx_blks_read",
    "idx_blks_hit"
   FROM "pg_statio_all_indexes"
  WHERE (("schemaname" = ANY (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) OR ("schemaname" ~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_statio_sys_indexes" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_statio_sys_sequences" AS
 SELECT "relid",
    "schemaname",
    "relname",
    "blks_read",
    "blks_hit"
   FROM "pg_statio_all_sequences"
  WHERE (("schemaname" = ANY (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) OR ("schemaname" ~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_statio_sys_sequences" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_statio_sys_tables" AS
 SELECT "relid",
    "schemaname",
    "relname",
    "heap_blks_read",
    "heap_blks_hit",
    "idx_blks_read",
    "idx_blks_hit",
    "toast_blks_read",
    "toast_blks_hit",
    "tidx_blks_read",
    "tidx_blks_hit"
   FROM "pg_statio_all_tables"
  WHERE (("schemaname" = ANY (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) OR ("schemaname" ~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_statio_sys_tables" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_statio_user_indexes" AS
 SELECT "relid",
    "indexrelid",
    "schemaname",
    "relname",
    "indexrelname",
    "idx_blks_read",
    "idx_blks_hit"
   FROM "pg_statio_all_indexes"
  WHERE (("schemaname" <> ALL (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) AND ("schemaname" !~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_statio_user_indexes" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_statio_user_sequences" AS
 SELECT "relid",
    "schemaname",
    "relname",
    "blks_read",
    "blks_hit"
   FROM "pg_statio_all_sequences"
  WHERE (("schemaname" <> ALL (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) AND ("schemaname" !~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_statio_user_sequences" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_statio_user_tables" AS
 SELECT "relid",
    "schemaname",
    "relname",
    "heap_blks_read",
    "heap_blks_hit",
    "idx_blks_read",
    "idx_blks_hit",
    "toast_blks_read",
    "toast_blks_hit",
    "tidx_blks_read",
    "tidx_blks_hit"
   FROM "pg_statio_all_tables"
  WHERE (("schemaname" <> ALL (ARRAY['pg_catalog'::"name", 'information_schema'::"name"])) AND ("schemaname" !~ '^pg_toast'::"text"));


ALTER VIEW "pg_catalog"."pg_statio_user_tables" OWNER TO "supabase_admin";

SET default_tablespace = '';


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_statistic" (
    "starelid" "oid" NOT NULL,
    "staattnum" smallint NOT NULL,
    "stainherit" boolean NOT NULL,
    "stanullfrac" real NOT NULL,
    "stawidth" integer NOT NULL,
    "stadistinct" real NOT NULL,
    "stakind1" smallint NOT NULL,
    "stakind2" smallint NOT NULL,
    "stakind3" smallint NOT NULL,
    "stakind4" smallint NOT NULL,
    "stakind5" smallint NOT NULL,
    "staop1" "oid" NOT NULL,
    "staop2" "oid" NOT NULL,
    "staop3" "oid" NOT NULL,
    "staop4" "oid" NOT NULL,
    "staop5" "oid" NOT NULL,
    "stacoll1" "oid" NOT NULL,
    "stacoll2" "oid" NOT NULL,
    "stacoll3" "oid" NOT NULL,
    "stacoll4" "oid" NOT NULL,
    "stacoll5" "oid" NOT NULL,
    "stanumbers1" real[],
    "stanumbers2" real[],
    "stanumbers3" real[],
    "stanumbers4" real[],
    "stanumbers5" real[],
    "stavalues1" "anyarray",
    "stavalues2" "anyarray",
    "stavalues3" "anyarray",
    "stavalues4" "anyarray",
    "stavalues5" "anyarray"
);

ALTER TABLE ONLY "pg_catalog"."pg_statistic" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_statistic" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_statistic_ext" (
    "oid" "oid" NOT NULL,
    "stxrelid" "oid" NOT NULL,
    "stxname" "name" NOT NULL,
    "stxnamespace" "oid" NOT NULL,
    "stxowner" "oid" NOT NULL,
    "stxkeys" "int2vector" NOT NULL,
    "stxstattarget" smallint,
    "stxkind" "char"[] NOT NULL,
    "stxexprs" "pg_node_tree" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_statistic_ext" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_statistic_ext" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_statistic_ext_data" (
    "stxoid" "oid" NOT NULL,
    "stxdinherit" boolean NOT NULL,
    "stxdndistinct" "pg_ndistinct" COLLATE "pg_catalog"."C",
    "stxddependencies" "pg_dependencies" COLLATE "pg_catalog"."C",
    "stxdmcv" "pg_mcv_list" COLLATE "pg_catalog"."C",
    "stxdexpr" "pg_statistic"[]
);

ALTER TABLE ONLY "pg_catalog"."pg_statistic_ext_data" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_statistic_ext_data" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stats" WITH ("security_barrier"='true') AS
 SELECT "n"."nspname" AS "schemaname",
    "c"."relname" AS "tablename",
    "a"."attname",
    "s"."stainherit" AS "inherited",
    "s"."stanullfrac" AS "null_frac",
    "s"."stawidth" AS "avg_width",
    "s"."stadistinct" AS "n_distinct",
        CASE
            WHEN ("s"."stakind1" = 1) THEN "s"."stavalues1"
            WHEN ("s"."stakind2" = 1) THEN "s"."stavalues2"
            WHEN ("s"."stakind3" = 1) THEN "s"."stavalues3"
            WHEN ("s"."stakind4" = 1) THEN "s"."stavalues4"
            WHEN ("s"."stakind5" = 1) THEN "s"."stavalues5"
            ELSE NULL::"anyarray"
        END AS "most_common_vals",
        CASE
            WHEN ("s"."stakind1" = 1) THEN "s"."stanumbers1"
            WHEN ("s"."stakind2" = 1) THEN "s"."stanumbers2"
            WHEN ("s"."stakind3" = 1) THEN "s"."stanumbers3"
            WHEN ("s"."stakind4" = 1) THEN "s"."stanumbers4"
            WHEN ("s"."stakind5" = 1) THEN "s"."stanumbers5"
            ELSE NULL::real[]
        END AS "most_common_freqs",
        CASE
            WHEN ("s"."stakind1" = 2) THEN "s"."stavalues1"
            WHEN ("s"."stakind2" = 2) THEN "s"."stavalues2"
            WHEN ("s"."stakind3" = 2) THEN "s"."stavalues3"
            WHEN ("s"."stakind4" = 2) THEN "s"."stavalues4"
            WHEN ("s"."stakind5" = 2) THEN "s"."stavalues5"
            ELSE NULL::"anyarray"
        END AS "histogram_bounds",
        CASE
            WHEN ("s"."stakind1" = 3) THEN "s"."stanumbers1"[1]
            WHEN ("s"."stakind2" = 3) THEN "s"."stanumbers2"[1]
            WHEN ("s"."stakind3" = 3) THEN "s"."stanumbers3"[1]
            WHEN ("s"."stakind4" = 3) THEN "s"."stanumbers4"[1]
            WHEN ("s"."stakind5" = 3) THEN "s"."stanumbers5"[1]
            ELSE NULL::real
        END AS "correlation",
        CASE
            WHEN ("s"."stakind1" = 4) THEN "s"."stavalues1"
            WHEN ("s"."stakind2" = 4) THEN "s"."stavalues2"
            WHEN ("s"."stakind3" = 4) THEN "s"."stavalues3"
            WHEN ("s"."stakind4" = 4) THEN "s"."stavalues4"
            WHEN ("s"."stakind5" = 4) THEN "s"."stavalues5"
            ELSE NULL::"anyarray"
        END AS "most_common_elems",
        CASE
            WHEN ("s"."stakind1" = 4) THEN "s"."stanumbers1"
            WHEN ("s"."stakind2" = 4) THEN "s"."stanumbers2"
            WHEN ("s"."stakind3" = 4) THEN "s"."stanumbers3"
            WHEN ("s"."stakind4" = 4) THEN "s"."stanumbers4"
            WHEN ("s"."stakind5" = 4) THEN "s"."stanumbers5"
            ELSE NULL::real[]
        END AS "most_common_elem_freqs",
        CASE
            WHEN ("s"."stakind1" = 5) THEN "s"."stanumbers1"
            WHEN ("s"."stakind2" = 5) THEN "s"."stanumbers2"
            WHEN ("s"."stakind3" = 5) THEN "s"."stanumbers3"
            WHEN ("s"."stakind4" = 5) THEN "s"."stanumbers4"
            WHEN ("s"."stakind5" = 5) THEN "s"."stanumbers5"
            ELSE NULL::real[]
        END AS "elem_count_histogram",
        CASE
            WHEN ("s"."stakind1" = 6) THEN "s"."stavalues1"
            WHEN ("s"."stakind2" = 6) THEN "s"."stavalues2"
            WHEN ("s"."stakind3" = 6) THEN "s"."stavalues3"
            WHEN ("s"."stakind4" = 6) THEN "s"."stavalues4"
            WHEN ("s"."stakind5" = 6) THEN "s"."stavalues5"
            ELSE NULL::"anyarray"
        END AS "range_length_histogram",
        CASE
            WHEN ("s"."stakind1" = 6) THEN "s"."stanumbers1"[1]
            WHEN ("s"."stakind2" = 6) THEN "s"."stanumbers2"[1]
            WHEN ("s"."stakind3" = 6) THEN "s"."stanumbers3"[1]
            WHEN ("s"."stakind4" = 6) THEN "s"."stanumbers4"[1]
            WHEN ("s"."stakind5" = 6) THEN "s"."stanumbers5"[1]
            ELSE NULL::real
        END AS "range_empty_frac",
        CASE
            WHEN ("s"."stakind1" = 7) THEN "s"."stavalues1"
            WHEN ("s"."stakind2" = 7) THEN "s"."stavalues2"
            WHEN ("s"."stakind3" = 7) THEN "s"."stavalues3"
            WHEN ("s"."stakind4" = 7) THEN "s"."stavalues4"
            WHEN ("s"."stakind5" = 7) THEN "s"."stavalues5"
            ELSE NULL::"anyarray"
        END AS "range_bounds_histogram"
   FROM ((("pg_statistic" "s"
     JOIN "pg_class" "c" ON (("c"."oid" = "s"."starelid")))
     JOIN "pg_attribute" "a" ON ((("c"."oid" = "a"."attrelid") AND ("a"."attnum" = "s"."staattnum"))))
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ((NOT "a"."attisdropped") AND "has_column_privilege"("c"."oid", "a"."attnum", 'select'::"text") AND (("c"."relrowsecurity" = false) OR (NOT "row_security_active"("c"."oid"))));


ALTER VIEW "pg_catalog"."pg_stats" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stats_ext" WITH ("security_barrier"='true') AS
 SELECT "cn"."nspname" AS "schemaname",
    "c"."relname" AS "tablename",
    "sn"."nspname" AS "statistics_schemaname",
    "s"."stxname" AS "statistics_name",
    "pg_get_userbyid"("s"."stxowner") AS "statistics_owner",
    ( SELECT "array_agg"("a"."attname" ORDER BY "a"."attnum") AS "array_agg"
           FROM ("unnest"("s"."stxkeys") "k"("k")
             JOIN "pg_attribute" "a" ON ((("a"."attrelid" = "s"."stxrelid") AND ("a"."attnum" = "k"."k"))))) AS "attnames",
    "pg_get_statisticsobjdef_expressions"("s"."oid") AS "exprs",
    "s"."stxkind" AS "kinds",
    "sd"."stxdinherit" AS "inherited",
    "sd"."stxdndistinct" AS "n_distinct",
    "sd"."stxddependencies" AS "dependencies",
    "m"."most_common_vals",
    "m"."most_common_val_nulls",
    "m"."most_common_freqs",
    "m"."most_common_base_freqs"
   FROM ((((("pg_statistic_ext" "s"
     JOIN "pg_class" "c" ON (("c"."oid" = "s"."stxrelid")))
     JOIN "pg_statistic_ext_data" "sd" ON (("s"."oid" = "sd"."stxoid")))
     LEFT JOIN "pg_namespace" "cn" ON (("cn"."oid" = "c"."relnamespace")))
     LEFT JOIN "pg_namespace" "sn" ON (("sn"."oid" = "s"."stxnamespace")))
     LEFT JOIN LATERAL ( SELECT "array_agg"("pg_mcv_list_items"."values") AS "most_common_vals",
            "array_agg"("pg_mcv_list_items"."nulls") AS "most_common_val_nulls",
            "array_agg"("pg_mcv_list_items"."frequency") AS "most_common_freqs",
            "array_agg"("pg_mcv_list_items"."base_frequency") AS "most_common_base_freqs"
           FROM "pg_mcv_list_items"("sd"."stxdmcv") "pg_mcv_list_items"("index", "values", "nulls", "frequency", "base_frequency")) "m" ON (("sd"."stxdmcv" IS NOT NULL)))
  WHERE ("pg_has_role"("c"."relowner", 'USAGE'::"text") AND (("c"."relrowsecurity" = false) OR (NOT "row_security_active"("c"."oid"))));


ALTER VIEW "pg_catalog"."pg_stats_ext" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_stats_ext_exprs" WITH ("security_barrier"='true') AS
 SELECT "cn"."nspname" AS "schemaname",
    "c"."relname" AS "tablename",
    "sn"."nspname" AS "statistics_schemaname",
    "s"."stxname" AS "statistics_name",
    "pg_get_userbyid"("s"."stxowner") AS "statistics_owner",
    "stat"."expr",
    "sd"."stxdinherit" AS "inherited",
    ("stat"."a")."stanullfrac" AS "null_frac",
    ("stat"."a")."stawidth" AS "avg_width",
    ("stat"."a")."stadistinct" AS "n_distinct",
        CASE
            WHEN (("stat"."a")."stakind1" = 1) THEN ("stat"."a")."stavalues1"
            WHEN (("stat"."a")."stakind2" = 1) THEN ("stat"."a")."stavalues2"
            WHEN (("stat"."a")."stakind3" = 1) THEN ("stat"."a")."stavalues3"
            WHEN (("stat"."a")."stakind4" = 1) THEN ("stat"."a")."stavalues4"
            WHEN (("stat"."a")."stakind5" = 1) THEN ("stat"."a")."stavalues5"
            ELSE NULL::"anyarray"
        END AS "most_common_vals",
        CASE
            WHEN (("stat"."a")."stakind1" = 1) THEN ("stat"."a")."stanumbers1"
            WHEN (("stat"."a")."stakind2" = 1) THEN ("stat"."a")."stanumbers2"
            WHEN (("stat"."a")."stakind3" = 1) THEN ("stat"."a")."stanumbers3"
            WHEN (("stat"."a")."stakind4" = 1) THEN ("stat"."a")."stanumbers4"
            WHEN (("stat"."a")."stakind5" = 1) THEN ("stat"."a")."stanumbers5"
            ELSE NULL::real[]
        END AS "most_common_freqs",
        CASE
            WHEN (("stat"."a")."stakind1" = 2) THEN ("stat"."a")."stavalues1"
            WHEN (("stat"."a")."stakind2" = 2) THEN ("stat"."a")."stavalues2"
            WHEN (("stat"."a")."stakind3" = 2) THEN ("stat"."a")."stavalues3"
            WHEN (("stat"."a")."stakind4" = 2) THEN ("stat"."a")."stavalues4"
            WHEN (("stat"."a")."stakind5" = 2) THEN ("stat"."a")."stavalues5"
            ELSE NULL::"anyarray"
        END AS "histogram_bounds",
        CASE
            WHEN (("stat"."a")."stakind1" = 3) THEN ("stat"."a")."stanumbers1"[1]
            WHEN (("stat"."a")."stakind2" = 3) THEN ("stat"."a")."stanumbers2"[1]
            WHEN (("stat"."a")."stakind3" = 3) THEN ("stat"."a")."stanumbers3"[1]
            WHEN (("stat"."a")."stakind4" = 3) THEN ("stat"."a")."stanumbers4"[1]
            WHEN (("stat"."a")."stakind5" = 3) THEN ("stat"."a")."stanumbers5"[1]
            ELSE NULL::real
        END AS "correlation",
        CASE
            WHEN (("stat"."a")."stakind1" = 4) THEN ("stat"."a")."stavalues1"
            WHEN (("stat"."a")."stakind2" = 4) THEN ("stat"."a")."stavalues2"
            WHEN (("stat"."a")."stakind3" = 4) THEN ("stat"."a")."stavalues3"
            WHEN (("stat"."a")."stakind4" = 4) THEN ("stat"."a")."stavalues4"
            WHEN (("stat"."a")."stakind5" = 4) THEN ("stat"."a")."stavalues5"
            ELSE NULL::"anyarray"
        END AS "most_common_elems",
        CASE
            WHEN (("stat"."a")."stakind1" = 4) THEN ("stat"."a")."stanumbers1"
            WHEN (("stat"."a")."stakind2" = 4) THEN ("stat"."a")."stanumbers2"
            WHEN (("stat"."a")."stakind3" = 4) THEN ("stat"."a")."stanumbers3"
            WHEN (("stat"."a")."stakind4" = 4) THEN ("stat"."a")."stanumbers4"
            WHEN (("stat"."a")."stakind5" = 4) THEN ("stat"."a")."stanumbers5"
            ELSE NULL::real[]
        END AS "most_common_elem_freqs",
        CASE
            WHEN (("stat"."a")."stakind1" = 5) THEN ("stat"."a")."stanumbers1"
            WHEN (("stat"."a")."stakind2" = 5) THEN ("stat"."a")."stanumbers2"
            WHEN (("stat"."a")."stakind3" = 5) THEN ("stat"."a")."stanumbers3"
            WHEN (("stat"."a")."stakind4" = 5) THEN ("stat"."a")."stanumbers4"
            WHEN (("stat"."a")."stakind5" = 5) THEN ("stat"."a")."stanumbers5"
            ELSE NULL::real[]
        END AS "elem_count_histogram"
   FROM ((((("pg_statistic_ext" "s"
     JOIN "pg_class" "c" ON (("c"."oid" = "s"."stxrelid")))
     LEFT JOIN "pg_statistic_ext_data" "sd" ON (("s"."oid" = "sd"."stxoid")))
     LEFT JOIN "pg_namespace" "cn" ON (("cn"."oid" = "c"."relnamespace")))
     LEFT JOIN "pg_namespace" "sn" ON (("sn"."oid" = "s"."stxnamespace")))
     JOIN LATERAL ( SELECT "unnest"("pg_get_statisticsobjdef_expressions"("s"."oid")) AS "expr",
            "unnest"("sd"."stxdexpr") AS "a") "stat" ON (("stat"."expr" IS NOT NULL)))
  WHERE ("pg_has_role"("c"."relowner", 'USAGE'::"text") AND (("c"."relrowsecurity" = false) OR (NOT "row_security_active"("c"."oid"))));


ALTER VIEW "pg_catalog"."pg_stats_ext_exprs" OWNER TO "supabase_admin";

SET default_tablespace = "pg_global";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_subscription" (
    "oid" "oid" NOT NULL,
    "subdbid" "oid" NOT NULL,
    "subskiplsn" "pg_lsn" NOT NULL,
    "subname" "name" NOT NULL,
    "subowner" "oid" NOT NULL,
    "subenabled" boolean NOT NULL,
    "subbinary" boolean NOT NULL,
    "substream" "char" NOT NULL,
    "subtwophasestate" "char" NOT NULL,
    "subdisableonerr" boolean NOT NULL,
    "subpasswordrequired" boolean NOT NULL,
    "subrunasowner" boolean NOT NULL,
    "subfailover" boolean NOT NULL,
    "subconninfo" "text" NOT NULL COLLATE "pg_catalog"."C",
    "subslotname" "name",
    "subsynccommit" "text" NOT NULL COLLATE "pg_catalog"."C",
    "subpublications" "text"[] NOT NULL COLLATE "pg_catalog"."C",
    "suborigin" "text" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_subscription" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_subscription" OWNER TO "supabase_admin";

SET default_tablespace = '';


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_subscription_rel" (
    "srsubid" "oid" NOT NULL,
    "srrelid" "oid" NOT NULL,
    "srsubstate" "char" NOT NULL,
    "srsublsn" "pg_lsn"
);

ALTER TABLE ONLY "pg_catalog"."pg_subscription_rel" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_subscription_rel" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_tables" AS
 SELECT "n"."nspname" AS "schemaname",
    "c"."relname" AS "tablename",
    "pg_get_userbyid"("c"."relowner") AS "tableowner",
    "t"."spcname" AS "tablespace",
    "c"."relhasindex" AS "hasindexes",
    "c"."relhasrules" AS "hasrules",
    "c"."relhastriggers" AS "hastriggers",
    "c"."relrowsecurity" AS "rowsecurity"
   FROM (("pg_class" "c"
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
     LEFT JOIN "pg_tablespace" "t" ON (("t"."oid" = "c"."reltablespace")))
  WHERE ("c"."relkind" = ANY (ARRAY['r'::"char", 'p'::"char"]));


ALTER VIEW "pg_catalog"."pg_tables" OWNER TO "supabase_admin";

SET default_tablespace = "pg_global";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_tablespace" (
    "oid" "oid" NOT NULL,
    "spcname" "name" NOT NULL,
    "spcowner" "oid" NOT NULL,
    "spcacl" "aclitem"[],
    "spcoptions" "text"[] COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_tablespace" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_tablespace" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_timezone_abbrevs" AS
 SELECT "abbrev",
    "utc_offset",
    "is_dst"
   FROM "pg_timezone_abbrevs"() "pg_timezone_abbrevs"("abbrev", "utc_offset", "is_dst");


ALTER VIEW "pg_catalog"."pg_timezone_abbrevs" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_timezone_names" AS
 SELECT "name",
    "abbrev",
    "utc_offset",
    "is_dst"
   FROM "pg_timezone_names"() "pg_timezone_names"("name", "abbrev", "utc_offset", "is_dst");


ALTER VIEW "pg_catalog"."pg_timezone_names" OWNER TO "supabase_admin";

SET default_tablespace = '';


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_transform" (
    "oid" "oid" NOT NULL,
    "trftype" "oid" NOT NULL,
    "trflang" "oid" NOT NULL,
    "trffromsql" "regproc" NOT NULL,
    "trftosql" "regproc" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_transform" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_transform" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_trigger" (
    "oid" "oid" NOT NULL,
    "tgrelid" "oid" NOT NULL,
    "tgparentid" "oid" NOT NULL,
    "tgname" "name" NOT NULL,
    "tgfoid" "oid" NOT NULL,
    "tgtype" smallint NOT NULL,
    "tgenabled" "char" NOT NULL,
    "tgisinternal" boolean NOT NULL,
    "tgconstrrelid" "oid" NOT NULL,
    "tgconstrindid" "oid" NOT NULL,
    "tgconstraint" "oid" NOT NULL,
    "tgdeferrable" boolean NOT NULL,
    "tginitdeferred" boolean NOT NULL,
    "tgnargs" smallint NOT NULL,
    "tgattr" "int2vector" NOT NULL,
    "tgargs" "bytea" NOT NULL,
    "tgqual" "pg_node_tree" COLLATE "pg_catalog"."C",
    "tgoldtable" "name",
    "tgnewtable" "name"
);

ALTER TABLE ONLY "pg_catalog"."pg_trigger" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_trigger" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_ts_config" (
    "oid" "oid" NOT NULL,
    "cfgname" "name" NOT NULL,
    "cfgnamespace" "oid" NOT NULL,
    "cfgowner" "oid" NOT NULL,
    "cfgparser" "oid" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_ts_config" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_ts_config" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_ts_config_map" (
    "mapcfg" "oid" NOT NULL,
    "maptokentype" integer NOT NULL,
    "mapseqno" integer NOT NULL,
    "mapdict" "oid" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_ts_config_map" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_ts_config_map" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_ts_dict" (
    "oid" "oid" NOT NULL,
    "dictname" "name" NOT NULL,
    "dictnamespace" "oid" NOT NULL,
    "dictowner" "oid" NOT NULL,
    "dicttemplate" "oid" NOT NULL,
    "dictinitoption" "text" COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_ts_dict" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_ts_dict" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_ts_parser" (
    "oid" "oid" NOT NULL,
    "prsname" "name" NOT NULL,
    "prsnamespace" "oid" NOT NULL,
    "prsstart" "regproc" NOT NULL,
    "prstoken" "regproc" NOT NULL,
    "prsend" "regproc" NOT NULL,
    "prsheadline" "regproc" NOT NULL,
    "prslextype" "regproc" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_ts_parser" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_ts_parser" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_ts_template" (
    "oid" "oid" NOT NULL,
    "tmplname" "name" NOT NULL,
    "tmplnamespace" "oid" NOT NULL,
    "tmplinit" "regproc" NOT NULL,
    "tmpllexize" "regproc" NOT NULL
);

ALTER TABLE ONLY "pg_catalog"."pg_ts_template" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_ts_template" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_type" (
    "oid" "oid" NOT NULL,
    "typname" "name" NOT NULL,
    "typnamespace" "oid" NOT NULL,
    "typowner" "oid" NOT NULL,
    "typlen" smallint NOT NULL,
    "typbyval" boolean NOT NULL,
    "typtype" "char" NOT NULL,
    "typcategory" "char" NOT NULL,
    "typispreferred" boolean NOT NULL,
    "typisdefined" boolean NOT NULL,
    "typdelim" "char" NOT NULL,
    "typrelid" "oid" NOT NULL,
    "typsubscript" "regproc" NOT NULL,
    "typelem" "oid" NOT NULL,
    "typarray" "oid" NOT NULL,
    "typinput" "regproc" NOT NULL,
    "typoutput" "regproc" NOT NULL,
    "typreceive" "regproc" NOT NULL,
    "typsend" "regproc" NOT NULL,
    "typmodin" "regproc" NOT NULL,
    "typmodout" "regproc" NOT NULL,
    "typanalyze" "regproc" NOT NULL,
    "typalign" "char" NOT NULL,
    "typstorage" "char" NOT NULL,
    "typnotnull" boolean NOT NULL,
    "typbasetype" "oid" NOT NULL,
    "typtypmod" integer NOT NULL,
    "typndims" integer NOT NULL,
    "typcollation" "oid" NOT NULL,
    "typdefaultbin" "pg_node_tree" COLLATE "pg_catalog"."C",
    "typdefault" "text" COLLATE "pg_catalog"."C",
    "typacl" "aclitem"[]
);

ALTER TABLE ONLY "pg_catalog"."pg_type" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_type" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_user" AS
 SELECT "usename",
    "usesysid",
    "usecreatedb",
    "usesuper",
    "userepl",
    "usebypassrls",
    '********'::"text" AS "passwd",
    "valuntil",
    "useconfig"
   FROM "pg_shadow";


ALTER VIEW "pg_catalog"."pg_user" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "pg_catalog"."pg_user_mapping" (
    "oid" "oid" NOT NULL,
    "umuser" "oid" NOT NULL,
    "umserver" "oid" NOT NULL,
    "umoptions" "text"[] COLLATE "pg_catalog"."C"
);

ALTER TABLE ONLY "pg_catalog"."pg_user_mapping" REPLICA IDENTITY NOTHING;


ALTER TABLE "pg_catalog"."pg_user_mapping" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_user_mappings" AS
 SELECT "u"."oid" AS "umid",
    "s"."oid" AS "srvid",
    "s"."srvname",
    "u"."umuser",
        CASE
            WHEN ("u"."umuser" = (0)::"oid") THEN 'public'::"name"
            ELSE "a"."rolname"
        END AS "usename",
        CASE
            WHEN ((("u"."umuser" <> (0)::"oid") AND ("a"."rolname" = CURRENT_USER) AND ("pg_has_role"("s"."srvowner", 'USAGE'::"text") OR "has_server_privilege"("s"."oid", 'USAGE'::"text"))) OR (("u"."umuser" = (0)::"oid") AND "pg_has_role"("s"."srvowner", 'USAGE'::"text")) OR ( SELECT "pg_authid"."rolsuper"
               FROM "pg_authid"
              WHERE ("pg_authid"."rolname" = CURRENT_USER))) THEN "u"."umoptions"
            ELSE NULL::"text"[]
        END AS "umoptions"
   FROM (("pg_user_mapping" "u"
     JOIN "pg_foreign_server" "s" ON (("u"."umserver" = "s"."oid")))
     LEFT JOIN "pg_authid" "a" ON (("a"."oid" = "u"."umuser")));


ALTER VIEW "pg_catalog"."pg_user_mappings" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_views" AS
 SELECT "n"."nspname" AS "schemaname",
    "c"."relname" AS "viewname",
    "pg_get_userbyid"("c"."relowner") AS "viewowner",
    "pg_get_viewdef"("c"."oid") AS "definition"
   FROM ("pg_class" "c"
     LEFT JOIN "pg_namespace" "n" ON (("n"."oid" = "c"."relnamespace")))
  WHERE ("c"."relkind" = 'v'::"char");


ALTER VIEW "pg_catalog"."pg_views" OWNER TO "supabase_admin";


CREATE OR REPLACE VIEW "pg_catalog"."pg_wait_events" AS
 SELECT "type",
    "name",
    "description"
   FROM "pg_get_wait_events"() "pg_get_wait_events"("type", "name", "description");


ALTER VIEW "pg_catalog"."pg_wait_events" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "public"."ingredients" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "name" character varying(255) NOT NULL,
    "category" character varying(50) NOT NULL,
    "unit" character varying(20) NOT NULL,
    "price_per_unit" numeric(10,2) NOT NULL,
    "store_id" "uuid",
    "embedding" "public"."vector"(1536),
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "default_unit" "text"
);


ALTER TABLE "public"."ingredients" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."meal_plan_recipes" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "meal_plan_id" "uuid",
    "recipe_id" "uuid",
    "meal_type" character varying(20) NOT NULL,
    "day_of_week" integer NOT NULL,
    "servings" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    CONSTRAINT "meal_plan_recipes_day_of_week_check" CHECK ((("day_of_week" >= 0) AND ("day_of_week" <= 6))),
    CONSTRAINT "meal_plan_recipes_meal_type_check" CHECK ((("meal_type")::"text" = ANY ((ARRAY['breakfast'::character varying, 'lunch'::character varying, 'dinner'::character varying, 'snack'::character varying])::"text"[])))
);


ALTER TABLE "public"."meal_plan_recipes" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."meal_plan_stores" (
    "meal_plan_id" "uuid" NOT NULL,
    "place_id" "text" NOT NULL
);


ALTER TABLE "public"."meal_plan_stores" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."meal_plans" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "user_id" "uuid",
    "start_date" "date" NOT NULL,
    "end_date" "date" NOT NULL,
    "total_cost" numeric(10,2) NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
);


ALTER TABLE "public"."meal_plans" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."nutrition_requirements" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid",
    "calories" integer NOT NULL,
    "protein_grams" integer NOT NULL,
    "carbs_grams" integer NOT NULL,
    "fat_grams" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "target_date" "date",
    "target_weight" real,
    "weight_change_per_week" real
);


ALTER TABLE "public"."nutrition_requirements" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."prices" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "ingredient_id" "uuid",
    "store_id" "uuid",
    "price" numeric NOT NULL,
    "fetched_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
);


ALTER TABLE "public"."prices" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "age" integer,
    "gender" "text",
    "weight" numeric,
    "height" numeric,
    "activity_level" "text",
    "health_goals" "text"[] DEFAULT '{}'::"text"[],
    "dietary_restrictions" "text"[] DEFAULT '{}'::"text"[],
    "weekly_budget" numeric,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "bmr" double precision,
    "zip_code" bigint,
    CONSTRAINT "profiles_activity_level_check" CHECK (("activity_level" = ANY (ARRAY['sedentary'::"text", 'light'::"text", 'moderate'::"text", 'active'::"text", 'veryActive'::"text"]))),
    CONSTRAINT "profiles_age_check" CHECK ((("age" >= 13) AND ("age" <= 120))),
    CONSTRAINT "profiles_gender_check" CHECK (("gender" = ANY (ARRAY['male'::"text", 'female'::"text"]))),
    CONSTRAINT "profiles_height_check" CHECK (("height" > (0)::numeric)),
    CONSTRAINT "profiles_weekly_budget_check" CHECK (("weekly_budget" > (0)::numeric)),
    CONSTRAINT "profiles_weight_check" CHECK (("weight" > (0)::numeric))
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."recipe_ingredients" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "recipe_id" "uuid",
    "ingredient_id" "uuid",
    "quantity" numeric(10,2) NOT NULL,
    "unit" character varying(20) NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
);


ALTER TABLE "public"."recipe_ingredients" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."recipes" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "name" character varying(255) NOT NULL,
    "description" "text",
    "instructions" "text"[] NOT NULL,
    "prep_time_minutes" integer NOT NULL,
    "cook_time_minutes" integer NOT NULL,
    "servings" integer NOT NULL,
    "calories_per_serving" integer NOT NULL,
    "protein_per_serving" numeric(5,2) NOT NULL,
    "carbs_per_serving" numeric(5,2) NOT NULL,
    "fat_per_serving" numeric(5,2) NOT NULL,
    "dietary_tags" "text"[] DEFAULT '{}'::"text"[],
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
);


ALTER TABLE "public"."recipes" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."stores" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "name" "text" NOT NULL,
    "lat" numeric,
    "lon" numeric,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "place_id" "text",
    "kroger_location_id" character varying(32),
    "walmart_store_id" character varying(32)
);


ALTER TABLE "public"."stores" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."stores_prices" (
    "place_id" "text" NOT NULL,
    "ingredient_name" "text" NOT NULL,
    "unit" "text" NOT NULL,
    "price_per_unit" numeric NOT NULL,
    "last_seen_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
);


ALTER TABLE "public"."stores_prices" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."test_embeddings" (
    "id" bigint NOT NULL,
    "content" "text" NOT NULL,
    "embedding" "public"."vector"(3)
);


ALTER TABLE "public"."test_embeddings" OWNER TO "postgres";


ALTER TABLE "public"."test_embeddings" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."test_embeddings_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."test_setup" (
    "id" integer NOT NULL,
    "name" "text" NOT NULL
);


ALTER TABLE "public"."test_setup" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."test_setup_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE "public"."test_setup_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."test_setup_id_seq" OWNED BY "public"."test_setup"."id";



CREATE TABLE IF NOT EXISTS "public"."test_vectors" (
    "id" integer NOT NULL,
    "embedding" "public"."vector"(3)
);


ALTER TABLE "public"."test_vectors" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."test_vectors_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE "public"."test_vectors_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."test_vectors_id_seq" OWNED BY "public"."test_vectors"."id";



CREATE TABLE IF NOT EXISTS "realtime"."messages" (
    "topic" "text" NOT NULL,
    "extension" "text" NOT NULL,
    "payload" "jsonb",
    "event" "text",
    "private" boolean DEFAULT false,
    "updated_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "inserted_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
)
PARTITION BY RANGE ("inserted_at");


ALTER TABLE "realtime"."messages" OWNER TO "supabase_realtime_admin";


CREATE TABLE IF NOT EXISTS "realtime"."schema_migrations" (
    "version" bigint NOT NULL,
    "inserted_at" timestamp(0) without time zone
);


ALTER TABLE "realtime"."schema_migrations" OWNER TO "supabase_admin";


CREATE TABLE IF NOT EXISTS "realtime"."subscription" (
    "id" bigint NOT NULL,
    "subscription_id" "uuid" NOT NULL,
    "entity" "regclass" NOT NULL,
    "filters" "realtime"."user_defined_filter"[] DEFAULT '{}'::"realtime"."user_defined_filter"[] NOT NULL,
    "claims" "jsonb" NOT NULL,
    "claims_role" "regrole" GENERATED ALWAYS AS ("realtime"."to_regrole"(("claims" ->> 'role'::"text"))) STORED NOT NULL,
    "created_at" timestamp without time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);


ALTER TABLE "realtime"."subscription" OWNER TO "supabase_admin";


ALTER TABLE "realtime"."subscription" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "realtime"."subscription_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "storage"."buckets" (
    "id" "text" NOT NULL,
    "name" "text" NOT NULL,
    "owner" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "public" boolean DEFAULT false,
    "avif_autodetection" boolean DEFAULT false,
    "file_size_limit" bigint,
    "allowed_mime_types" "text"[],
    "owner_id" "text"
);


ALTER TABLE "storage"."buckets" OWNER TO "supabase_storage_admin";


COMMENT ON COLUMN "storage"."buckets"."owner" IS 'Field is deprecated, use owner_id instead';



CREATE TABLE IF NOT EXISTS "storage"."migrations" (
    "id" integer NOT NULL,
    "name" character varying(100) NOT NULL,
    "hash" character varying(40) NOT NULL,
    "executed_at" timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE "storage"."migrations" OWNER TO "supabase_storage_admin";


CREATE TABLE IF NOT EXISTS "storage"."objects" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "bucket_id" "text",
    "name" "text",
    "owner" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "last_accessed_at" timestamp with time zone DEFAULT "now"(),
    "metadata" "jsonb",
    "path_tokens" "text"[] GENERATED ALWAYS AS ("string_to_array"("name", '/'::"text")) STORED,
    "version" "text",
    "owner_id" "text",
    "user_metadata" "jsonb"
);


ALTER TABLE "storage"."objects" OWNER TO "supabase_storage_admin";


COMMENT ON COLUMN "storage"."objects"."owner" IS 'Field is deprecated, use owner_id instead';



CREATE TABLE IF NOT EXISTS "storage"."s3_multipart_uploads" (
    "id" "text" NOT NULL,
    "in_progress_size" bigint DEFAULT 0 NOT NULL,
    "upload_signature" "text" NOT NULL,
    "bucket_id" "text" NOT NULL,
    "key" "text" NOT NULL COLLATE "pg_catalog"."C",
    "version" "text" NOT NULL,
    "owner_id" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_metadata" "jsonb"
);


ALTER TABLE "storage"."s3_multipart_uploads" OWNER TO "supabase_storage_admin";


CREATE TABLE IF NOT EXISTS "storage"."s3_multipart_uploads_parts" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "upload_id" "text" NOT NULL,
    "size" bigint DEFAULT 0 NOT NULL,
    "part_number" integer NOT NULL,
    "bucket_id" "text" NOT NULL,
    "key" "text" NOT NULL COLLATE "pg_catalog"."C",
    "etag" "text" NOT NULL,
    "owner_id" "text",
    "version" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "storage"."s3_multipart_uploads_parts" OWNER TO "supabase_storage_admin";


ALTER TABLE ONLY "auth"."refresh_tokens" ALTER COLUMN "id" SET DEFAULT "nextval"('"auth"."refresh_tokens_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."test_setup" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."test_setup_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."test_vectors" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."test_vectors_id_seq"'::"regclass");



ALTER TABLE ONLY "auth"."mfa_amr_claims"
    ADD CONSTRAINT "amr_id_pk" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."audit_log_entries"
    ADD CONSTRAINT "audit_log_entries_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."flow_state"
    ADD CONSTRAINT "flow_state_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."identities"
    ADD CONSTRAINT "identities_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."identities"
    ADD CONSTRAINT "identities_provider_id_provider_unique" UNIQUE ("provider_id", "provider");



ALTER TABLE ONLY "auth"."instances"
    ADD CONSTRAINT "instances_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."mfa_amr_claims"
    ADD CONSTRAINT "mfa_amr_claims_session_id_authentication_method_pkey" UNIQUE ("session_id", "authentication_method");



ALTER TABLE ONLY "auth"."mfa_challenges"
    ADD CONSTRAINT "mfa_challenges_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."mfa_factors"
    ADD CONSTRAINT "mfa_factors_last_challenged_at_key" UNIQUE ("last_challenged_at");



ALTER TABLE ONLY "auth"."mfa_factors"
    ADD CONSTRAINT "mfa_factors_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."one_time_tokens"
    ADD CONSTRAINT "one_time_tokens_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."refresh_tokens"
    ADD CONSTRAINT "refresh_tokens_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."refresh_tokens"
    ADD CONSTRAINT "refresh_tokens_token_unique" UNIQUE ("token");



ALTER TABLE ONLY "auth"."saml_providers"
    ADD CONSTRAINT "saml_providers_entity_id_key" UNIQUE ("entity_id");



ALTER TABLE ONLY "auth"."saml_providers"
    ADD CONSTRAINT "saml_providers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."saml_relay_states"
    ADD CONSTRAINT "saml_relay_states_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."schema_migrations"
    ADD CONSTRAINT "schema_migrations_pkey" PRIMARY KEY ("version");



ALTER TABLE ONLY "auth"."sessions"
    ADD CONSTRAINT "sessions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."sso_domains"
    ADD CONSTRAINT "sso_domains_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."sso_providers"
    ADD CONSTRAINT "sso_providers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "auth"."users"
    ADD CONSTRAINT "users_phone_key" UNIQUE ("phone");



ALTER TABLE ONLY "auth"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "pg_catalog"."pg_aggregate"
    ADD CONSTRAINT "pg_aggregate_fnoid_index" PRIMARY KEY ("aggfnoid");



ALTER TABLE ONLY "pg_catalog"."pg_am"
    ADD CONSTRAINT "pg_am_name_index" UNIQUE ("amname");



ALTER TABLE ONLY "pg_catalog"."pg_am"
    ADD CONSTRAINT "pg_am_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_amop"
    ADD CONSTRAINT "pg_amop_fam_strat_index" UNIQUE ("amopfamily", "amoplefttype", "amoprighttype", "amopstrategy");



ALTER TABLE ONLY "pg_catalog"."pg_amop"
    ADD CONSTRAINT "pg_amop_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_amop"
    ADD CONSTRAINT "pg_amop_opr_fam_index" UNIQUE ("amopopr", "amoppurpose", "amopfamily");



ALTER TABLE ONLY "pg_catalog"."pg_amproc"
    ADD CONSTRAINT "pg_amproc_fam_proc_index" UNIQUE ("amprocfamily", "amproclefttype", "amprocrighttype", "amprocnum");



ALTER TABLE ONLY "pg_catalog"."pg_amproc"
    ADD CONSTRAINT "pg_amproc_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_attrdef"
    ADD CONSTRAINT "pg_attrdef_adrelid_adnum_index" UNIQUE ("adrelid", "adnum");



ALTER TABLE ONLY "pg_catalog"."pg_attrdef"
    ADD CONSTRAINT "pg_attrdef_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_attribute"
    ADD CONSTRAINT "pg_attribute_relid_attnam_index" UNIQUE ("attrelid", "attname");



ALTER TABLE ONLY "pg_catalog"."pg_attribute"
    ADD CONSTRAINT "pg_attribute_relid_attnum_index" PRIMARY KEY ("attrelid", "attnum");


SET default_tablespace = "pg_global";


ALTER TABLE ONLY "pg_catalog"."pg_auth_members"
    ADD CONSTRAINT "pg_auth_members_member_role_index" UNIQUE ("member", "roleid", "grantor");



ALTER TABLE ONLY "pg_catalog"."pg_auth_members"
    ADD CONSTRAINT "pg_auth_members_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_auth_members"
    ADD CONSTRAINT "pg_auth_members_role_member_index" UNIQUE ("roleid", "member", "grantor");



ALTER TABLE ONLY "pg_catalog"."pg_authid"
    ADD CONSTRAINT "pg_authid_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_authid"
    ADD CONSTRAINT "pg_authid_rolname_index" UNIQUE ("rolname");


SET default_tablespace = '';


ALTER TABLE ONLY "pg_catalog"."pg_cast"
    ADD CONSTRAINT "pg_cast_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_cast"
    ADD CONSTRAINT "pg_cast_source_target_index" UNIQUE ("castsource", "casttarget");



ALTER TABLE ONLY "pg_catalog"."pg_class"
    ADD CONSTRAINT "pg_class_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_class"
    ADD CONSTRAINT "pg_class_relname_nsp_index" UNIQUE ("relname", "relnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_collation"
    ADD CONSTRAINT "pg_collation_name_enc_nsp_index" UNIQUE ("collname", "collencoding", "collnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_collation"
    ADD CONSTRAINT "pg_collation_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_constraint"
    ADD CONSTRAINT "pg_constraint_conrelid_contypid_conname_index" UNIQUE ("conrelid", "contypid", "conname");



ALTER TABLE ONLY "pg_catalog"."pg_constraint"
    ADD CONSTRAINT "pg_constraint_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_conversion"
    ADD CONSTRAINT "pg_conversion_default_index" UNIQUE ("connamespace", "conforencoding", "contoencoding", "oid");



ALTER TABLE ONLY "pg_catalog"."pg_conversion"
    ADD CONSTRAINT "pg_conversion_name_nsp_index" UNIQUE ("conname", "connamespace");



ALTER TABLE ONLY "pg_catalog"."pg_conversion"
    ADD CONSTRAINT "pg_conversion_oid_index" PRIMARY KEY ("oid");


SET default_tablespace = "pg_global";


ALTER TABLE ONLY "pg_catalog"."pg_database"
    ADD CONSTRAINT "pg_database_datname_index" UNIQUE ("datname");



ALTER TABLE ONLY "pg_catalog"."pg_database"
    ADD CONSTRAINT "pg_database_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_db_role_setting"
    ADD CONSTRAINT "pg_db_role_setting_databaseid_rol_index" PRIMARY KEY ("setdatabase", "setrole");


SET default_tablespace = '';


ALTER TABLE ONLY "pg_catalog"."pg_default_acl"
    ADD CONSTRAINT "pg_default_acl_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_default_acl"
    ADD CONSTRAINT "pg_default_acl_role_nsp_obj_index" UNIQUE ("defaclrole", "defaclnamespace", "defaclobjtype");



ALTER TABLE ONLY "pg_catalog"."pg_description"
    ADD CONSTRAINT "pg_description_o_c_o_index" PRIMARY KEY ("objoid", "classoid", "objsubid");



ALTER TABLE ONLY "pg_catalog"."pg_enum"
    ADD CONSTRAINT "pg_enum_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_enum"
    ADD CONSTRAINT "pg_enum_typid_label_index" UNIQUE ("enumtypid", "enumlabel");



ALTER TABLE ONLY "pg_catalog"."pg_enum"
    ADD CONSTRAINT "pg_enum_typid_sortorder_index" UNIQUE ("enumtypid", "enumsortorder");



ALTER TABLE ONLY "pg_catalog"."pg_event_trigger"
    ADD CONSTRAINT "pg_event_trigger_evtname_index" UNIQUE ("evtname");



ALTER TABLE ONLY "pg_catalog"."pg_event_trigger"
    ADD CONSTRAINT "pg_event_trigger_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_extension"
    ADD CONSTRAINT "pg_extension_name_index" UNIQUE ("extname");



ALTER TABLE ONLY "pg_catalog"."pg_extension"
    ADD CONSTRAINT "pg_extension_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_foreign_data_wrapper"
    ADD CONSTRAINT "pg_foreign_data_wrapper_name_index" UNIQUE ("fdwname");



ALTER TABLE ONLY "pg_catalog"."pg_foreign_data_wrapper"
    ADD CONSTRAINT "pg_foreign_data_wrapper_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_foreign_server"
    ADD CONSTRAINT "pg_foreign_server_name_index" UNIQUE ("srvname");



ALTER TABLE ONLY "pg_catalog"."pg_foreign_server"
    ADD CONSTRAINT "pg_foreign_server_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_foreign_table"
    ADD CONSTRAINT "pg_foreign_table_relid_index" PRIMARY KEY ("ftrelid");



ALTER TABLE ONLY "pg_catalog"."pg_index"
    ADD CONSTRAINT "pg_index_indexrelid_index" PRIMARY KEY ("indexrelid");



ALTER TABLE ONLY "pg_catalog"."pg_inherits"
    ADD CONSTRAINT "pg_inherits_relid_seqno_index" PRIMARY KEY ("inhrelid", "inhseqno");



ALTER TABLE ONLY "pg_catalog"."pg_init_privs"
    ADD CONSTRAINT "pg_init_privs_o_c_o_index" PRIMARY KEY ("objoid", "classoid", "objsubid");



ALTER TABLE ONLY "pg_catalog"."pg_language"
    ADD CONSTRAINT "pg_language_name_index" UNIQUE ("lanname");



ALTER TABLE ONLY "pg_catalog"."pg_language"
    ADD CONSTRAINT "pg_language_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_largeobject"
    ADD CONSTRAINT "pg_largeobject_loid_pn_index" PRIMARY KEY ("loid", "pageno");



ALTER TABLE ONLY "pg_catalog"."pg_largeobject_metadata"
    ADD CONSTRAINT "pg_largeobject_metadata_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_namespace"
    ADD CONSTRAINT "pg_namespace_nspname_index" UNIQUE ("nspname");



ALTER TABLE ONLY "pg_catalog"."pg_namespace"
    ADD CONSTRAINT "pg_namespace_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_opclass"
    ADD CONSTRAINT "pg_opclass_am_name_nsp_index" UNIQUE ("opcmethod", "opcname", "opcnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_opclass"
    ADD CONSTRAINT "pg_opclass_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_operator"
    ADD CONSTRAINT "pg_operator_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_operator"
    ADD CONSTRAINT "pg_operator_oprname_l_r_n_index" UNIQUE ("oprname", "oprleft", "oprright", "oprnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_opfamily"
    ADD CONSTRAINT "pg_opfamily_am_name_nsp_index" UNIQUE ("opfmethod", "opfname", "opfnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_opfamily"
    ADD CONSTRAINT "pg_opfamily_oid_index" PRIMARY KEY ("oid");


SET default_tablespace = "pg_global";


ALTER TABLE ONLY "pg_catalog"."pg_parameter_acl"
    ADD CONSTRAINT "pg_parameter_acl_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_parameter_acl"
    ADD CONSTRAINT "pg_parameter_acl_parname_index" UNIQUE ("parname");


SET default_tablespace = '';


ALTER TABLE ONLY "pg_catalog"."pg_partitioned_table"
    ADD CONSTRAINT "pg_partitioned_table_partrelid_index" PRIMARY KEY ("partrelid");



ALTER TABLE ONLY "pg_catalog"."pg_policy"
    ADD CONSTRAINT "pg_policy_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_policy"
    ADD CONSTRAINT "pg_policy_polrelid_polname_index" UNIQUE ("polrelid", "polname");



ALTER TABLE ONLY "pg_catalog"."pg_proc"
    ADD CONSTRAINT "pg_proc_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_proc"
    ADD CONSTRAINT "pg_proc_proname_args_nsp_index" UNIQUE ("proname", "proargtypes", "pronamespace");



ALTER TABLE ONLY "pg_catalog"."pg_publication_namespace"
    ADD CONSTRAINT "pg_publication_namespace_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_publication_namespace"
    ADD CONSTRAINT "pg_publication_namespace_pnnspid_pnpubid_index" UNIQUE ("pnnspid", "pnpubid");



ALTER TABLE ONLY "pg_catalog"."pg_publication"
    ADD CONSTRAINT "pg_publication_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_publication"
    ADD CONSTRAINT "pg_publication_pubname_index" UNIQUE ("pubname");



ALTER TABLE ONLY "pg_catalog"."pg_publication_rel"
    ADD CONSTRAINT "pg_publication_rel_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_publication_rel"
    ADD CONSTRAINT "pg_publication_rel_prrelid_prpubid_index" UNIQUE ("prrelid", "prpubid");



ALTER TABLE ONLY "pg_catalog"."pg_range"
    ADD CONSTRAINT "pg_range_rngmultitypid_index" UNIQUE ("rngmultitypid");



ALTER TABLE ONLY "pg_catalog"."pg_range"
    ADD CONSTRAINT "pg_range_rngtypid_index" PRIMARY KEY ("rngtypid");


SET default_tablespace = "pg_global";


ALTER TABLE ONLY "pg_catalog"."pg_replication_origin"
    ADD CONSTRAINT "pg_replication_origin_roiident_index" PRIMARY KEY ("roident");



ALTER TABLE ONLY "pg_catalog"."pg_replication_origin"
    ADD CONSTRAINT "pg_replication_origin_roname_index" UNIQUE ("roname");


SET default_tablespace = '';


ALTER TABLE ONLY "pg_catalog"."pg_rewrite"
    ADD CONSTRAINT "pg_rewrite_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_rewrite"
    ADD CONSTRAINT "pg_rewrite_rel_rulename_index" UNIQUE ("ev_class", "rulename");



ALTER TABLE ONLY "pg_catalog"."pg_seclabel"
    ADD CONSTRAINT "pg_seclabel_object_index" PRIMARY KEY ("objoid", "classoid", "objsubid", "provider");



ALTER TABLE ONLY "pg_catalog"."pg_sequence"
    ADD CONSTRAINT "pg_sequence_seqrelid_index" PRIMARY KEY ("seqrelid");


SET default_tablespace = "pg_global";


ALTER TABLE ONLY "pg_catalog"."pg_shdescription"
    ADD CONSTRAINT "pg_shdescription_o_c_index" PRIMARY KEY ("objoid", "classoid");



ALTER TABLE ONLY "pg_catalog"."pg_shseclabel"
    ADD CONSTRAINT "pg_shseclabel_object_index" PRIMARY KEY ("objoid", "classoid", "provider");


SET default_tablespace = '';


ALTER TABLE ONLY "pg_catalog"."pg_statistic_ext_data"
    ADD CONSTRAINT "pg_statistic_ext_data_stxoid_inh_index" PRIMARY KEY ("stxoid", "stxdinherit");



ALTER TABLE ONLY "pg_catalog"."pg_statistic_ext"
    ADD CONSTRAINT "pg_statistic_ext_name_index" UNIQUE ("stxname", "stxnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_statistic_ext"
    ADD CONSTRAINT "pg_statistic_ext_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_statistic"
    ADD CONSTRAINT "pg_statistic_relid_att_inh_index" PRIMARY KEY ("starelid", "staattnum", "stainherit");


SET default_tablespace = "pg_global";


ALTER TABLE ONLY "pg_catalog"."pg_subscription"
    ADD CONSTRAINT "pg_subscription_oid_index" PRIMARY KEY ("oid");


SET default_tablespace = '';


ALTER TABLE ONLY "pg_catalog"."pg_subscription_rel"
    ADD CONSTRAINT "pg_subscription_rel_srrelid_srsubid_index" PRIMARY KEY ("srrelid", "srsubid");


SET default_tablespace = "pg_global";


ALTER TABLE ONLY "pg_catalog"."pg_subscription"
    ADD CONSTRAINT "pg_subscription_subname_index" UNIQUE ("subdbid", "subname");



ALTER TABLE ONLY "pg_catalog"."pg_tablespace"
    ADD CONSTRAINT "pg_tablespace_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_tablespace"
    ADD CONSTRAINT "pg_tablespace_spcname_index" UNIQUE ("spcname");


SET default_tablespace = '';


ALTER TABLE ONLY "pg_catalog"."pg_transform"
    ADD CONSTRAINT "pg_transform_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_transform"
    ADD CONSTRAINT "pg_transform_type_lang_index" UNIQUE ("trftype", "trflang");



ALTER TABLE ONLY "pg_catalog"."pg_trigger"
    ADD CONSTRAINT "pg_trigger_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_trigger"
    ADD CONSTRAINT "pg_trigger_tgrelid_tgname_index" UNIQUE ("tgrelid", "tgname");



ALTER TABLE ONLY "pg_catalog"."pg_ts_config"
    ADD CONSTRAINT "pg_ts_config_cfgname_index" UNIQUE ("cfgname", "cfgnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_ts_config_map"
    ADD CONSTRAINT "pg_ts_config_map_index" PRIMARY KEY ("mapcfg", "maptokentype", "mapseqno");



ALTER TABLE ONLY "pg_catalog"."pg_ts_config"
    ADD CONSTRAINT "pg_ts_config_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_ts_dict"
    ADD CONSTRAINT "pg_ts_dict_dictname_index" UNIQUE ("dictname", "dictnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_ts_dict"
    ADD CONSTRAINT "pg_ts_dict_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_ts_parser"
    ADD CONSTRAINT "pg_ts_parser_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_ts_parser"
    ADD CONSTRAINT "pg_ts_parser_prsname_index" UNIQUE ("prsname", "prsnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_ts_template"
    ADD CONSTRAINT "pg_ts_template_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_ts_template"
    ADD CONSTRAINT "pg_ts_template_tmplname_index" UNIQUE ("tmplname", "tmplnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_type"
    ADD CONSTRAINT "pg_type_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_type"
    ADD CONSTRAINT "pg_type_typname_nsp_index" UNIQUE ("typname", "typnamespace");



ALTER TABLE ONLY "pg_catalog"."pg_user_mapping"
    ADD CONSTRAINT "pg_user_mapping_oid_index" PRIMARY KEY ("oid");



ALTER TABLE ONLY "pg_catalog"."pg_user_mapping"
    ADD CONSTRAINT "pg_user_mapping_user_server_index" UNIQUE ("umuser", "umserver");



ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "ingredients_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "ingredients_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."meal_plan_recipes"
    ADD CONSTRAINT "meal_plan_recipes_meal_plan_id_recipe_id_meal_type_day_of_w_key" UNIQUE ("meal_plan_id", "recipe_id", "meal_type", "day_of_week");



ALTER TABLE ONLY "public"."meal_plan_recipes"
    ADD CONSTRAINT "meal_plan_recipes_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."meal_plan_stores"
    ADD CONSTRAINT "meal_plan_stores_pkey" PRIMARY KEY ("meal_plan_id", "place_id");



ALTER TABLE ONLY "public"."meal_plans"
    ADD CONSTRAINT "meal_plans_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."nutrition_requirements"
    ADD CONSTRAINT "nutrition_requirements_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."prices"
    ADD CONSTRAINT "prices_ingredient_id_store_id_key" UNIQUE ("ingredient_id", "store_id");



ALTER TABLE ONLY "public"."prices"
    ADD CONSTRAINT "prices_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."recipe_ingredients"
    ADD CONSTRAINT "recipe_ingredients_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."recipes"
    ADD CONSTRAINT "recipes_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."recipes"
    ADD CONSTRAINT "recipes_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."stores"
    ADD CONSTRAINT "stores_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."stores"
    ADD CONSTRAINT "stores_place_id_key" UNIQUE ("place_id");



ALTER TABLE ONLY "public"."stores_prices"
    ADD CONSTRAINT "stores_prices_pkey" PRIMARY KEY ("place_id", "ingredient_name", "unit");



ALTER TABLE ONLY "public"."test_embeddings"
    ADD CONSTRAINT "test_embeddings_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."test_setup"
    ADD CONSTRAINT "test_setup_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."test_vectors"
    ADD CONSTRAINT "test_vectors_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "realtime"."messages"
    ADD CONSTRAINT "messages_pkey" PRIMARY KEY ("id", "inserted_at");



ALTER TABLE ONLY "realtime"."subscription"
    ADD CONSTRAINT "pk_subscription" PRIMARY KEY ("id");



ALTER TABLE ONLY "realtime"."schema_migrations"
    ADD CONSTRAINT "schema_migrations_pkey" PRIMARY KEY ("version");



ALTER TABLE ONLY "storage"."buckets"
    ADD CONSTRAINT "buckets_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "storage"."migrations"
    ADD CONSTRAINT "migrations_name_key" UNIQUE ("name");



ALTER TABLE ONLY "storage"."migrations"
    ADD CONSTRAINT "migrations_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "storage"."objects"
    ADD CONSTRAINT "objects_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "storage"."s3_multipart_uploads_parts"
    ADD CONSTRAINT "s3_multipart_uploads_parts_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "storage"."s3_multipart_uploads"
    ADD CONSTRAINT "s3_multipart_uploads_pkey" PRIMARY KEY ("id");



CREATE INDEX "audit_logs_instance_id_idx" ON "auth"."audit_log_entries" USING "btree" ("instance_id");



CREATE UNIQUE INDEX "confirmation_token_idx" ON "auth"."users" USING "btree" ("confirmation_token") WHERE (("confirmation_token")::"text" !~ '^[0-9 ]*$'::"text");



CREATE UNIQUE INDEX "email_change_token_current_idx" ON "auth"."users" USING "btree" ("email_change_token_current") WHERE (("email_change_token_current")::"text" !~ '^[0-9 ]*$'::"text");



CREATE UNIQUE INDEX "email_change_token_new_idx" ON "auth"."users" USING "btree" ("email_change_token_new") WHERE (("email_change_token_new")::"text" !~ '^[0-9 ]*$'::"text");



CREATE INDEX "factor_id_created_at_idx" ON "auth"."mfa_factors" USING "btree" ("user_id", "created_at");



CREATE INDEX "flow_state_created_at_idx" ON "auth"."flow_state" USING "btree" ("created_at" DESC);



CREATE INDEX "identities_email_idx" ON "auth"."identities" USING "btree" ("email" "text_pattern_ops");



COMMENT ON INDEX "auth"."identities_email_idx" IS 'Auth: Ensures indexed queries on the email column';



CREATE INDEX "identities_user_id_idx" ON "auth"."identities" USING "btree" ("user_id");



CREATE INDEX "idx_auth_code" ON "auth"."flow_state" USING "btree" ("auth_code");



CREATE INDEX "idx_user_id_auth_method" ON "auth"."flow_state" USING "btree" ("user_id", "authentication_method");



CREATE INDEX "mfa_challenge_created_at_idx" ON "auth"."mfa_challenges" USING "btree" ("created_at" DESC);



CREATE UNIQUE INDEX "mfa_factors_user_friendly_name_unique" ON "auth"."mfa_factors" USING "btree" ("friendly_name", "user_id") WHERE (TRIM(BOTH FROM "friendly_name") <> ''::"text");



CREATE INDEX "mfa_factors_user_id_idx" ON "auth"."mfa_factors" USING "btree" ("user_id");



CREATE INDEX "one_time_tokens_relates_to_hash_idx" ON "auth"."one_time_tokens" USING "hash" ("relates_to");



CREATE INDEX "one_time_tokens_token_hash_hash_idx" ON "auth"."one_time_tokens" USING "hash" ("token_hash");



CREATE UNIQUE INDEX "one_time_tokens_user_id_token_type_key" ON "auth"."one_time_tokens" USING "btree" ("user_id", "token_type");



CREATE UNIQUE INDEX "reauthentication_token_idx" ON "auth"."users" USING "btree" ("reauthentication_token") WHERE (("reauthentication_token")::"text" !~ '^[0-9 ]*$'::"text");



CREATE UNIQUE INDEX "recovery_token_idx" ON "auth"."users" USING "btree" ("recovery_token") WHERE (("recovery_token")::"text" !~ '^[0-9 ]*$'::"text");



CREATE INDEX "refresh_tokens_instance_id_idx" ON "auth"."refresh_tokens" USING "btree" ("instance_id");



CREATE INDEX "refresh_tokens_instance_id_user_id_idx" ON "auth"."refresh_tokens" USING "btree" ("instance_id", "user_id");



CREATE INDEX "refresh_tokens_parent_idx" ON "auth"."refresh_tokens" USING "btree" ("parent");



CREATE INDEX "refresh_tokens_session_id_revoked_idx" ON "auth"."refresh_tokens" USING "btree" ("session_id", "revoked");



CREATE INDEX "refresh_tokens_updated_at_idx" ON "auth"."refresh_tokens" USING "btree" ("updated_at" DESC);



CREATE INDEX "saml_providers_sso_provider_id_idx" ON "auth"."saml_providers" USING "btree" ("sso_provider_id");



CREATE INDEX "saml_relay_states_created_at_idx" ON "auth"."saml_relay_states" USING "btree" ("created_at" DESC);



CREATE INDEX "saml_relay_states_for_email_idx" ON "auth"."saml_relay_states" USING "btree" ("for_email");



CREATE INDEX "saml_relay_states_sso_provider_id_idx" ON "auth"."saml_relay_states" USING "btree" ("sso_provider_id");



CREATE INDEX "sessions_not_after_idx" ON "auth"."sessions" USING "btree" ("not_after" DESC);



CREATE INDEX "sessions_user_id_idx" ON "auth"."sessions" USING "btree" ("user_id");



CREATE UNIQUE INDEX "sso_domains_domain_idx" ON "auth"."sso_domains" USING "btree" ("lower"("domain"));



CREATE INDEX "sso_domains_sso_provider_id_idx" ON "auth"."sso_domains" USING "btree" ("sso_provider_id");



CREATE UNIQUE INDEX "sso_providers_resource_id_idx" ON "auth"."sso_providers" USING "btree" ("lower"("resource_id"));



CREATE UNIQUE INDEX "unique_phone_factor_per_user" ON "auth"."mfa_factors" USING "btree" ("user_id", "phone");



CREATE INDEX "user_id_created_at_idx" ON "auth"."sessions" USING "btree" ("user_id", "created_at");



CREATE UNIQUE INDEX "users_email_partial_key" ON "auth"."users" USING "btree" ("email") WHERE ("is_sso_user" = false);



COMMENT ON INDEX "auth"."users_email_partial_key" IS 'Auth: A partial unique index that applies only when is_sso_user is false';



CREATE INDEX "users_instance_id_email_idx" ON "auth"."users" USING "btree" ("instance_id", "lower"(("email")::"text"));



CREATE INDEX "users_instance_id_idx" ON "auth"."users" USING "btree" ("instance_id");



CREATE INDEX "users_is_anonymous_idx" ON "auth"."users" USING "btree" ("is_anonymous");


SET default_tablespace = "pg_global";


CREATE INDEX "pg_auth_members_grantor_index" ON "pg_catalog"."pg_auth_members" USING "btree" ("grantor");


SET default_tablespace = '';


CREATE INDEX "pg_class_tblspc_relfilenode_index" ON "pg_catalog"."pg_class" USING "btree" ("reltablespace", "relfilenode");



CREATE INDEX "pg_constraint_conname_nsp_index" ON "pg_catalog"."pg_constraint" USING "btree" ("conname", "connamespace");



CREATE INDEX "pg_constraint_conparentid_index" ON "pg_catalog"."pg_constraint" USING "btree" ("conparentid");



CREATE INDEX "pg_constraint_contypid_index" ON "pg_catalog"."pg_constraint" USING "btree" ("contypid");



CREATE INDEX "pg_depend_depender_index" ON "pg_catalog"."pg_depend" USING "btree" ("classid", "objid", "objsubid");



CREATE INDEX "pg_depend_reference_index" ON "pg_catalog"."pg_depend" USING "btree" ("refclassid", "refobjid", "refobjsubid");



CREATE INDEX "pg_index_indrelid_index" ON "pg_catalog"."pg_index" USING "btree" ("indrelid");



CREATE INDEX "pg_inherits_parent_index" ON "pg_catalog"."pg_inherits" USING "btree" ("inhparent");



CREATE INDEX "pg_publication_rel_prpubid_index" ON "pg_catalog"."pg_publication_rel" USING "btree" ("prpubid");


SET default_tablespace = "pg_global";


CREATE INDEX "pg_shdepend_depender_index" ON "pg_catalog"."pg_shdepend" USING "btree" ("dbid", "classid", "objid", "objsubid");



CREATE INDEX "pg_shdepend_reference_index" ON "pg_catalog"."pg_shdepend" USING "btree" ("refclassid", "refobjid");


SET default_tablespace = '';


CREATE INDEX "pg_statistic_ext_relid_index" ON "pg_catalog"."pg_statistic_ext" USING "btree" ("stxrelid");



CREATE INDEX "pg_trigger_tgconstraint_index" ON "pg_catalog"."pg_trigger" USING "btree" ("tgconstraint");



CREATE INDEX "idx_ingredients_embedding" ON "public"."ingredients" USING "ivfflat" ("embedding" "public"."vector_cosine_ops");



CREATE INDEX "idx_ingredients_store_id" ON "public"."ingredients" USING "btree" ("store_id");



CREATE INDEX "idx_meal_plan_recipes_meal_plan_id" ON "public"."meal_plan_recipes" USING "btree" ("meal_plan_id");



CREATE INDEX "idx_meal_plans_user_id" ON "public"."meal_plans" USING "btree" ("user_id");



CREATE INDEX "idx_prices_ingredient" ON "public"."prices" USING "btree" ("ingredient_id");



CREATE INDEX "idx_recipe_ingredients_ingredient" ON "public"."recipe_ingredients" USING "btree" ("ingredient_id");



CREATE INDEX "idx_recipe_ingredients_recipe_id" ON "public"."recipe_ingredients" USING "btree" ("recipe_id");



CREATE INDEX "idx_stores_kroger_location_id" ON "public"."stores" USING "btree" ("kroger_location_id");



CREATE INDEX "idx_stores_prices_ing" ON "public"."stores_prices" USING "btree" ("ingredient_name");



CREATE INDEX "idx_stores_walmart_store_id" ON "public"."stores" USING "btree" ("walmart_store_id");



CREATE INDEX "meal_plan_stores_place_idx" ON "public"."meal_plan_stores" USING "btree" ("place_id");



CREATE UNIQUE INDEX "unique_nutrition_requirements_per_user" ON "public"."nutrition_requirements" USING "btree" ("user_id");



CREATE INDEX "ix_realtime_subscription_entity" ON "realtime"."subscription" USING "btree" ("entity");



CREATE UNIQUE INDEX "subscription_subscription_id_entity_filters_key" ON "realtime"."subscription" USING "btree" ("subscription_id", "entity", "filters");



CREATE UNIQUE INDEX "bname" ON "storage"."buckets" USING "btree" ("name");



CREATE UNIQUE INDEX "bucketid_objname" ON "storage"."objects" USING "btree" ("bucket_id", "name");



CREATE INDEX "idx_multipart_uploads_list" ON "storage"."s3_multipart_uploads" USING "btree" ("bucket_id", "key", "created_at");



CREATE INDEX "idx_objects_bucket_id_name" ON "storage"."objects" USING "btree" ("bucket_id", "name" COLLATE "C");



CREATE INDEX "name_prefix_search" ON "storage"."objects" USING "btree" ("name" "text_pattern_ops");



CREATE RULE "pg_settings_n" AS
    ON UPDATE TO "pg_catalog"."pg_settings" DO INSTEAD NOTHING;



CREATE RULE "pg_settings_u" AS
    ON UPDATE TO "pg_catalog"."pg_settings"
   WHERE ("new"."name" = "old"."name") DO  SELECT "set_config"("old"."name", "new"."setting", false) AS "set_config";



CREATE OR REPLACE TRIGGER "set_updated_at" BEFORE UPDATE ON "public"."profiles" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();



CREATE OR REPLACE TRIGGER "tr_check_filters" BEFORE INSERT OR UPDATE ON "realtime"."subscription" FOR EACH ROW EXECUTE FUNCTION "realtime"."subscription_check_filters"();



CREATE OR REPLACE TRIGGER "update_objects_updated_at" BEFORE UPDATE ON "storage"."objects" FOR EACH ROW EXECUTE FUNCTION "storage"."update_updated_at_column"();



ALTER TABLE ONLY "auth"."identities"
    ADD CONSTRAINT "identities_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."mfa_amr_claims"
    ADD CONSTRAINT "mfa_amr_claims_session_id_fkey" FOREIGN KEY ("session_id") REFERENCES "auth"."sessions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."mfa_challenges"
    ADD CONSTRAINT "mfa_challenges_auth_factor_id_fkey" FOREIGN KEY ("factor_id") REFERENCES "auth"."mfa_factors"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."mfa_factors"
    ADD CONSTRAINT "mfa_factors_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."one_time_tokens"
    ADD CONSTRAINT "one_time_tokens_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."refresh_tokens"
    ADD CONSTRAINT "refresh_tokens_session_id_fkey" FOREIGN KEY ("session_id") REFERENCES "auth"."sessions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."saml_providers"
    ADD CONSTRAINT "saml_providers_sso_provider_id_fkey" FOREIGN KEY ("sso_provider_id") REFERENCES "auth"."sso_providers"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."saml_relay_states"
    ADD CONSTRAINT "saml_relay_states_flow_state_id_fkey" FOREIGN KEY ("flow_state_id") REFERENCES "auth"."flow_state"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."saml_relay_states"
    ADD CONSTRAINT "saml_relay_states_sso_provider_id_fkey" FOREIGN KEY ("sso_provider_id") REFERENCES "auth"."sso_providers"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."sessions"
    ADD CONSTRAINT "sessions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "auth"."sso_domains"
    ADD CONSTRAINT "sso_domains_sso_provider_id_fkey" FOREIGN KEY ("sso_provider_id") REFERENCES "auth"."sso_providers"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "ingredients_store_id_fkey" FOREIGN KEY ("store_id") REFERENCES "public"."stores"("id");



ALTER TABLE ONLY "public"."meal_plan_recipes"
    ADD CONSTRAINT "meal_plan_recipes_meal_plan_id_fkey" FOREIGN KEY ("meal_plan_id") REFERENCES "public"."meal_plans"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."meal_plan_recipes"
    ADD CONSTRAINT "meal_plan_recipes_recipe_id_fkey" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."meal_plan_stores"
    ADD CONSTRAINT "meal_plan_stores_meal_plan_id_fkey" FOREIGN KEY ("meal_plan_id") REFERENCES "public"."meal_plans"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."meal_plans"
    ADD CONSTRAINT "meal_plans_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."nutrition_requirements"
    ADD CONSTRAINT "nutrition_requirements_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."prices"
    ADD CONSTRAINT "prices_ingredient_id_fkey" FOREIGN KEY ("ingredient_id") REFERENCES "public"."ingredients"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."prices"
    ADD CONSTRAINT "prices_store_id_fkey" FOREIGN KEY ("store_id") REFERENCES "public"."stores"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."recipe_ingredients"
    ADD CONSTRAINT "recipe_ingredients_ingredient_id_fkey" FOREIGN KEY ("ingredient_id") REFERENCES "public"."ingredients"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."recipe_ingredients"
    ADD CONSTRAINT "recipe_ingredients_recipe_id_fkey" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."stores_prices"
    ADD CONSTRAINT "stores_prices_place_id_fkey" FOREIGN KEY ("place_id") REFERENCES "public"."stores"("place_id") ON DELETE CASCADE;



ALTER TABLE ONLY "storage"."objects"
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY ("bucket_id") REFERENCES "storage"."buckets"("id");



ALTER TABLE ONLY "storage"."s3_multipart_uploads"
    ADD CONSTRAINT "s3_multipart_uploads_bucket_id_fkey" FOREIGN KEY ("bucket_id") REFERENCES "storage"."buckets"("id");



ALTER TABLE ONLY "storage"."s3_multipart_uploads_parts"
    ADD CONSTRAINT "s3_multipart_uploads_parts_bucket_id_fkey" FOREIGN KEY ("bucket_id") REFERENCES "storage"."buckets"("id");



ALTER TABLE ONLY "storage"."s3_multipart_uploads_parts"
    ADD CONSTRAINT "s3_multipart_uploads_parts_upload_id_fkey" FOREIGN KEY ("upload_id") REFERENCES "storage"."s3_multipart_uploads"("id") ON DELETE CASCADE;



ALTER TABLE "auth"."audit_log_entries" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."flow_state" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."identities" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."instances" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."mfa_amr_claims" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."mfa_challenges" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."mfa_factors" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."one_time_tokens" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."refresh_tokens" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."saml_providers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."saml_relay_states" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."schema_migrations" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."sessions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."sso_domains" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."sso_providers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "auth"."users" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Allow all operations on test tables" ON "public"."test_setup" USING (true) WITH CHECK (true);



CREATE POLICY "Allow all operations on test vectors" ON "public"."test_vectors" USING (true) WITH CHECK (true);



CREATE POLICY "Anyone can view ingredients" ON "public"."ingredients" FOR SELECT USING (true);



CREATE POLICY "Anyone can view recipes" ON "public"."recipes" FOR SELECT USING (true);



CREATE POLICY "Stores are viewable by all authenticated users" ON "public"."stores" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));



CREATE POLICY "Users can create their own meal plans" ON "public"."meal_plans" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can delete their own meal plans" ON "public"."meal_plans" FOR DELETE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can insert own profile" ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Users can update own profile" ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));



CREATE POLICY "Users can update their own meal plans" ON "public"."meal_plans" FOR UPDATE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view own profile" ON "public"."profiles" FOR SELECT USING (("auth"."uid"() = "id"));



CREATE POLICY "Users can view their own meal plans" ON "public"."meal_plans" FOR SELECT USING (("auth"."uid"() = "user_id"));



ALTER TABLE "public"."ingredients" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."meal_plan_recipes" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."meal_plans" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."recipe_ingredients" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."recipes" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."stores" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."test_setup" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."test_vectors" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "realtime"."messages" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "storage"."buckets" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "storage"."migrations" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "storage"."objects" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "storage"."s3_multipart_uploads" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "storage"."s3_multipart_uploads_parts" ENABLE ROW LEVEL SECURITY;


GRANT USAGE ON SCHEMA "auth" TO "anon";
GRANT USAGE ON SCHEMA "auth" TO "authenticated";
GRANT USAGE ON SCHEMA "auth" TO "service_role";
GRANT ALL ON SCHEMA "auth" TO "supabase_auth_admin";
GRANT ALL ON SCHEMA "auth" TO "dashboard_user";
GRANT USAGE ON SCHEMA "auth" TO "postgres";



GRANT USAGE ON SCHEMA "extensions" TO "anon";
GRANT USAGE ON SCHEMA "extensions" TO "authenticated";
GRANT USAGE ON SCHEMA "extensions" TO "service_role";
GRANT ALL ON SCHEMA "extensions" TO "dashboard_user";



GRANT USAGE ON SCHEMA "information_schema" TO PUBLIC;



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



GRANT USAGE ON SCHEMA "realtime" TO "postgres";
GRANT USAGE ON SCHEMA "realtime" TO "anon";
GRANT USAGE ON SCHEMA "realtime" TO "authenticated";
GRANT USAGE ON SCHEMA "realtime" TO "service_role";
GRANT ALL ON SCHEMA "realtime" TO "supabase_realtime_admin";



GRANT USAGE ON SCHEMA "storage" TO "postgres";
GRANT USAGE ON SCHEMA "storage" TO "anon";
GRANT USAGE ON SCHEMA "storage" TO "authenticated";
GRANT USAGE ON SCHEMA "storage" TO "service_role";
GRANT ALL ON SCHEMA "storage" TO "supabase_storage_admin";
GRANT ALL ON SCHEMA "storage" TO "dashboard_user";



GRANT USAGE ON SCHEMA "vault" TO "postgres" WITH GRANT OPTION;
GRANT USAGE ON SCHEMA "vault" TO "service_role";



GRANT ALL ON FUNCTION "auth"."email"() TO "dashboard_user";
GRANT ALL ON FUNCTION "auth"."email"() TO "postgres";



GRANT ALL ON FUNCTION "auth"."jwt"() TO "postgres";
GRANT ALL ON FUNCTION "auth"."jwt"() TO "dashboard_user";



GRANT ALL ON FUNCTION "auth"."role"() TO "dashboard_user";
GRANT ALL ON FUNCTION "auth"."role"() TO "postgres";



GRANT ALL ON FUNCTION "auth"."uid"() TO "dashboard_user";
GRANT ALL ON FUNCTION "auth"."uid"() TO "postgres";



REVOKE ALL ON FUNCTION "extensions"."grant_pg_cron_access"() FROM "supabase_admin";
GRANT ALL ON FUNCTION "extensions"."grant_pg_cron_access"() TO "supabase_admin" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."grant_pg_cron_access"() TO "dashboard_user";
GRANT ALL ON FUNCTION "extensions"."grant_pg_cron_access"() TO "postgres" WITH GRANT OPTION;



GRANT ALL ON FUNCTION "extensions"."grant_pg_graphql_access"() TO "postgres" WITH GRANT OPTION;



REVOKE ALL ON FUNCTION "extensions"."grant_pg_net_access"() FROM "supabase_admin";
GRANT ALL ON FUNCTION "extensions"."grant_pg_net_access"() TO "supabase_admin" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."grant_pg_net_access"() TO "dashboard_user";
GRANT ALL ON FUNCTION "extensions"."grant_pg_net_access"() TO "postgres" WITH GRANT OPTION;



GRANT ALL ON FUNCTION "extensions"."pgrst_ddl_watch"() TO "postgres" WITH GRANT OPTION;



GRANT ALL ON FUNCTION "extensions"."pgrst_drop_watch"() TO "postgres" WITH GRANT OPTION;



GRANT ALL ON FUNCTION "extensions"."set_graphql_placeholder"() TO "postgres" WITH GRANT OPTION;



REVOKE ALL ON FUNCTION "pgbouncer"."get_auth"("p_usename" "text") FROM PUBLIC;
GRANT ALL ON FUNCTION "pgbouncer"."get_auth"("p_usename" "text") TO "pgbouncer";
GRANT ALL ON FUNCTION "pgbouncer"."get_auth"("p_usename" "text") TO "postgres";



GRANT ALL ON FUNCTION "public"."handle_profile_update"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_profile_update"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_profile_update"() TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "service_role";



GRANT ALL ON FUNCTION "public"."match_embeddings"("query_embedding" "public"."vector", "match_threshold" double precision, "match_count" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."match_embeddings"("query_embedding" "public"."vector", "match_threshold" double precision, "match_count" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."match_embeddings"("query_embedding" "public"."vector", "match_threshold" double precision, "match_count" integer) TO "service_role";



GRANT ALL ON FUNCTION "public"."raw_sql"("query" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."raw_sql"("query" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."raw_sql"("query" "text") TO "service_role";



GRANT ALL ON FUNCTION "realtime"."apply_rls"("wal" "jsonb", "max_record_bytes" integer) TO "postgres";
GRANT ALL ON FUNCTION "realtime"."apply_rls"("wal" "jsonb", "max_record_bytes" integer) TO "dashboard_user";
GRANT ALL ON FUNCTION "realtime"."apply_rls"("wal" "jsonb", "max_record_bytes" integer) TO "anon";
GRANT ALL ON FUNCTION "realtime"."apply_rls"("wal" "jsonb", "max_record_bytes" integer) TO "authenticated";
GRANT ALL ON FUNCTION "realtime"."apply_rls"("wal" "jsonb", "max_record_bytes" integer) TO "service_role";
GRANT ALL ON FUNCTION "realtime"."apply_rls"("wal" "jsonb", "max_record_bytes" integer) TO "supabase_realtime_admin";



GRANT ALL ON FUNCTION "realtime"."broadcast_changes"("topic_name" "text", "event_name" "text", "operation" "text", "table_name" "text", "table_schema" "text", "new" "record", "old" "record", "level" "text") TO "postgres";
GRANT ALL ON FUNCTION "realtime"."broadcast_changes"("topic_name" "text", "event_name" "text", "operation" "text", "table_name" "text", "table_schema" "text", "new" "record", "old" "record", "level" "text") TO "dashboard_user";



GRANT ALL ON FUNCTION "realtime"."build_prepared_statement_sql"("prepared_statement_name" "text", "entity" "regclass", "columns" "realtime"."wal_column"[]) TO "postgres";
GRANT ALL ON FUNCTION "realtime"."build_prepared_statement_sql"("prepared_statement_name" "text", "entity" "regclass", "columns" "realtime"."wal_column"[]) TO "dashboard_user";
GRANT ALL ON FUNCTION "realtime"."build_prepared_statement_sql"("prepared_statement_name" "text", "entity" "regclass", "columns" "realtime"."wal_column"[]) TO "anon";
GRANT ALL ON FUNCTION "realtime"."build_prepared_statement_sql"("prepared_statement_name" "text", "entity" "regclass", "columns" "realtime"."wal_column"[]) TO "authenticated";
GRANT ALL ON FUNCTION "realtime"."build_prepared_statement_sql"("prepared_statement_name" "text", "entity" "regclass", "columns" "realtime"."wal_column"[]) TO "service_role";
GRANT ALL ON FUNCTION "realtime"."build_prepared_statement_sql"("prepared_statement_name" "text", "entity" "regclass", "columns" "realtime"."wal_column"[]) TO "supabase_realtime_admin";



GRANT ALL ON FUNCTION "realtime"."cast"("val" "text", "type_" "regtype") TO "postgres";
GRANT ALL ON FUNCTION "realtime"."cast"("val" "text", "type_" "regtype") TO "dashboard_user";
GRANT ALL ON FUNCTION "realtime"."cast"("val" "text", "type_" "regtype") TO "anon";
GRANT ALL ON FUNCTION "realtime"."cast"("val" "text", "type_" "regtype") TO "authenticated";
GRANT ALL ON FUNCTION "realtime"."cast"("val" "text", "type_" "regtype") TO "service_role";
GRANT ALL ON FUNCTION "realtime"."cast"("val" "text", "type_" "regtype") TO "supabase_realtime_admin";



GRANT ALL ON FUNCTION "realtime"."check_equality_op"("op" "realtime"."equality_op", "type_" "regtype", "val_1" "text", "val_2" "text") TO "postgres";
GRANT ALL ON FUNCTION "realtime"."check_equality_op"("op" "realtime"."equality_op", "type_" "regtype", "val_1" "text", "val_2" "text") TO "dashboard_user";
GRANT ALL ON FUNCTION "realtime"."check_equality_op"("op" "realtime"."equality_op", "type_" "regtype", "val_1" "text", "val_2" "text") TO "anon";
GRANT ALL ON FUNCTION "realtime"."check_equality_op"("op" "realtime"."equality_op", "type_" "regtype", "val_1" "text", "val_2" "text") TO "authenticated";
GRANT ALL ON FUNCTION "realtime"."check_equality_op"("op" "realtime"."equality_op", "type_" "regtype", "val_1" "text", "val_2" "text") TO "service_role";
GRANT ALL ON FUNCTION "realtime"."check_equality_op"("op" "realtime"."equality_op", "type_" "regtype", "val_1" "text", "val_2" "text") TO "supabase_realtime_admin";



GRANT ALL ON FUNCTION "realtime"."is_visible_through_filters"("columns" "realtime"."wal_column"[], "filters" "realtime"."user_defined_filter"[]) TO "postgres";
GRANT ALL ON FUNCTION "realtime"."is_visible_through_filters"("columns" "realtime"."wal_column"[], "filters" "realtime"."user_defined_filter"[]) TO "dashboard_user";
GRANT ALL ON FUNCTION "realtime"."is_visible_through_filters"("columns" "realtime"."wal_column"[], "filters" "realtime"."user_defined_filter"[]) TO "anon";
GRANT ALL ON FUNCTION "realtime"."is_visible_through_filters"("columns" "realtime"."wal_column"[], "filters" "realtime"."user_defined_filter"[]) TO "authenticated";
GRANT ALL ON FUNCTION "realtime"."is_visible_through_filters"("columns" "realtime"."wal_column"[], "filters" "realtime"."user_defined_filter"[]) TO "service_role";
GRANT ALL ON FUNCTION "realtime"."is_visible_through_filters"("columns" "realtime"."wal_column"[], "filters" "realtime"."user_defined_filter"[]) TO "supabase_realtime_admin";



GRANT ALL ON FUNCTION "realtime"."list_changes"("publication" "name", "slot_name" "name", "max_changes" integer, "max_record_bytes" integer) TO "postgres";
GRANT ALL ON FUNCTION "realtime"."list_changes"("publication" "name", "slot_name" "name", "max_changes" integer, "max_record_bytes" integer) TO "dashboard_user";
GRANT ALL ON FUNCTION "realtime"."list_changes"("publication" "name", "slot_name" "name", "max_changes" integer, "max_record_bytes" integer) TO "anon";
GRANT ALL ON FUNCTION "realtime"."list_changes"("publication" "name", "slot_name" "name", "max_changes" integer, "max_record_bytes" integer) TO "authenticated";
GRANT ALL ON FUNCTION "realtime"."list_changes"("publication" "name", "slot_name" "name", "max_changes" integer, "max_record_bytes" integer) TO "service_role";
GRANT ALL ON FUNCTION "realtime"."list_changes"("publication" "name", "slot_name" "name", "max_changes" integer, "max_record_bytes" integer) TO "supabase_realtime_admin";



GRANT ALL ON FUNCTION "realtime"."quote_wal2json"("entity" "regclass") TO "postgres";
GRANT ALL ON FUNCTION "realtime"."quote_wal2json"("entity" "regclass") TO "dashboard_user";
GRANT ALL ON FUNCTION "realtime"."quote_wal2json"("entity" "regclass") TO "anon";
GRANT ALL ON FUNCTION "realtime"."quote_wal2json"("entity" "regclass") TO "authenticated";
GRANT ALL ON FUNCTION "realtime"."quote_wal2json"("entity" "regclass") TO "service_role";
GRANT ALL ON FUNCTION "realtime"."quote_wal2json"("entity" "regclass") TO "supabase_realtime_admin";



GRANT ALL ON FUNCTION "realtime"."send"("payload" "jsonb", "event" "text", "topic" "text", "private" boolean) TO "postgres";
GRANT ALL ON FUNCTION "realtime"."send"("payload" "jsonb", "event" "text", "topic" "text", "private" boolean) TO "dashboard_user";



GRANT ALL ON FUNCTION "realtime"."subscription_check_filters"() TO "postgres";
GRANT ALL ON FUNCTION "realtime"."subscription_check_filters"() TO "dashboard_user";
GRANT ALL ON FUNCTION "realtime"."subscription_check_filters"() TO "anon";
GRANT ALL ON FUNCTION "realtime"."subscription_check_filters"() TO "authenticated";
GRANT ALL ON FUNCTION "realtime"."subscription_check_filters"() TO "service_role";
GRANT ALL ON FUNCTION "realtime"."subscription_check_filters"() TO "supabase_realtime_admin";



GRANT ALL ON FUNCTION "realtime"."to_regrole"("role_name" "text") TO "postgres";
GRANT ALL ON FUNCTION "realtime"."to_regrole"("role_name" "text") TO "dashboard_user";
GRANT ALL ON FUNCTION "realtime"."to_regrole"("role_name" "text") TO "anon";
GRANT ALL ON FUNCTION "realtime"."to_regrole"("role_name" "text") TO "authenticated";
GRANT ALL ON FUNCTION "realtime"."to_regrole"("role_name" "text") TO "service_role";
GRANT ALL ON FUNCTION "realtime"."to_regrole"("role_name" "text") TO "supabase_realtime_admin";



GRANT ALL ON FUNCTION "realtime"."topic"() TO "postgres";
GRANT ALL ON FUNCTION "realtime"."topic"() TO "dashboard_user";



GRANT ALL ON FUNCTION "storage"."can_insert_object"("bucketid" "text", "name" "text", "owner" "uuid", "metadata" "jsonb") TO "postgres";



GRANT ALL ON FUNCTION "storage"."extension"("name" "text") TO "postgres";



GRANT ALL ON FUNCTION "storage"."filename"("name" "text") TO "postgres";



GRANT ALL ON FUNCTION "storage"."foldername"("name" "text") TO "postgres";



GRANT ALL ON FUNCTION "storage"."get_size_by_bucket"() TO "postgres";



GRANT ALL ON FUNCTION "storage"."list_multipart_uploads_with_delimiter"("bucket_id" "text", "prefix_param" "text", "delimiter_param" "text", "max_keys" integer, "next_key_token" "text", "next_upload_token" "text") TO "postgres";



GRANT ALL ON FUNCTION "storage"."list_objects_with_delimiter"("bucket_id" "text", "prefix_param" "text", "delimiter_param" "text", "max_keys" integer, "start_after" "text", "next_token" "text") TO "postgres";



GRANT ALL ON FUNCTION "storage"."operation"() TO "postgres";



GRANT ALL ON FUNCTION "storage"."search"("prefix" "text", "bucketname" "text", "limits" integer, "levels" integer, "offsets" integer, "search" "text", "sortcolumn" "text", "sortorder" "text") TO "postgres";



GRANT ALL ON FUNCTION "storage"."update_updated_at_column"() TO "postgres";



GRANT ALL ON TABLE "auth"."audit_log_entries" TO "dashboard_user";
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."audit_log_entries" TO "postgres";
GRANT SELECT ON TABLE "auth"."audit_log_entries" TO "postgres" WITH GRANT OPTION;



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."flow_state" TO "postgres";
GRANT SELECT ON TABLE "auth"."flow_state" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."flow_state" TO "dashboard_user";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."identities" TO "postgres";
GRANT SELECT ON TABLE "auth"."identities" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."identities" TO "dashboard_user";



GRANT ALL ON TABLE "auth"."instances" TO "dashboard_user";
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."instances" TO "postgres";
GRANT SELECT ON TABLE "auth"."instances" TO "postgres" WITH GRANT OPTION;



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."mfa_amr_claims" TO "postgres";
GRANT SELECT ON TABLE "auth"."mfa_amr_claims" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."mfa_amr_claims" TO "dashboard_user";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."mfa_challenges" TO "postgres";
GRANT SELECT ON TABLE "auth"."mfa_challenges" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."mfa_challenges" TO "dashboard_user";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."mfa_factors" TO "postgres";
GRANT SELECT ON TABLE "auth"."mfa_factors" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."mfa_factors" TO "dashboard_user";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."one_time_tokens" TO "postgres";
GRANT SELECT ON TABLE "auth"."one_time_tokens" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."one_time_tokens" TO "dashboard_user";



GRANT ALL ON TABLE "auth"."refresh_tokens" TO "dashboard_user";
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."refresh_tokens" TO "postgres";
GRANT SELECT ON TABLE "auth"."refresh_tokens" TO "postgres" WITH GRANT OPTION;



GRANT ALL ON SEQUENCE "auth"."refresh_tokens_id_seq" TO "dashboard_user";
GRANT ALL ON SEQUENCE "auth"."refresh_tokens_id_seq" TO "postgres";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."saml_providers" TO "postgres";
GRANT SELECT ON TABLE "auth"."saml_providers" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."saml_providers" TO "dashboard_user";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."saml_relay_states" TO "postgres";
GRANT SELECT ON TABLE "auth"."saml_relay_states" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."saml_relay_states" TO "dashboard_user";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."sessions" TO "postgres";
GRANT SELECT ON TABLE "auth"."sessions" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."sessions" TO "dashboard_user";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."sso_domains" TO "postgres";
GRANT SELECT ON TABLE "auth"."sso_domains" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."sso_domains" TO "dashboard_user";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."sso_providers" TO "postgres";
GRANT SELECT ON TABLE "auth"."sso_providers" TO "postgres" WITH GRANT OPTION;
GRANT ALL ON TABLE "auth"."sso_providers" TO "dashboard_user";



GRANT ALL ON TABLE "auth"."users" TO "dashboard_user";
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE "auth"."users" TO "postgres";
GRANT SELECT ON TABLE "auth"."users" TO "postgres" WITH GRANT OPTION;



GRANT SELECT ON TABLE "information_schema"."applicable_roles" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."administrable_role_authorizations" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."attributes" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."character_sets" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."check_constraint_routine_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."check_constraints" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."collation_character_set_applicability" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."collations" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."column_column_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."column_domain_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."column_options" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."column_privileges" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."column_udt_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."columns" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."constraint_column_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."constraint_table_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."domains" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."parameters" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."routines" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."data_type_privileges" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."domain_constraints" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."domain_udt_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."element_types" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."enabled_roles" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."foreign_data_wrapper_options" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."foreign_data_wrappers" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."foreign_server_options" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."foreign_servers" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."foreign_table_options" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."foreign_tables" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."information_schema_catalog_name" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."key_column_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."referential_constraints" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."role_column_grants" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."routine_privileges" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."role_routine_grants" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."table_privileges" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."role_table_grants" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."udt_privileges" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."role_udt_grants" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."usage_privileges" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."role_usage_grants" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."routine_column_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."routine_routine_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."routine_sequence_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."routine_table_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."schemata" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."sequences" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."sql_features" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."sql_implementation_info" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."sql_sizing" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."table_constraints" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."tables" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."triggered_update_columns" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."triggers" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."user_defined_types" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."user_mapping_options" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."user_mappings" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."view_column_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."view_routine_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."view_table_usage" TO PUBLIC;



GRANT SELECT ON TABLE "information_schema"."views" TO PUBLIC;



GRANT ALL ON TABLE "public"."ingredients" TO "anon";
GRANT ALL ON TABLE "public"."ingredients" TO "authenticated";
GRANT ALL ON TABLE "public"."ingredients" TO "service_role";



GRANT ALL ON TABLE "public"."meal_plan_recipes" TO "anon";
GRANT ALL ON TABLE "public"."meal_plan_recipes" TO "authenticated";
GRANT ALL ON TABLE "public"."meal_plan_recipes" TO "service_role";



GRANT ALL ON TABLE "public"."meal_plan_stores" TO "anon";
GRANT ALL ON TABLE "public"."meal_plan_stores" TO "authenticated";
GRANT ALL ON TABLE "public"."meal_plan_stores" TO "service_role";



GRANT ALL ON TABLE "public"."meal_plans" TO "anon";
GRANT ALL ON TABLE "public"."meal_plans" TO "authenticated";
GRANT ALL ON TABLE "public"."meal_plans" TO "service_role";



GRANT ALL ON TABLE "public"."nutrition_requirements" TO "anon";
GRANT ALL ON TABLE "public"."nutrition_requirements" TO "authenticated";
GRANT ALL ON TABLE "public"."nutrition_requirements" TO "service_role";



GRANT ALL ON TABLE "public"."prices" TO "anon";
GRANT ALL ON TABLE "public"."prices" TO "authenticated";
GRANT ALL ON TABLE "public"."prices" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."recipe_ingredients" TO "anon";
GRANT ALL ON TABLE "public"."recipe_ingredients" TO "authenticated";
GRANT ALL ON TABLE "public"."recipe_ingredients" TO "service_role";



GRANT ALL ON TABLE "public"."recipes" TO "anon";
GRANT ALL ON TABLE "public"."recipes" TO "authenticated";
GRANT ALL ON TABLE "public"."recipes" TO "service_role";



GRANT ALL ON TABLE "public"."stores" TO "anon";
GRANT ALL ON TABLE "public"."stores" TO "authenticated";
GRANT ALL ON TABLE "public"."stores" TO "service_role";



GRANT ALL ON TABLE "public"."stores_prices" TO "anon";
GRANT ALL ON TABLE "public"."stores_prices" TO "authenticated";
GRANT ALL ON TABLE "public"."stores_prices" TO "service_role";



GRANT ALL ON TABLE "public"."test_embeddings" TO "anon";
GRANT ALL ON TABLE "public"."test_embeddings" TO "authenticated";
GRANT ALL ON TABLE "public"."test_embeddings" TO "service_role";



GRANT ALL ON SEQUENCE "public"."test_embeddings_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."test_embeddings_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."test_embeddings_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."test_setup" TO "anon";
GRANT ALL ON TABLE "public"."test_setup" TO "authenticated";
GRANT ALL ON TABLE "public"."test_setup" TO "service_role";



GRANT ALL ON SEQUENCE "public"."test_setup_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."test_setup_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."test_setup_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."test_vectors" TO "anon";
GRANT ALL ON TABLE "public"."test_vectors" TO "authenticated";
GRANT ALL ON TABLE "public"."test_vectors" TO "service_role";



GRANT ALL ON SEQUENCE "public"."test_vectors_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."test_vectors_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."test_vectors_id_seq" TO "service_role";



GRANT ALL ON TABLE "realtime"."messages" TO "postgres";
GRANT ALL ON TABLE "realtime"."messages" TO "dashboard_user";
GRANT SELECT,INSERT,UPDATE ON TABLE "realtime"."messages" TO "anon";
GRANT SELECT,INSERT,UPDATE ON TABLE "realtime"."messages" TO "authenticated";
GRANT SELECT,INSERT,UPDATE ON TABLE "realtime"."messages" TO "service_role";



GRANT ALL ON TABLE "realtime"."schema_migrations" TO "postgres";
GRANT ALL ON TABLE "realtime"."schema_migrations" TO "dashboard_user";
GRANT SELECT ON TABLE "realtime"."schema_migrations" TO "anon";
GRANT SELECT ON TABLE "realtime"."schema_migrations" TO "authenticated";
GRANT SELECT ON TABLE "realtime"."schema_migrations" TO "service_role";
GRANT ALL ON TABLE "realtime"."schema_migrations" TO "supabase_realtime_admin";



GRANT ALL ON TABLE "realtime"."subscription" TO "postgres";
GRANT ALL ON TABLE "realtime"."subscription" TO "dashboard_user";
GRANT SELECT ON TABLE "realtime"."subscription" TO "anon";
GRANT SELECT ON TABLE "realtime"."subscription" TO "authenticated";
GRANT SELECT ON TABLE "realtime"."subscription" TO "service_role";
GRANT ALL ON TABLE "realtime"."subscription" TO "supabase_realtime_admin";



GRANT ALL ON SEQUENCE "realtime"."subscription_id_seq" TO "postgres";
GRANT ALL ON SEQUENCE "realtime"."subscription_id_seq" TO "dashboard_user";
GRANT USAGE ON SEQUENCE "realtime"."subscription_id_seq" TO "anon";
GRANT USAGE ON SEQUENCE "realtime"."subscription_id_seq" TO "authenticated";
GRANT USAGE ON SEQUENCE "realtime"."subscription_id_seq" TO "service_role";
GRANT ALL ON SEQUENCE "realtime"."subscription_id_seq" TO "supabase_realtime_admin";



GRANT ALL ON TABLE "storage"."buckets" TO "anon";
GRANT ALL ON TABLE "storage"."buckets" TO "authenticated";
GRANT ALL ON TABLE "storage"."buckets" TO "service_role";
GRANT ALL ON TABLE "storage"."buckets" TO "postgres";



GRANT ALL ON TABLE "storage"."objects" TO "anon";
GRANT ALL ON TABLE "storage"."objects" TO "authenticated";
GRANT ALL ON TABLE "storage"."objects" TO "service_role";
GRANT ALL ON TABLE "storage"."objects" TO "postgres";



GRANT ALL ON TABLE "storage"."s3_multipart_uploads" TO "service_role";
GRANT SELECT ON TABLE "storage"."s3_multipart_uploads" TO "authenticated";
GRANT SELECT ON TABLE "storage"."s3_multipart_uploads" TO "anon";
GRANT ALL ON TABLE "storage"."s3_multipart_uploads" TO "postgres";



GRANT ALL ON TABLE "storage"."s3_multipart_uploads_parts" TO "service_role";
GRANT SELECT ON TABLE "storage"."s3_multipart_uploads_parts" TO "authenticated";
GRANT SELECT ON TABLE "storage"."s3_multipart_uploads_parts" TO "anon";
GRANT ALL ON TABLE "storage"."s3_multipart_uploads_parts" TO "postgres";



ALTER DEFAULT PRIVILEGES FOR ROLE "supabase_auth_admin" IN SCHEMA "auth" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "supabase_auth_admin" IN SCHEMA "auth" GRANT ALL ON SEQUENCES TO "dashboard_user";



ALTER DEFAULT PRIVILEGES FOR ROLE "supabase_auth_admin" IN SCHEMA "auth" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "supabase_auth_admin" IN SCHEMA "auth" GRANT ALL ON FUNCTIONS TO "dashboard_user";



ALTER DEFAULT PRIVILEGES FOR ROLE "supabase_auth_admin" IN SCHEMA "auth" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "supabase_auth_admin" IN SCHEMA "auth" GRANT ALL ON TABLES TO "dashboard_user";






























ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";















ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON SEQUENCES TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON FUNCTIONS TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "storage" GRANT ALL ON TABLES TO "service_role";



RESET ALL;
